
_usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800ba38  0800ba38  0000ca38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be08  0800be08  0000d2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be08  0800be08  0000ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be10  0800be10  0000d2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be10  0800be10  0000ce10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be14  0800be14  0000ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800be18  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d2c4  2**0
                  CONTENTS
 10 .bss          00005e90  200002c4  200002c4  0000d2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006154  20006154  0000d2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157c0  00000000  00000000  0000d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a7d  00000000  00000000  00022ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00026538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efb  00000000  00000000  000278e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f1d  00000000  00000000  000287e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001941e  00000000  00000000  0004e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db796  00000000  00000000  00067b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001432b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061b4  00000000  00000000  001432f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001494ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba20 	.word	0x0800ba20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800ba20 	.word	0x0800ba20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN PV */
char buffer_cokomel[3];
uint16_t adc_buffer_1[4096],adc_buffer_2[4096];
uint16_t adc_buffer[8192];
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(&huart4, buffer_cokomel,3,100);

//

}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fc34 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f83c 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f9b0 	bl	8001230 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed0:	f000 f98e 	bl	80011f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ed4:	f000 f8a0 	bl	8001018 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ed8:	f000 f952 	bl	8001180 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000edc:	f007 fc02 	bl	80086e4 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8000ee0:	f000 f904 	bl	80010ec <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rxdata=='a'){
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <main+0x70>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b61      	cmp	r3, #97	@ 0x61
 8000eea:	d11c      	bne.n	8000f26 <main+0x66>
		  completed=0;
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <main+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start(&hadc2);
 8000ef2:	4811      	ldr	r0, [pc, #68]	@ (8000f38 <main+0x78>)
 8000ef4:	f000 fcf6 	bl	80018e4 <HAL_ADC_Start>
		  HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t *)adc_buffer,sizeof(adc_buffer));
 8000ef8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000efc:	490f      	ldr	r1, [pc, #60]	@ (8000f3c <main+0x7c>)
 8000efe:	4810      	ldr	r0, [pc, #64]	@ (8000f40 <main+0x80>)
 8000f00:	f001 f81e 	bl	8001f40 <HAL_ADCEx_MultiModeStart_DMA>
		//  HAL_ADC_Start_DMA(&hadc2,(uint32_t *)&adc_buffer[4096],8192);
		  rxdata='\0';
 8000f04:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <main+0x70>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	@ 0x64
 8000f0c:	f000 fc82 	bl	8001814 <HAL_Delay>
		  HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8000f10:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <main+0x80>)
 8000f12:	f001 f8e1 	bl	80020d8 <HAL_ADCEx_MultiModeStop_DMA>
		  HAL_ADC_Stop(&hadc2);
 8000f16:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <main+0x78>)
 8000f18:	f000 fdb6 	bl	8001a88 <HAL_ADC_Stop>
		  //HAL_ADC_Stop_DMA(&hadc2);
		  CDC_Transmit_FS(adc_buffer,sizeof(adc_buffer));
 8000f1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f20:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <main+0x7c>)
 8000f22:	f007 fca3 	bl	800886c <CDC_Transmit_FS>
		 // CDC_Transmit_FS(adc_buffer_2,sizeof(adc_buffer_2));

	  }

	  HAL_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 fc74 	bl	8001814 <HAL_Delay>
	  if(rxdata=='a'){
 8000f2c:	e7da      	b.n	8000ee4 <main+0x24>
 8000f2e:	bf00      	nop
 8000f30:	200002e0 	.word	0x200002e0
 8000f34:	200002e1 	.word	0x200002e1
 8000f38:	2000032c 	.word	0x2000032c
 8000f3c:	2000041c 	.word	0x2000041c
 8000f40:	200002e4 	.word	0x200002e4

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	@ 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	@ 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f008 fe43 	bl	8009bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	@ (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	@ (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fb8:	23a8      	movs	r3, #168	@ 0xa8
 8000fba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 fa89 	bl	80044e0 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd4:	f000 f98c 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fcea 	bl	80049d0 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001002:	f000 f975 	bl	80012f0 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	@ 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001038:	4a2a      	ldr	r2, [pc, #168]	@ (80010e4 <MX_ADC1_Init+0xcc>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 800103e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001042:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001044:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800104a:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001050:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001052:	2201      	movs	r2, #1
 8001054:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001066:	4a20      	ldr	r2, [pc, #128]	@ (80010e8 <MX_ADC1_Init+0xd0>)
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001072:	2201      	movs	r2, #1
 8001074:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001080:	2201      	movs	r2, #1
 8001082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 8001086:	f000 fbe9 	bl	800185c <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001090:	f000 f92e 	bl	80012f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001094:	2306      	movs	r3, #6
 8001096:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800109c:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 80010aa:	f001 f861 	bl	8002170 <HAL_ADCEx_MultiModeConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80010b4:	f000 f91c 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010b8:	2311      	movs	r3, #17
 80010ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_ADC1_Init+0xc8>)
 80010ca:	f000 fd1b 	bl	8001b04 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010d4:	f000 f90c 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200002e4 	.word	0x200002e4
 80010e4:	40012000 	.word	0x40012000
 80010e8:	0f000001 	.word	0x0f000001

080010ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001100:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <MX_ADC2_Init+0x90>)
 8001102:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001104:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001106:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800110a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_ADC2_Init+0x8c>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_ADC2_Init+0x8c>)
 800111a:	2201      	movs	r2, #1
 800111c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_ADC2_Init+0x8c>)
 800112e:	2201      	movs	r2, #1
 8001130:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_ADC2_Init+0x8c>)
 800113c:	2201      	movs	r2, #1
 800113e:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001140:	480d      	ldr	r0, [pc, #52]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001142:	f000 fb8b 	bl	800185c <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800114c:	f000 f8d0 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001150:	2301      	movs	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_ADC2_Init+0x8c>)
 8001162:	f000 fccf 	bl	8001b04 <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800116c:	f000 f8c0 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000032c 	.word	0x2000032c
 800117c:	40012100 	.word	0x40012100

08001180 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_TIM2_Init+0x6c>)
 8001190:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001194:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_TIM2_Init+0x6c>)
 8001198:	22a7      	movs	r2, #167	@ 0xa7
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <MX_TIM2_Init+0x6c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_TIM2_Init+0x6c>)
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <MX_TIM2_Init+0x6c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_TIM2_Init+0x6c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80011b6:	2108      	movs	r1, #8
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <MX_TIM2_Init+0x6c>)
 80011ba:	f003 fe01 	bl	8004dc0 <HAL_TIM_OnePulse_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 80011c4:	f000 f894 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_TIM2_Init+0x6c>)
 80011d6:	f003 feef 	bl	8004fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80011e0:	f000 f886 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200003d4 	.word	0x200003d4

080011f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <MX_DMA_Init+0x3c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <MX_DMA_Init+0x3c>)
 8001200:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_DMA_Init+0x3c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2038      	movs	r0, #56	@ 0x38
 8001218:	f001 f943 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800121c:	2038      	movs	r0, #56	@ 0x38
 800121e:	f001 f95c 	bl	80024da <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a1f      	ldr	r2, [pc, #124]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_GPIO_Init+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012bc:	480b      	ldr	r0, [pc, #44]	@ (80012ec <MX_GPIO_Init+0xbc>)
 80012be:	f001 fea3 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_GPIO_Init+0xbc>)
 80012dc:	f001 fcf8 	bl	8002cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020c00 	.word	0x40020c00

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133a:	2007      	movs	r0, #7
 800133c:	f001 f8a6 	bl	800248c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a38      	ldr	r2, [pc, #224]	@ (800144c <HAL_ADC_MspInit+0x100>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d13d      	bne.n	80013ea <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a36      	ldr	r2, [pc, #216]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800138a:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 800138c:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <HAL_ADC_MspInit+0x10c>)
 800138e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001390:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001396:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800139c:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b2:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013ba:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013cc:	4821      	ldr	r0, [pc, #132]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013ce:	f001 f89f 	bl	8002510 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 80013d8:	f7ff ff8a 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <HAL_ADC_MspInit+0x108>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013e8:	e02c      	b.n	8001444 <HAL_ADC_MspInit+0xf8>
  else if(hadc->Instance==ADC2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <HAL_ADC_MspInit+0x110>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d127      	bne.n	8001444 <HAL_ADC_MspInit+0xf8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fc:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001402:	6453      	str	r3, [r2, #68]	@ 0x44
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 8001406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_ADC_MspInit+0x104>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800142c:	2302      	movs	r3, #2
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001430:	2303      	movs	r3, #3
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4808      	ldr	r0, [pc, #32]	@ (8001460 <HAL_ADC_MspInit+0x114>)
 8001440:	f001 fc46 	bl	8002cd0 <HAL_GPIO_Init>
}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	@ 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	20000374 	.word	0x20000374
 8001458:	40026410 	.word	0x40026410
 800145c:	40012100 	.word	0x40012100
 8001460:	40020000 	.word	0x40020000

08001464 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001474:	d10d      	bne.n	8001492 <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 f96b 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <DMA2_Stream0_IRQHandler+0x10>)
 800150a:	f001 f977 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000374 	.word	0x20000374

08001518 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <OTG_FS_IRQHandler+0x10>)
 800151e:	f001 fed0 	bl	80032c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20005904 	.word	0x20005904

0800152c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return 1;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_kill>:

int _kill(int pid, int sig)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001546:	f008 fb9d 	bl	8009c84 <__errno>
 800154a:	4603      	mov	r3, r0
 800154c:	2216      	movs	r2, #22
 800154e:	601a      	str	r2, [r3, #0]
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_exit>:

void _exit (int status)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe7 	bl	800153c <_kill>
  while (1) {}    /* Make sure we hang here */
 800156e:	bf00      	nop
 8001570:	e7fd      	b.n	800156e <_exit+0x12>

08001572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e00a      	b.n	800159a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001584:	f3af 8000 	nop.w
 8001588:	4601      	mov	r1, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	60ba      	str	r2, [r7, #8]
 8001590:	b2ca      	uxtb	r2, r1
 8001592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbf0      	blt.n	8001584 <_read+0x12>
  }

  return len;
 80015a2:	687b      	ldr	r3, [r7, #4]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e009      	b.n	80015d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbf1      	blt.n	80015be <_write+0x12>
  }
  return len;
 80015da:	687b      	ldr	r3, [r7, #4]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_close>:

int _close(int file)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800160c:	605a      	str	r2, [r3, #4]
  return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_isatty>:

int _isatty(int file)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f008 fb02 	bl	8009c84 <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20020000 	.word	0x20020000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	2000441c 	.word	0x2000441c
 80016b4:	20006158 	.word	0x20006158

080016b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001714 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016e0:	f7ff ffea 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170a:	f008 fac1 	bl	8009c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fbd7 	bl	8000ec0 <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001720:	0800be18 	.word	0x0800be18
  ldr r2, =_sbss
 8001724:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001728:	20006154 	.word	0x20006154

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	@ (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 fe97 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fdca 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 feaf 	bl	80024f6 <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f000 fe77 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20004420 	.word	0x20004420

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20004420 	.word	0x20004420

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e033      	b.n	80018da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fd66 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018a2:	f023 0302 	bic.w	r3, r3, #2
 80018a6:	f043 0202 	orr.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fa4a 	bl	8001d48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f023 0303 	bic.w	r3, r3, #3
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ca:	e001      	b.n	80018d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_Start+0x1a>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0b2      	b.n	8001a64 <HAL_ADC_Start+0x180>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d018      	beq.n	8001946 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001924:	4b52      	ldr	r3, [pc, #328]	@ (8001a70 <HAL_ADC_Start+0x18c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a52      	ldr	r2, [pc, #328]	@ (8001a74 <HAL_ADC_Start+0x190>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	0c9a      	lsrs	r2, r3, #18
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001938:	e002      	b.n	8001940 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d17a      	bne.n	8001a4a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800197e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800198e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001992:	d106      	bne.n	80019a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f023 0206 	bic.w	r2, r3, #6
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	645a      	str	r2, [r3, #68]	@ 0x44
 80019a0:	e002      	b.n	80019a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b0:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <HAL_ADC_Start+0x194>)
 80019b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019bc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d12a      	bne.n	8001a20 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a2b      	ldr	r2, [pc, #172]	@ (8001a7c <HAL_ADC_Start+0x198>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d015      	beq.n	8001a00 <HAL_ADC_Start+0x11c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a29      	ldr	r2, [pc, #164]	@ (8001a80 <HAL_ADC_Start+0x19c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d105      	bne.n	80019ea <HAL_ADC_Start+0x106>
 80019de:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <HAL_ADC_Start+0x194>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a25      	ldr	r2, [pc, #148]	@ (8001a84 <HAL_ADC_Start+0x1a0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d136      	bne.n	8001a62 <HAL_ADC_Start+0x17e>
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_ADC_Start+0x194>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d130      	bne.n	8001a62 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d129      	bne.n	8001a62 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	e020      	b.n	8001a62 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a15      	ldr	r2, [pc, #84]	@ (8001a7c <HAL_ADC_Start+0x198>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d11b      	bne.n	8001a62 <HAL_ADC_Start+0x17e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d114      	bne.n	8001a62 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e00b      	b.n	8001a62 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f043 0210 	orr.w	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000000 	.word	0x20000000
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	40012300 	.word	0x40012300
 8001a7c:	40012000 	.word	0x40012000
 8001a80:	40012100 	.word	0x40012100
 8001a84:	40012200 	.word	0x40012200

08001a88 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Stop+0x16>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e021      	b.n	8001ae2 <HAL_ADC_Stop+0x5a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1c>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e105      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x228>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d925      	bls.n	8001b7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	3b1e      	subs	r3, #30
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	400a      	ands	r2, r1
 8001b54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68d9      	ldr	r1, [r3, #12]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	4603      	mov	r3, r0
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4403      	add	r3, r0
 8001b6e:	3b1e      	subs	r3, #30
 8001b70:	409a      	lsls	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	e022      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6919      	ldr	r1, [r3, #16]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	2207      	movs	r2, #7
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4403      	add	r3, r0
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d824      	bhi.n	8001c14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b05      	subs	r3, #5
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b05      	subs	r3, #5
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c12:	e04c      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d824      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b23      	subs	r3, #35	@ 0x23
 8001c2e:	221f      	movs	r2, #31
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b23      	subs	r3, #35	@ 0x23
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c64:	e023      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b41      	subs	r3, #65	@ 0x41
 8001c78:	221f      	movs	r2, #31
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	400a      	ands	r2, r1
 8001c86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b41      	subs	r3, #65	@ 0x41
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cae:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <HAL_ADC_ConfigChannel+0x234>)
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <HAL_ADC_ConfigChannel+0x238>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1cc>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b12      	cmp	r3, #18
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <HAL_ADC_ConfigChannel+0x238>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d123      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x21e>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d003      	beq.n	8001cea <HAL_ADC_ConfigChannel+0x1e6>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b11      	cmp	r3, #17
 8001ce8:	d11b      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d111      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <HAL_ADC_ConfigChannel+0x23c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <HAL_ADC_ConfigChannel+0x240>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9a      	lsrs	r2, r3, #18
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40012300 	.word	0x40012300
 8001d3c:	40012000 	.word	0x40012000
 8001d40:	20000000 	.word	0x20000000
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d50:	4b79      	ldr	r3, [pc, #484]	@ (8001f38 <ADC_Init+0x1f0>)
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	021a      	lsls	r2, r3, #8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6899      	ldr	r1, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	4a58      	ldr	r2, [pc, #352]	@ (8001f3c <ADC_Init+0x1f4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d022      	beq.n	8001e26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	e00f      	b.n	8001e46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0202 	bic.w	r2, r2, #2
 8001e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e1b      	ldrb	r3, [r3, #24]
 8001e60:	005a      	lsls	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	035a      	lsls	r2, r3, #13
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e007      	b.n	8001ebc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	051a      	lsls	r2, r3, #20
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6899      	ldr	r1, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001efe:	025a      	lsls	r2, r3, #9
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6899      	ldr	r1, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	029a      	lsls	r2, r3, #10
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40012300 	.word	0x40012300
 8001f3c:	0f000001 	.word	0x0f000001

08001f40 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored.
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e0ab      	b.n	80020b6 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d018      	beq.n	8001fa6 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	609a      	str	r2, [r3, #8]

    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f84:	4b4e      	ldr	r3, [pc, #312]	@ (80020c0 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	@ (80020c4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9a      	lsrs	r2, r3, #18
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f98:	e002      	b.n	8001fa0 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d173      	bne.n	800209c <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ff2:	d106      	bne.n	8002002 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff8:	f023 0206 	bic.w	r2, r3, #6
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	645a      	str	r2, [r3, #68]	@ 0x44
 8002000:	e002      	b.n	8002008 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	4a2c      	ldr	r2, [pc, #176]	@ (80020c8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002016:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201c:	4a2b      	ldr	r2, [pc, #172]	@ (80020cc <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002024:	4a2a      	ldr	r2, [pc, #168]	@ (80020d0 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8002026:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0202 	mvn.w	r2, #2
 8002030:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002040:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002042:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8002044:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	e005      	b.n	800206a <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	605a      	str	r2, [r3, #4]
    }

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3308      	adds	r3, #8
 8002072:	4619      	mov	r1, r3
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f000 faf8 	bl	800266c <HAL_DMA_Start_IT>

    /* if no external trigger present enable software conversion of regular channels */
    if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d114      	bne.n	80020b4 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	e00b      	b.n	80020b4 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	f043 0210 	orr.w	r2, r3, #16
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000
 80020c4:	431bde83 	.word	0x431bde83
 80020c8:	080021fd 	.word	0x080021fd
 80020cc:	080022a3 	.word	0x080022a3
 80020d0:	080022bf 	.word	0x080022bf
 80020d4:	40012300 	.word	0x40012300

080020d8 <HAL_ADCEx_MultiModeStop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADCEx_MultiModeStop_DMA+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e038      	b.n	8002164 <HAL_ADCEx_MultiModeStop_DMA+0x8c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	609a      	str	r2, [r3, #8]

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_ADCEx_MultiModeStop_DMA+0x94>)
 800210c:	60bb      	str	r3, [r7, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11e      	bne.n	800215a <HAL_ADCEx_MultiModeStop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode for multimode */
    tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	605a      	str	r2, [r3, #4]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212c:	4618      	mov	r0, r3
 800212e:	f000 faf5 	bl	800271c <HAL_DMA_Abort>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002144:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	f043 0201 	orr.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40012300 	.word	0x40012300

08002170 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002184:	2302      	movs	r3, #2
 8002186:	e031      	b.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 021f 	bic.w	r2, r3, #31
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	431a      	orrs	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40012300 	.word	0x40012300

080021fc <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002208:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002212:	2b00      	cmp	r3, #0
 8002214:	d13c      	bne.n	8002290 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d12b      	bne.n	8002288 <ADC_MultiModeDMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	d127      	bne.n	8002288 <ADC_MultiModeDMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <ADC_MultiModeDMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002250:	2b00      	cmp	r3, #0
 8002252:	d119      	bne.n	8002288 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0220 	bic.w	r2, r2, #32
 8002262:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7fe fe0f 	bl	8000eac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800228e:	e004      	b.n	800229a <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7fe fdf1 	bl	8000e98 <HAL_ADC_ConvHalfCpltCallback>
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2240      	movs	r2, #64	@ 0x40
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_ADC_ErrorCallback(hadc);
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fc05 	bl	8001aee <HAL_ADC_ErrorCallback>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	@ (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	@ (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	@ (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff29 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff3e 	bl	8002334 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff31 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa2 	bl	8002448 <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff f96e 	bl	80017fc <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e099      	b.n	8002660 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254c:	e00f      	b.n	800256e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800254e:	f7ff f955 	bl	80017fc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b05      	cmp	r3, #5
 800255a:	d908      	bls.n	800256e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2203      	movs	r2, #3
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e078      	b.n	8002660 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e8      	bne.n	800254e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_DMA_Init+0x158>)
 8002588:	4013      	ands	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4313      	orrs	r3, r2
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0307 	bic.w	r3, r3, #7
 80025ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d117      	bne.n	8002632 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fadf 	bl	8002bd8 <DMA_CheckFifoParam>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2240      	movs	r2, #64	@ 0x40
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800262e:	2301      	movs	r3, #1
 8002630:	e016      	b.n	8002660 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa96 	bl	8002b6c <DMA_CalcBaseAndBitshift>
 8002640:	4603      	mov	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	223f      	movs	r2, #63	@ 0x3f
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	f010803f 	.word	0xf010803f

0800266c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_DMA_Start_IT+0x26>
 800268e:	2302      	movs	r3, #2
 8002690:	e040      	b.n	8002714 <HAL_DMA_Start_IT+0xa8>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d12f      	bne.n	8002706 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fa28 	bl	8002b10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	223f      	movs	r2, #63	@ 0x3f
 80026c6:	409a      	lsls	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0216 	orr.w	r2, r2, #22
 80026da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e005      	b.n	8002712 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800270e:	2302      	movs	r3, #2
 8002710:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002712:	7dfb      	ldrb	r3, [r7, #23]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800272a:	f7ff f867 	bl	80017fc <HAL_GetTick>
 800272e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d008      	beq.n	800274e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2280      	movs	r2, #128	@ 0x80
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e052      	b.n	80027f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0216 	bic.w	r2, r2, #22
 800275c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800276c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_DMA_Abort+0x62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0208 	bic.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279e:	e013      	b.n	80027c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a0:	f7ff f82c 	bl	80017fc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d90c      	bls.n	80027c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2203      	movs	r2, #3
 80027b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e015      	b.n	80027f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e4      	bne.n	80027a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	223f      	movs	r2, #63	@ 0x3f
 80027dc:	409a      	lsls	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002808:	4b8e      	ldr	r3, [pc, #568]	@ (8002a44 <HAL_DMA_IRQHandler+0x248>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a8e      	ldr	r2, [pc, #568]	@ (8002a48 <HAL_DMA_IRQHandler+0x24c>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a9b      	lsrs	r3, r3, #10
 8002814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	2208      	movs	r2, #8
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01a      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	2208      	movs	r2, #8
 8002856:	409a      	lsls	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	2201      	movs	r2, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	f043 0202 	orr.w	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a2:	2204      	movs	r2, #4
 80028a4:	409a      	lsls	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	2204      	movs	r2, #4
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2210      	movs	r2, #16
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d043      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03c      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	2210      	movs	r2, #16
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d018      	beq.n	800293e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e01f      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e016      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0208 	bic.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	2220      	movs	r2, #32
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 808f 	beq.w	8002a9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8087 	beq.w	8002a9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	2220      	movs	r2, #32
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d136      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0216 	bic.w	r2, r2, #22
 80029b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x1da>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0208 	bic.w	r2, r2, #8
 80029e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	223f      	movs	r2, #63	@ 0x3f
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d07e      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
        }
        return;
 8002a12:	e079      	b.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d031      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
 8002a40:	e02c      	b.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000
 8002a48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e01e      	b.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0210 	bic.w	r2, r2, #16
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d032      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d307      	bcc.n	8002ae4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f2      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0x2cc>
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ae4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
 8002b06:	e000      	b.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b08:	bf00      	nop
    }
  }
}
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b40      	cmp	r3, #64	@ 0x40
 8002b3c:	d108      	bne.n	8002b50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b4e:	e007      	b.n	8002b60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b10      	subs	r3, #16
 8002b7c:	4a14      	ldr	r2, [pc, #80]	@ (8002bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b86:	4a13      	ldr	r2, [pc, #76]	@ (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d909      	bls.n	8002bae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	1d1a      	adds	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bac:	e007      	b.n	8002bbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	aaaaaaab 	.word	0xaaaaaaab
 8002bd4:	0800ba90 	.word	0x0800ba90

08002bd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11f      	bne.n	8002c32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d856      	bhi.n	8002ca6 <DMA_CheckFifoParam+0xce>
 8002bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <DMA_CheckFifoParam+0x28>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c23 	.word	0x08002c23
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002ca7 	.word	0x08002ca7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d046      	beq.n	8002caa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e043      	b.n	8002caa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c2a:	d140      	bne.n	8002cae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e03d      	b.n	8002cae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c3a:	d121      	bne.n	8002c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d837      	bhi.n	8002cb2 <DMA_CheckFifoParam+0xda>
 8002c42:	a201      	add	r2, pc, #4	@ (adr r2, 8002c48 <DMA_CheckFifoParam+0x70>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c5f 	.word	0x08002c5f
 8002c50:	08002c59 	.word	0x08002c59
 8002c54:	08002c71 	.word	0x08002c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e030      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d025      	beq.n	8002cb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e022      	b.n	8002cb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c78:	d11f      	bne.n	8002cba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7e:	e01c      	b.n	8002cba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d903      	bls.n	8002c8e <DMA_CheckFifoParam+0xb6>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d003      	beq.n	8002c94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c8c:	e018      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      break;
 8002c92:	e015      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00e      	beq.n	8002cbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca4:	e00b      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e00a      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e008      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e006      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e004      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e002      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e16b      	b.n	8002fc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f040 815a 	bne.w	8002fbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d005      	beq.n	8002d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d130      	bne.n	8002d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 0201 	and.w	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d017      	beq.n	8002dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d123      	bne.n	8002e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	220f      	movs	r2, #15
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80b4 	beq.w	8002fbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b60      	ldr	r3, [pc, #384]	@ (8002fdc <HAL_GPIO_Init+0x30c>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fdc <HAL_GPIO_Init+0x30c>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e66:	4b5d      	ldr	r3, [pc, #372]	@ (8002fdc <HAL_GPIO_Init+0x30c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e72:	4a5b      	ldr	r2, [pc, #364]	@ (8002fe0 <HAL_GPIO_Init+0x310>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	220f      	movs	r2, #15
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a52      	ldr	r2, [pc, #328]	@ (8002fe4 <HAL_GPIO_Init+0x314>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02b      	beq.n	8002ef6 <HAL_GPIO_Init+0x226>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a51      	ldr	r2, [pc, #324]	@ (8002fe8 <HAL_GPIO_Init+0x318>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d025      	beq.n	8002ef2 <HAL_GPIO_Init+0x222>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	@ (8002fec <HAL_GPIO_Init+0x31c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01f      	beq.n	8002eee <HAL_GPIO_Init+0x21e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff0 <HAL_GPIO_Init+0x320>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_GPIO_Init+0x21a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff4 <HAL_GPIO_Init+0x324>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_GPIO_Init+0x216>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff8 <HAL_GPIO_Init+0x328>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_GPIO_Init+0x212>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8002ffc <HAL_GPIO_Init+0x32c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <HAL_GPIO_Init+0x20e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8003000 <HAL_GPIO_Init+0x330>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_GPIO_Init+0x20a>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e00e      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002eda:	2308      	movs	r3, #8
 8002edc:	e00c      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ede:	2306      	movs	r3, #6
 8002ee0:	e00a      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	e008      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002eea:	2303      	movs	r3, #3
 8002eec:	e004      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_GPIO_Init+0x228>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f002 0203 	and.w	r2, r2, #3
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4093      	lsls	r3, r2
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f08:	4935      	ldr	r1, [pc, #212]	@ (8002fe0 <HAL_GPIO_Init+0x310>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f16:	4b3b      	ldr	r3, [pc, #236]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3a:	4a32      	ldr	r2, [pc, #200]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f40:	4b30      	ldr	r3, [pc, #192]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f64:	4a27      	ldr	r2, [pc, #156]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6a:	4b26      	ldr	r3, [pc, #152]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb8:	4a12      	ldr	r2, [pc, #72]	@ (8003004 <HAL_GPIO_Init+0x334>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	f67f ae90 	bls.w	8002cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3724      	adds	r7, #36	@ 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40020800 	.word	0x40020800
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40021400 	.word	0x40021400
 8002ffc:	40021800 	.word	0x40021800
 8003000:	40021c00 	.word	0x40021c00
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
 8003014:	4613      	mov	r3, r2
 8003016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003018:	787b      	ldrb	r3, [r7, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003024:	e003      	b.n	800302e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	041a      	lsls	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	619a      	str	r2, [r3, #24]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af02      	add	r7, sp, #8
 8003040:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e101      	b.n	8003250 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f005 fd48 	bl	8008afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800307a:	d102      	bne.n	8003082 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f002 f929 	bl	80052de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7c1a      	ldrb	r2, [r3, #16]
 8003094:	f88d 2000 	strb.w	r2, [sp]
 8003098:	3304      	adds	r3, #4
 800309a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309c:	f002 f808 	bl	80050b0 <USB_CoreInit>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0ce      	b.n	8003250 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 f921 	bl	8005300 <USB_SetCurrentMode>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0bf      	b.n	8003250 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e04a      	b.n	800316c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030d6:	7bfa      	ldrb	r2, [r7, #15]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3315      	adds	r3, #21
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3314      	adds	r3, #20
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	b298      	uxth	r0, r3
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	332e      	adds	r3, #46	@ 0x2e
 8003112:	4602      	mov	r2, r0
 8003114:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3318      	adds	r3, #24
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	331c      	adds	r3, #28
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3320      	adds	r3, #32
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3324      	adds	r3, #36	@ 0x24
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	3301      	adds	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	429a      	cmp	r2, r3
 8003174:	d3af      	bcc.n	80030d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	e044      	b.n	8003206 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	3301      	adds	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	791b      	ldrb	r3, [r3, #4]
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	429a      	cmp	r2, r3
 800320e:	d3b5      	bcc.n	800317c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7c1a      	ldrb	r2, [r3, #16]
 8003218:	f88d 2000 	strb.w	r2, [sp]
 800321c:	3304      	adds	r3, #4
 800321e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003220:	f002 f8ba 	bl	8005398 <USB_DevInit>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00c      	b.n	8003250 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f904 	bl	8006456 <USB_DevDisconnect>

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_PCD_Start+0x1c>
 8003270:	2302      	movs	r3, #2
 8003272:	e022      	b.n	80032ba <HAL_PCD_Start+0x62>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 f80b 	bl	80052bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 f8b2 	bl	8006414 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b08d      	sub	sp, #52	@ 0x34
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 f970 	bl	80065be <USB_GetMode>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 848c 	bne.w	8003bfe <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 f8d4 	bl	8006498 <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8482 	beq.w	8003bfc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f003 f8c1 	bl	8006498 <USB_ReadInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d107      	bne.n	8003330 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f002 0202 	and.w	r2, r2, #2
 800332e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f003 f8af 	bl	8006498 <USB_ReadInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b10      	cmp	r3, #16
 8003342:	d161      	bne.n	8003408 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0210 	bic.w	r2, r2, #16
 8003352:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 020f 	and.w	r2, r3, #15
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	0c5b      	lsrs	r3, r3, #17
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	2b02      	cmp	r3, #2
 800337e:	d124      	bne.n	80033ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d035      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	6a38      	ldr	r0, [r7, #32]
 80033a0:	f002 fee6 	bl	8006170 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b0:	441a      	add	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c2:	441a      	add	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	615a      	str	r2, [r3, #20]
 80033c8:	e016      	b.n	80033f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	0c5b      	lsrs	r3, r3, #17
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d110      	bne.n	80033f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033dc:	2208      	movs	r2, #8
 80033de:	4619      	mov	r1, r3
 80033e0:	6a38      	ldr	r0, [r7, #32]
 80033e2:	f002 fec5 	bl	8006170 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f2:	441a      	add	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0210 	orr.w	r2, r2, #16
 8003406:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f003 f843 	bl	8006498 <USB_ReadInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003418:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800341c:	f040 80a7 	bne.w	800356e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f003 f848 	bl	80064be <USB_ReadDevAllOutEpInterrupt>
 800342e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003430:	e099      	b.n	8003566 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 808e 	beq.w	800355a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f003 f86c 	bl	8006526 <USB_ReadDevOutEPInterrupt>
 800344e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003466:	461a      	mov	r2, r3
 8003468:	2301      	movs	r3, #1
 800346a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800346c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fea4 	bl	80041bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2308      	movs	r3, #8
 800348e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 ff7a 	bl	800438c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ae:	461a      	mov	r2, r3
 80034b0:	2310      	movs	r3, #16
 80034b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d030      	beq.n	8003520 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	2b80      	cmp	r3, #128	@ 0x80
 80034c8:	d109      	bne.n	80034de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	78db      	ldrb	r3, [r3, #3]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d108      	bne.n	800350e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	b2db      	uxtb	r3, r3
 8003506:	4619      	mov	r1, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f005 fbfd 	bl	8008d08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351a:	461a      	mov	r2, r3
 800351c:	2302      	movs	r3, #2
 800351e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003536:	461a      	mov	r2, r3
 8003538:	2320      	movs	r3, #32
 800353a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003552:	461a      	mov	r2, r3
 8003554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003558:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	f47f af62 	bne.w	8003432 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f002 ff90 	bl	8006498 <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003582:	f040 80db 	bne.w	800373c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f002 ffb1 	bl	80064f2 <USB_ReadDevAllInEpInterrupt>
 8003590:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003596:	e0cd      	b.n	8003734 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80c2 	beq.w	8003728 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 ffd7 	bl	8006562 <USB_ReadDevInEPInterrupt>
 80035b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d057      	beq.n	8003670 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	2201      	movs	r2, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035e0:	4013      	ands	r3, r2
 80035e2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f0:	461a      	mov	r2, r3
 80035f2:	2301      	movs	r3, #1
 80035f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	799b      	ldrb	r3, [r3, #6]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d132      	bne.n	8003664 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3320      	adds	r3, #32
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4403      	add	r3, r0
 800361e:	331c      	adds	r3, #28
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4419      	add	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4403      	add	r3, r0
 8003632:	3320      	adds	r3, #32
 8003634:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	d113      	bne.n	8003664 <HAL_PCD_IRQHandler+0x3a2>
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3324      	adds	r3, #36	@ 0x24
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800365c:	461a      	mov	r2, r3
 800365e:	2101      	movs	r1, #1
 8003660:	f002 ffde 	bl	8006620 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f005 fac7 	bl	8008bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003686:	461a      	mov	r2, r3
 8003688:	2308      	movs	r3, #8
 800368a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a2:	461a      	mov	r2, r3
 80036a4:	2310      	movs	r3, #16
 80036a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036be:	461a      	mov	r2, r3
 80036c0:	2340      	movs	r3, #64	@ 0x40
 80036c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d023      	beq.n	8003716 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036d0:	6a38      	ldr	r0, [r7, #32]
 80036d2:	f001 ffc5 	bl	8005660 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	3310      	adds	r3, #16
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	78db      	ldrb	r3, [r3, #3]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d108      	bne.n	8003704 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f005 fb14 	bl	8008d2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003710:	461a      	mov	r2, r3
 8003712:	2302      	movs	r3, #2
 8003714:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003720:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fcbd 	bl	80040a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	3301      	adds	r3, #1
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	2b00      	cmp	r3, #0
 8003738:	f47f af2e 	bne.w	8003598 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f002 fea9 	bl	8006498 <USB_ReadInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800374c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003750:	d122      	bne.n	8003798 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800376c:	2b01      	cmp	r3, #1
 800376e:	d108      	bne.n	8003782 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003778:	2100      	movs	r1, #0
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fea4 	bl	80044c8 <HAL_PCDEx_LPM_Callback>
 8003780:	e002      	b.n	8003788 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f005 fab2 	bl	8008cec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fe7b 	bl	8006498 <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ac:	d112      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f005 fa6e 	bl	8008ca0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80037d2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 fe5d 	bl	8006498 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e8:	f040 80b7 	bne.w	800395a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2110      	movs	r1, #16
 8003806:	4618      	mov	r0, r3
 8003808:	f001 ff2a 	bl	8005660 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380c:	2300      	movs	r3, #0
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003810:	e046      	b.n	80038a0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381e:	461a      	mov	r2, r3
 8003820:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003824:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003836:	0151      	lsls	r1, r2, #5
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	440a      	add	r2, r1
 800383c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003840:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003844:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003852:	461a      	mov	r2, r3
 8003854:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003858:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800386a:	0151      	lsls	r1, r2, #5
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	440a      	add	r2, r1
 8003870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003874:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003878:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800388a:	0151      	lsls	r1, r2, #5
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	440a      	add	r2, r1
 8003890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003894:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003898:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389c:	3301      	adds	r3, #1
 800389e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	791b      	ldrb	r3, [r3, #4]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d3b2      	bcc.n	8003812 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ba:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80038be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7bdb      	ldrb	r3, [r3, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d016      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d8:	f043 030b 	orr.w	r3, r3, #11
 80038dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ee:	f043 030b 	orr.w	r3, r3, #11
 80038f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80038f4:	e015      	b.n	8003922 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003904:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003908:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800390c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800391c:	f043 030b 	orr.w	r3, r3, #11
 8003920:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003930:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003934:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003944:	461a      	mov	r2, r3
 8003946:	f002 fe6b 	bl	8006620 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f002 fd9a 	bl	8006498 <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396e:	d123      	bne.n	80039b8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f002 fe30 	bl	80065da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fee7 	bl	8005752 <USB_GetDevSpeed>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681c      	ldr	r4, [r3, #0]
 8003990:	f001 fa0a 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8003994:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	4620      	mov	r0, r4
 800399e:	f001 fbeb 	bl	8005178 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f005 f953 	bl	8008c4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80039b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 fd6b 	bl	8006498 <USB_ReadInterrupts>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d10a      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f005 f930 	bl	8008c32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f002 0208 	and.w	r2, r2, #8
 80039e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fd56 	bl	8006498 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b80      	cmp	r3, #128	@ 0x80
 80039f4:	d123      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a02:	2301      	movs	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a06:	e014      	b.n	8003a32 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fb0a 	bl	8004040 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	3301      	adds	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	791b      	ldrb	r3, [r3, #4]
 8003a36:	461a      	mov	r2, r3
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d3e4      	bcc.n	8003a08 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 fd28 	bl	8006498 <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a52:	d13c      	bne.n	8003ace <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a54:	2301      	movs	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a58:	e02b      	b.n	8003ab2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3318      	adds	r3, #24
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d115      	bne.n	8003aac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	da12      	bge.n	8003aac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	3317      	adds	r3, #23
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 faca 	bl	8004040 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	3301      	adds	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	791b      	ldrb	r3, [r3, #4]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d3cd      	bcc.n	8003a5a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f002 fce0 	bl	8006498 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae2:	d156      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	e045      	b.n	8003b76 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d12e      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da2b      	bge.n	8003b70 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003b24:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d121      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b6c:	6053      	str	r3, [r2, #4]
            break;
 8003b6e:	e008      	b.n	8003b82 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	3301      	adds	r3, #1
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d3b3      	bcc.n	8003aea <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f002 fc7e 	bl	8006498 <USB_ReadInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba6:	d10a      	bne.n	8003bbe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f005 f8d1 	bl	8008d50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f002 fc68 	bl	8006498 <USB_ReadInterrupts>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d115      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f005 f8c1 	bl	8008d6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	e000      	b.n	8003bfe <HAL_PCD_IRQHandler+0x93c>
      return;
 8003bfc:	bf00      	nop
    }
  }
}
 8003bfe:	3734      	adds	r7, #52	@ 0x34
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd90      	pop	{r4, r7, pc}

08003c04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_PCD_SetAddress+0x1a>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e012      	b.n	8003c44 <HAL_PCD_SetAddress+0x40>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fbc7 	bl	80063c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	70fb      	strb	r3, [r7, #3]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	803b      	strh	r3, [r7, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da0f      	bge.n	8003c92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	3310      	adds	r3, #16
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	3304      	adds	r3, #4
 8003c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	705a      	strb	r2, [r3, #1]
 8003c90:	e00f      	b.n	8003cb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	f003 020f 	and.w	r2, r3, #15
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003cbe:	883b      	ldrh	r3, [r7, #0]
 8003cc0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	78ba      	ldrb	r2, [r7, #2]
 8003ccc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ce0:	78bb      	ldrb	r3, [r7, #2]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d102      	bne.n	8003cec <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_PCD_EP_Open+0xae>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e00e      	b.n	8003d18 <HAL_PCD_EP_Open+0xcc>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 fd47 	bl	800579c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003d16:	7afb      	ldrb	r3, [r7, #11]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da0f      	bge.n	8003d54 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	3310      	adds	r3, #16
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	3304      	adds	r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	705a      	strb	r2, [r3, #1]
 8003d52:	e00f      	b.n	8003d74 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 020f 	and.w	r2, r3, #15
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_PCD_EP_Close+0x6e>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e00e      	b.n	8003dac <HAL_PCD_EP_Close+0x8c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fd85 	bl	80058ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3304      	adds	r3, #4
 8003ddc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2200      	movs	r2, #0
 8003dee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df6:	7afb      	ldrb	r3, [r7, #11]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	799b      	ldrb	r3, [r3, #6]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	799b      	ldrb	r3, [r3, #6]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6979      	ldr	r1, [r7, #20]
 8003e1c:	f001 fe22 	bl	8005a64 <USB_EPStartXfer>

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003e4c:	681b      	ldr	r3, [r3, #0]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	460b      	mov	r3, r1
 8003e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	3310      	adds	r3, #16
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3304      	adds	r3, #4
 8003e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2201      	movs	r2, #1
 8003e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	799b      	ldrb	r3, [r3, #6]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d102      	bne.n	8003eb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	799b      	ldrb	r3, [r3, #6]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6979      	ldr	r1, [r7, #20]
 8003ec0:	f001 fdd0 	bl	8005a64 <USB_EPStartXfer>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	7912      	ldrb	r2, [r2, #4]
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e04f      	b.n	8003f8c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da0f      	bge.n	8003f14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	3310      	adds	r3, #16
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	705a      	strb	r2, [r3, #1]
 8003f12:	e00d      	b.n	8003f30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_PCD_EP_SetStall+0x82>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e01d      	b.n	8003f8c <HAL_PCD_EP_SetStall+0xbe>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f002 f95e 	bl	8006220 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	7999      	ldrb	r1, [r3, #6]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f002 fb4f 	bl	8006620 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	7912      	ldrb	r2, [r2, #4]
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e042      	b.n	8004038 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da0f      	bge.n	8003fda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	3310      	adds	r3, #16
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	3304      	adds	r3, #4
 8003fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
 8003fd8:	e00f      	b.n	8003ffa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 020f 	and.w	r2, r3, #15
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_PCD_EP_ClrStall+0x86>
 8004016:	2302      	movs	r3, #2
 8004018:	e00e      	b.n	8004038 <HAL_PCD_EP_ClrStall+0xa4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	4618      	mov	r0, r3
 800402a:	f002 f967 	bl	80062fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800404c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004050:	2b00      	cmp	r3, #0
 8004052:	da0c      	bge.n	800406e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 020f 	and.w	r2, r3, #15
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3310      	adds	r3, #16
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e00c      	b.n	8004088 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 020f 	and.w	r2, r3, #15
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	4618      	mov	r0, r3
 8004090:	f001 ff86 	bl	8005fa0 <USB_EPStopXfer>
 8004094:	4603      	mov	r3, r0
 8004096:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004098:	7afb      	ldrb	r3, [r7, #11]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b08a      	sub	sp, #40	@ 0x28
 80040a6:	af02      	add	r7, sp, #8
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	3310      	adds	r3, #16
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	3304      	adds	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d901      	bls.n	80040da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d902      	bls.n	80040f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3303      	adds	r3, #3
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040fe:	e02a      	b.n	8004156 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	429a      	cmp	r2, r3
 8004114:	d902      	bls.n	800411c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3303      	adds	r3, #3
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68d9      	ldr	r1, [r3, #12]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	4603      	mov	r3, r0
 8004138:	6978      	ldr	r0, [r7, #20]
 800413a:	f001 ffdb 	bl	80060f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	441a      	add	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d809      	bhi.n	8004180 <PCD_WriteEmptyTxFifo+0xde>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004174:	429a      	cmp	r2, r3
 8004176:	d203      	bcs.n	8004180 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1bf      	bne.n	8004100 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	d811      	bhi.n	80041b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	2201      	movs	r2, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	6939      	ldr	r1, [r7, #16]
 80041a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041ac:	4013      	ands	r3, r2
 80041ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	333c      	adds	r3, #60	@ 0x3c
 80041d4:	3304      	adds	r3, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	799b      	ldrb	r3, [r3, #6]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d17b      	bne.n	80042ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4a61      	ldr	r2, [pc, #388]	@ (8004384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	f240 80b9 	bls.w	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80b3 	beq.w	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	e0a7      	b.n	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423e:	461a      	mov	r2, r3
 8004240:	2320      	movs	r3, #32
 8004242:	6093      	str	r3, [r2, #8]
 8004244:	e098      	b.n	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	f040 8093 	bne.w	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4a4b      	ldr	r2, [pc, #300]	@ (8004384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d90f      	bls.n	800427a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004270:	461a      	mov	r2, r3
 8004272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004276:	6093      	str	r3, [r2, #8]
 8004278:	e07e      	b.n	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	0159      	lsls	r1, r3, #5
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	440b      	add	r3, r1
 800429c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d114      	bne.n	80042dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042c4:	461a      	mov	r2, r3
 80042c6:	2101      	movs	r1, #1
 80042c8:	f002 f9aa 	bl	8006620 <USB_EP0_OutStart>
 80042cc:	e006      	b.n	80042dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	441a      	add	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f004 fc70 	bl	8008bc8 <HAL_PCD_DataOutStageCallback>
 80042e8:	e046      	b.n	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4a26      	ldr	r2, [pc, #152]	@ (8004388 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d124      	bne.n	800433c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800430e:	6093      	str	r3, [r2, #8]
 8004310:	e032      	b.n	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	2320      	movs	r3, #32
 800432c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f004 fc47 	bl	8008bc8 <HAL_PCD_DataOutStageCallback>
 800433a:	e01d      	b.n	8004378 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d114      	bne.n	800436c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004364:	461a      	mov	r2, r3
 8004366:	2100      	movs	r1, #0
 8004368:	f002 f95a 	bl	8006620 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f004 fc28 	bl	8008bc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	4f54300a 	.word	0x4f54300a
 8004388:	4f54310a 	.word	0x4f54310a

0800438c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	333c      	adds	r3, #60	@ 0x3c
 80043a4:	3304      	adds	r3, #4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a15      	ldr	r2, [pc, #84]	@ (8004414 <PCD_EP_OutSetupPacket_int+0x88>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d90e      	bls.n	80043e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f004 fbdf 	bl	8008ba4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004414 <PCD_EP_OutSetupPacket_int+0x88>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d90c      	bls.n	8004408 <PCD_EP_OutSetupPacket_int+0x7c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	799b      	ldrb	r3, [r3, #6]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d108      	bne.n	8004408 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004400:	461a      	mov	r2, r3
 8004402:	2101      	movs	r1, #1
 8004404:	f002 f90c 	bl	8006620 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	4f54300a 	.word	0x4f54300a

08004418 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
 8004424:	4613      	mov	r3, r2
 8004426:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d107      	bne.n	8004446 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004436:	883b      	ldrh	r3, [r7, #0]
 8004438:	0419      	lsls	r1, r3, #16
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	430a      	orrs	r2, r1
 8004442:	629a      	str	r2, [r3, #40]	@ 0x28
 8004444:	e028      	b.n	8004498 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4413      	add	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e00d      	b.n	8004476 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	3340      	adds	r3, #64	@ 0x40
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	4413      	add	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	3301      	adds	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
 8004476:	7bfa      	ldrb	r2, [r7, #15]
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	3b01      	subs	r3, #1
 800447c:	429a      	cmp	r2, r3
 800447e:	d3ec      	bcc.n	800445a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004480:	883b      	ldrh	r3, [r7, #0]
 8004482:	0418      	lsls	r0, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	3b01      	subs	r3, #1
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4302      	orrs	r2, r0
 8004490:	3340      	adds	r3, #64	@ 0x40
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e267      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d075      	beq.n	80045ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044fe:	4b88      	ldr	r3, [pc, #544]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00c      	beq.n	8004524 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450a:	4b85      	ldr	r3, [pc, #532]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004512:	2b08      	cmp	r3, #8
 8004514:	d112      	bne.n	800453c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004516:	4b82      	ldr	r3, [pc, #520]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004522:	d10b      	bne.n	800453c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	4b7e      	ldr	r3, [pc, #504]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d05b      	beq.n	80045e8 <HAL_RCC_OscConfig+0x108>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d157      	bne.n	80045e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e242      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004544:	d106      	bne.n	8004554 <HAL_RCC_OscConfig+0x74>
 8004546:	4b76      	ldr	r3, [pc, #472]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a75      	ldr	r2, [pc, #468]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e01d      	b.n	8004590 <HAL_RCC_OscConfig+0xb0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0x98>
 800455e:	4b70      	ldr	r3, [pc, #448]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6f      	ldr	r2, [pc, #444]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4b6d      	ldr	r3, [pc, #436]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6c      	ldr	r2, [pc, #432]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0xb0>
 8004578:	4b69      	ldr	r3, [pc, #420]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a68      	ldr	r2, [pc, #416]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800457e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b66      	ldr	r3, [pc, #408]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a65      	ldr	r2, [pc, #404]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800458a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800458e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fd f930 	bl	80017fc <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fd f92c 	bl	80017fc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	@ 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e207      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0xc0>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fd f91c 	bl	80017fc <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fd f918 	bl	80017fc <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	@ 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e1f3      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	4b51      	ldr	r3, [pc, #324]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0xe8>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d063      	beq.n	80046be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b47      	ldr	r3, [pc, #284]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800460a:	2b08      	cmp	r3, #8
 800460c:	d11c      	bne.n	8004648 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460e:	4b44      	ldr	r3, [pc, #272]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d116      	bne.n	8004648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	4b41      	ldr	r3, [pc, #260]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_RCC_OscConfig+0x152>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e1c7      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4937      	ldr	r1, [pc, #220]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	e03a      	b.n	80046be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004650:	4b34      	ldr	r3, [pc, #208]	@ (8004724 <HAL_RCC_OscConfig+0x244>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fd f8d1 	bl	80017fc <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465e:	f7fd f8cd 	bl	80017fc <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e1a8      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004670:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b28      	ldr	r3, [pc, #160]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4925      	ldr	r1, [pc, #148]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
 8004690:	e015      	b.n	80046be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004692:	4b24      	ldr	r3, [pc, #144]	@ (8004724 <HAL_RCC_OscConfig+0x244>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd f8b0 	bl	80017fc <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a0:	f7fd f8ac 	bl	80017fc <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e187      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d036      	beq.n	8004738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <HAL_RCC_OscConfig+0x248>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fd f890 	bl	80017fc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fd f88c 	bl	80017fc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e167      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x200>
 80046fe:	e01b      	b.n	8004738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004700:	4b09      	ldr	r3, [pc, #36]	@ (8004728 <HAL_RCC_OscConfig+0x248>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fd f879 	bl	80017fc <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	e00e      	b.n	800472c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470e:	f7fd f875 	bl	80017fc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d907      	bls.n	800472c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e150      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
 8004720:	40023800 	.word	0x40023800
 8004724:	42470000 	.word	0x42470000
 8004728:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472c:	4b88      	ldr	r3, [pc, #544]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800472e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ea      	bne.n	800470e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8097 	beq.w	8004874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004746:	2300      	movs	r3, #0
 8004748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474a:	4b81      	ldr	r3, [pc, #516]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	4b7d      	ldr	r3, [pc, #500]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	4a7c      	ldr	r2, [pc, #496]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004764:	6413      	str	r3, [r2, #64]	@ 0x40
 8004766:	4b7a      	ldr	r3, [pc, #488]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004776:	4b77      	ldr	r3, [pc, #476]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d118      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004782:	4b74      	ldr	r3, [pc, #464]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a73      	ldr	r2, [pc, #460]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478e:	f7fd f835 	bl	80017fc <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004796:	f7fd f831 	bl	80017fc <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e10c      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_OscConfig+0x2ea>
 80047bc:	4b64      	ldr	r3, [pc, #400]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c0:	4a63      	ldr	r2, [pc, #396]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c8:	e01c      	b.n	8004804 <HAL_RCC_OscConfig+0x324>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0x30c>
 80047d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047de:	4b5c      	ldr	r3, [pc, #368]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ea:	e00b      	b.n	8004804 <HAL_RCC_OscConfig+0x324>
 80047ec:	4b58      	ldr	r3, [pc, #352]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	4a57      	ldr	r2, [pc, #348]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f8:	4b55      	ldr	r3, [pc, #340]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fc:	4a54      	ldr	r2, [pc, #336]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047fe:	f023 0304 	bic.w	r3, r3, #4
 8004802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fc fff6 	bl	80017fc <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fc fff2 	bl	80017fc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0cb      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	4b49      	ldr	r3, [pc, #292]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ee      	beq.n	8004814 <HAL_RCC_OscConfig+0x334>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004838:	f7fc ffe0 	bl	80017fc <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483e:	e00a      	b.n	8004856 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fc ffdc 	bl	80017fc <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e0b5      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004856:	4b3e      	ldr	r3, [pc, #248]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1ee      	bne.n	8004840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d105      	bne.n	8004874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004868:	4b39      	ldr	r3, [pc, #228]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	4a38      	ldr	r2, [pc, #224]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800486e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a1 	beq.w	80049c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800487e:	4b34      	ldr	r3, [pc, #208]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b08      	cmp	r3, #8
 8004888:	d05c      	beq.n	8004944 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d141      	bne.n	8004916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <HAL_RCC_OscConfig+0x478>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fc ffb0 	bl	80017fc <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fc ffac 	bl	80017fc <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e087      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	019b      	lsls	r3, r3, #6
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	3b01      	subs	r3, #1
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	491b      	ldr	r1, [pc, #108]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x478>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fc ff85 	bl	80017fc <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fc ff81 	bl	80017fc <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e05c      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004908:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x416>
 8004914:	e054      	b.n	80049c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b10      	ldr	r3, [pc, #64]	@ (8004958 <HAL_RCC_OscConfig+0x478>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fc ff6e 	bl	80017fc <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fc ff6a 	bl	80017fc <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e045      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x444>
 8004942:	e03d      	b.n	80049c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e038      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
 8004950:	40023800 	.word	0x40023800
 8004954:	40007000 	.word	0x40007000
 8004958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800495c:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <HAL_RCC_OscConfig+0x4ec>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d028      	beq.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d121      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d11a      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004994:	4293      	cmp	r3, r2
 8004996:	d111      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	3b01      	subs	r3, #1
 80049a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800

080049d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0cc      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b68      	ldr	r3, [pc, #416]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d90c      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b65      	ldr	r3, [pc, #404]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b63      	ldr	r3, [pc, #396]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0b8      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b59      	ldr	r3, [pc, #356]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a58      	ldr	r2, [pc, #352]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a3c:	4b53      	ldr	r3, [pc, #332]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a52      	ldr	r2, [pc, #328]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b50      	ldr	r3, [pc, #320]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	494d      	ldr	r1, [pc, #308]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d044      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b47      	ldr	r3, [pc, #284]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d119      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e06f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e067      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b37      	ldr	r3, [pc, #220]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4934      	ldr	r1, [pc, #208]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fc fe9c 	bl	80017fc <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fc fe98 	bl	80017fc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e04f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b2b      	ldr	r3, [pc, #172]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b25      	ldr	r3, [pc, #148]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d20c      	bcs.n	8004b18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b22      	ldr	r3, [pc, #136]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e032      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b24:	4b19      	ldr	r3, [pc, #100]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4916      	ldr	r1, [pc, #88]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b42:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	490e      	ldr	r1, [pc, #56]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b56:	f000 f821 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	490a      	ldr	r1, [pc, #40]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	5ccb      	ldrb	r3, [r1, r3]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a09      	ldr	r2, [pc, #36]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b72:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc fdfc 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023c00 	.word	0x40023c00
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800ba80 	.word	0x0800ba80
 8004b94:	20000000 	.word	0x20000000
 8004b98:	20000004 	.word	0x20000004

08004b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba0:	b094      	sub	sp, #80	@ 0x50
 8004ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb4:	4b79      	ldr	r3, [pc, #484]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d00d      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x40>
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	f200 80e1 	bhi.w	8004d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bce:	e0db      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b73      	ldr	r3, [pc, #460]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd4:	e0db      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bd6:	4b73      	ldr	r3, [pc, #460]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bda:	e0d8      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d063      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c06:	2300      	movs	r3, #0
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c0e:	4622      	mov	r2, r4
 8004c10:	462b      	mov	r3, r5
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	0159      	lsls	r1, r3, #5
 8004c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c20:	0150      	lsls	r0, r2, #5
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4621      	mov	r1, r4
 8004c28:	1a51      	subs	r1, r2, r1
 8004c2a:	6139      	str	r1, [r7, #16]
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c40:	4659      	mov	r1, fp
 8004c42:	018b      	lsls	r3, r1, #6
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	018a      	lsls	r2, r1, #6
 8004c4e:	4651      	mov	r1, sl
 8004c50:	ebb2 0801 	subs.w	r8, r2, r1
 8004c54:	4659      	mov	r1, fp
 8004c56:	eb63 0901 	sbc.w	r9, r3, r1
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6e:	4690      	mov	r8, r2
 8004c70:	4699      	mov	r9, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	eb18 0303 	adds.w	r3, r8, r3
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	eb49 0303 	adc.w	r3, r9, r3
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c8e:	4629      	mov	r1, r5
 8004c90:	024b      	lsls	r3, r1, #9
 8004c92:	4621      	mov	r1, r4
 8004c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c98:	4621      	mov	r1, r4
 8004c9a:	024a      	lsls	r2, r1, #9
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cac:	f7fb ff7c 	bl	8000ba8 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb8:	e058      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cba:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	0159      	lsls	r1, r3, #5
 8004ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce6:	0150      	lsls	r0, r2, #5
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4641      	mov	r1, r8
 8004cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d10:	eb63 050b 	sbc.w	r5, r3, fp
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	00eb      	lsls	r3, r5, #3
 8004d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d22:	00e2      	lsls	r2, r4, #3
 8004d24:	4614      	mov	r4, r2
 8004d26:	461d      	mov	r5, r3
 8004d28:	4643      	mov	r3, r8
 8004d2a:	18e3      	adds	r3, r4, r3
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	464b      	mov	r3, r9
 8004d30:	eb45 0303 	adc.w	r3, r5, r3
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d42:	4629      	mov	r1, r5
 8004d44:	028b      	lsls	r3, r1, #10
 8004d46:	4621      	mov	r1, r4
 8004d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	028a      	lsls	r2, r1, #10
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	2200      	movs	r2, #0
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	61fa      	str	r2, [r7, #28]
 8004d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d60:	f7fb ff22 	bl	8000ba8 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3750      	adds	r7, #80	@ 0x50
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	007a1200 	.word	0x007a1200

08004da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000000 	.word	0x20000000

08004dc0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e041      	b.n	8004e58 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fc fb3b 	bl	8001464 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 f82d 	bl	8004e60 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0208 	bic.w	r2, r2, #8
 8004e14:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6819      	ldr	r1, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a46      	ldr	r2, [pc, #280]	@ (8004f8c <TIM_Base_SetConfig+0x12c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d00f      	beq.n	8004ea0 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a43      	ldr	r2, [pc, #268]	@ (8004f90 <TIM_Base_SetConfig+0x130>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a42      	ldr	r2, [pc, #264]	@ (8004f94 <TIM_Base_SetConfig+0x134>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d007      	beq.n	8004ea0 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a41      	ldr	r2, [pc, #260]	@ (8004f98 <TIM_Base_SetConfig+0x138>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	@ (8004f9c <TIM_Base_SetConfig+0x13c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d108      	bne.n	8004eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a35      	ldr	r2, [pc, #212]	@ (8004f8c <TIM_Base_SetConfig+0x12c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d02b      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec0:	d027      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a32      	ldr	r2, [pc, #200]	@ (8004f90 <TIM_Base_SetConfig+0x130>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d023      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a31      	ldr	r2, [pc, #196]	@ (8004f94 <TIM_Base_SetConfig+0x134>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01f      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a30      	ldr	r2, [pc, #192]	@ (8004f98 <TIM_Base_SetConfig+0x138>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01b      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f9c <TIM_Base_SetConfig+0x13c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d017      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa0 <TIM_Base_SetConfig+0x140>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <TIM_Base_SetConfig+0x144>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00f      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <TIM_Base_SetConfig+0x148>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2b      	ldr	r2, [pc, #172]	@ (8004fac <TIM_Base_SetConfig+0x14c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb0 <TIM_Base_SetConfig+0x150>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <TIM_Base_SetConfig+0x154>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d108      	bne.n	8004f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a10      	ldr	r2, [pc, #64]	@ (8004f8c <TIM_Base_SetConfig+0x12c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0xf8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a12      	ldr	r2, [pc, #72]	@ (8004f9c <TIM_Base_SetConfig+0x13c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d103      	bne.n	8004f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	611a      	str	r2, [r3, #16]
  }
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	40001800 	.word	0x40001800
 8004fb0:	40001c00 	.word	0x40001c00
 8004fb4:	40002000 	.word	0x40002000

08004fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e05a      	b.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a21      	ldr	r2, [pc, #132]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d01d      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1b      	ldr	r2, [pc, #108]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1a      	ldr	r2, [pc, #104]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a17      	ldr	r2, [pc, #92]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d10c      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40001800 	.word	0x40001800

080050b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b0:	b084      	sub	sp, #16
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	f107 001c 	add.w	r0, r7, #28
 80050be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d123      	bne.n	8005112 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80050de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 fae8 	bl	80066dc <USB_CoreReset>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
 8005110:	e01b      	b.n	800514a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 fadc 	bl	80066dc <USB_CoreReset>
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005128:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	@ 0x38
 800513c:	e005      	b.n	800514a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800514a:	7fbb      	ldrb	r3, [r7, #30]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10b      	bne.n	8005168 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f043 0206 	orr.w	r2, r3, #6
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005174:	b004      	add	sp, #16
 8005176:	4770      	bx	lr

08005178 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d165      	bne.n	8005258 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a41      	ldr	r2, [pc, #260]	@ (8005294 <USB_SetTurnaroundTime+0x11c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d906      	bls.n	80051a2 <USB_SetTurnaroundTime+0x2a>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a40      	ldr	r2, [pc, #256]	@ (8005298 <USB_SetTurnaroundTime+0x120>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d202      	bcs.n	80051a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800519c:	230f      	movs	r3, #15
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e062      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005298 <USB_SetTurnaroundTime+0x120>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d306      	bcc.n	80051b8 <USB_SetTurnaroundTime+0x40>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a3b      	ldr	r2, [pc, #236]	@ (800529c <USB_SetTurnaroundTime+0x124>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d202      	bcs.n	80051b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051b2:	230e      	movs	r3, #14
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e057      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a38      	ldr	r2, [pc, #224]	@ (800529c <USB_SetTurnaroundTime+0x124>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d306      	bcc.n	80051ce <USB_SetTurnaroundTime+0x56>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a37      	ldr	r2, [pc, #220]	@ (80052a0 <USB_SetTurnaroundTime+0x128>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d202      	bcs.n	80051ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051c8:	230d      	movs	r3, #13
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e04c      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a33      	ldr	r2, [pc, #204]	@ (80052a0 <USB_SetTurnaroundTime+0x128>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d306      	bcc.n	80051e4 <USB_SetTurnaroundTime+0x6c>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a32      	ldr	r2, [pc, #200]	@ (80052a4 <USB_SetTurnaroundTime+0x12c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051de:	230c      	movs	r3, #12
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e041      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a2f      	ldr	r2, [pc, #188]	@ (80052a4 <USB_SetTurnaroundTime+0x12c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d906      	bls.n	80051fa <USB_SetTurnaroundTime+0x82>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a2e      	ldr	r2, [pc, #184]	@ (80052a8 <USB_SetTurnaroundTime+0x130>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d802      	bhi.n	80051fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051f4:	230b      	movs	r3, #11
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e036      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a2a      	ldr	r2, [pc, #168]	@ (80052a8 <USB_SetTurnaroundTime+0x130>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d906      	bls.n	8005210 <USB_SetTurnaroundTime+0x98>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a29      	ldr	r2, [pc, #164]	@ (80052ac <USB_SetTurnaroundTime+0x134>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d802      	bhi.n	8005210 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800520a:	230a      	movs	r3, #10
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e02b      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a26      	ldr	r2, [pc, #152]	@ (80052ac <USB_SetTurnaroundTime+0x134>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d906      	bls.n	8005226 <USB_SetTurnaroundTime+0xae>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a25      	ldr	r2, [pc, #148]	@ (80052b0 <USB_SetTurnaroundTime+0x138>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d202      	bcs.n	8005226 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005220:	2309      	movs	r3, #9
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e020      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4a21      	ldr	r2, [pc, #132]	@ (80052b0 <USB_SetTurnaroundTime+0x138>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d306      	bcc.n	800523c <USB_SetTurnaroundTime+0xc4>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a20      	ldr	r2, [pc, #128]	@ (80052b4 <USB_SetTurnaroundTime+0x13c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d802      	bhi.n	800523c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005236:	2308      	movs	r3, #8
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e015      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <USB_SetTurnaroundTime+0x13c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d906      	bls.n	8005252 <USB_SetTurnaroundTime+0xda>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <USB_SetTurnaroundTime+0x140>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d202      	bcs.n	8005252 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800524c:	2307      	movs	r3, #7
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e00a      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005252:	2306      	movs	r3, #6
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e007      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800525e:	2309      	movs	r3, #9
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e001      	b.n	8005268 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005264:	2309      	movs	r3, #9
 8005266:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	029b      	lsls	r3, r3, #10
 800527c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005280:	431a      	orrs	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	00d8acbf 	.word	0x00d8acbf
 8005298:	00e4e1c0 	.word	0x00e4e1c0
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	01067380 	.word	0x01067380
 80052a4:	011a499f 	.word	0x011a499f
 80052a8:	01312cff 	.word	0x01312cff
 80052ac:	014ca43f 	.word	0x014ca43f
 80052b0:	016e3600 	.word	0x016e3600
 80052b4:	01a6ab1f 	.word	0x01a6ab1f
 80052b8:	01e84800 	.word	0x01e84800

080052bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f043 0201 	orr.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d115      	bne.n	800534e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800532e:	200a      	movs	r0, #10
 8005330:	f7fc fa70 	bl	8001814 <HAL_Delay>
      ms += 10U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	330a      	adds	r3, #10
 8005338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 f93f 	bl	80065be <USB_GetMode>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d01e      	beq.n	8005384 <USB_SetCurrentMode+0x84>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2bc7      	cmp	r3, #199	@ 0xc7
 800534a:	d9f0      	bls.n	800532e <USB_SetCurrentMode+0x2e>
 800534c:	e01a      	b.n	8005384 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d115      	bne.n	8005380 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005360:	200a      	movs	r0, #10
 8005362:	f7fc fa57 	bl	8001814 <HAL_Delay>
      ms += 10U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	330a      	adds	r3, #10
 800536a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 f926 	bl	80065be <USB_GetMode>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <USB_SetCurrentMode+0x84>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2bc7      	cmp	r3, #199	@ 0xc7
 800537c:	d9f0      	bls.n	8005360 <USB_SetCurrentMode+0x60>
 800537e:	e001      	b.n	8005384 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e005      	b.n	8005390 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2bc8      	cmp	r3, #200	@ 0xc8
 8005388:	d101      	bne.n	800538e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005398:	b084      	sub	sp, #16
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	e009      	b.n	80053cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3340      	adds	r3, #64	@ 0x40
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	2200      	movs	r2, #0
 80053c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	3301      	adds	r3, #1
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b0e      	cmp	r3, #14
 80053d0:	d9f2      	bls.n	80053b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11c      	bne.n	8005414 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053e8:	f043 0302 	orr.w	r3, r3, #2
 80053ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	@ 0x38
 8005412:	e00b      	b.n	800542c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005432:	461a      	mov	r2, r3
 8005434:	2300      	movs	r3, #0
 8005436:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005438:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800543c:	2b01      	cmp	r3, #1
 800543e:	d10d      	bne.n	800545c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005448:	2100      	movs	r1, #0
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f968 	bl	8005720 <USB_SetDevSpeed>
 8005450:	e008      	b.n	8005464 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005452:	2101      	movs	r1, #1
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f963 	bl	8005720 <USB_SetDevSpeed>
 800545a:	e003      	b.n	8005464 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800545c:	2103      	movs	r1, #3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f95e 	bl	8005720 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005464:	2110      	movs	r1, #16
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8fa 	bl	8005660 <USB_FlushTxFifo>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f924 	bl	80056c4 <USB_FlushRxFifo>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548c:	461a      	mov	r2, r3
 800548e:	2300      	movs	r3, #0
 8005490:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005498:	461a      	mov	r2, r3
 800549a:	2300      	movs	r3, #0
 800549c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a4:	461a      	mov	r2, r3
 80054a6:	2300      	movs	r3, #0
 80054a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	e043      	b.n	8005538 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054c6:	d118      	bne.n	80054fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054da:	461a      	mov	r2, r3
 80054dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e013      	b.n	800550c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e008      	b.n	800550c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552a:	461a      	mov	r2, r3
 800552c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005530:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3301      	adds	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800553c:	461a      	mov	r2, r3
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4293      	cmp	r3, r2
 8005542:	d3b5      	bcc.n	80054b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	e043      	b.n	80055d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800555c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005560:	d118      	bne.n	8005594 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e013      	b.n	80055a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e008      	b.n	80055a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	2300      	movs	r3, #0
 80055a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b2:	461a      	mov	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c4:	461a      	mov	r2, r3
 80055c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3301      	adds	r3, #1
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055d6:	461a      	mov	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4293      	cmp	r3, r2
 80055dc:	d3b5      	bcc.n	800554a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80055fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f043 0210 	orr.w	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	4b10      	ldr	r3, [pc, #64]	@ (800565c <USB_DevInit+0x2c4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005620:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f043 0208 	orr.w	r2, r3, #8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005634:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005638:	2b01      	cmp	r3, #1
 800563a:	d107      	bne.n	800564c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005658:	b004      	add	sp, #16
 800565a:	4770      	bx	lr
 800565c:	803c3800 	.word	0x803c3800

08005660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800567a:	d901      	bls.n	8005680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e01b      	b.n	80056b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	daf2      	bge.n	800566e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	019b      	lsls	r3, r3, #6
 8005690:	f043 0220 	orr.w	r2, r3, #32
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056a4:	d901      	bls.n	80056aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e006      	b.n	80056b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d0f0      	beq.n	8005698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056dc:	d901      	bls.n	80056e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e018      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf2      	bge.n	80056d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005700:	d901      	bls.n	8005706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d0f0      	beq.n	80056f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b087      	sub	sp, #28
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0306 	and.w	r3, r3, #6
 800576a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]
 8005776:	e00a      	b.n	800578e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d002      	beq.n	8005784 <USB_GetDevSpeed+0x32>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b06      	cmp	r3, #6
 8005782:	d102      	bne.n	800578a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005784:	2302      	movs	r3, #2
 8005786:	75fb      	strb	r3, [r7, #23]
 8005788:	e001      	b.n	800578e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800578a:	230f      	movs	r3, #15
 800578c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d13a      	bne.n	800582e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	68f9      	ldr	r1, [r7, #12]
 80057d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d155      	bne.n	800589c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	791b      	ldrb	r3, [r3, #4]
 800580a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800580c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	059b      	lsls	r3, r3, #22
 8005812:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005814:	4313      	orrs	r3, r2
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e036      	b.n	800589c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005834:	69da      	ldr	r2, [r3, #28]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	2101      	movs	r1, #1
 8005840:	fa01 f303 	lsl.w	r3, r1, r3
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800584c:	4313      	orrs	r3, r2
 800584e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11a      	bne.n	800589c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	791b      	ldrb	r3, [r3, #4]
 8005880:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005882:	430b      	orrs	r3, r1
 8005884:	4313      	orrs	r3, r2
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800589a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d161      	bne.n	800598c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058de:	d11f      	bne.n	8005920 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800591a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800591e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	2101      	movs	r1, #1
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	b29b      	uxth	r3, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005940:	4013      	ands	r3, r2
 8005942:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	b29b      	uxth	r3, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005964:	4013      	ands	r3, r2
 8005966:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	0159      	lsls	r1, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	440b      	add	r3, r1
 800597e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005982:	4619      	mov	r1, r3
 8005984:	4b35      	ldr	r3, [pc, #212]	@ (8005a5c <USB_DeactivateEndpoint+0x1b0>)
 8005986:	4013      	ands	r3, r2
 8005988:	600b      	str	r3, [r1, #0]
 800598a:	e060      	b.n	8005a4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800599e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a2:	d11f      	bne.n	80059e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	2101      	movs	r1, #1
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	43db      	mvns	r3, r3
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a04:	4013      	ands	r3, r2
 8005a06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	2101      	movs	r1, #1
 8005a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	43db      	mvns	r3, r3
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	0159      	lsls	r1, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	440b      	add	r3, r1
 8005a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a46:	4619      	mov	r1, r3
 8005a48:	4b05      	ldr	r3, [pc, #20]	@ (8005a60 <USB_DeactivateEndpoint+0x1b4>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	ec337800 	.word	0xec337800
 8005a60:	eff37800 	.word	0xeff37800

08005a64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	@ 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f040 817f 	bne.w	8005d84 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d132      	bne.n	8005af4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005aac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005acc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aec:	0cdb      	lsrs	r3, r3, #19
 8005aee:	04db      	lsls	r3, r3, #19
 8005af0:	6113      	str	r3, [r2, #16]
 8005af2:	e097      	b.n	8005c24 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b0e:	0cdb      	lsrs	r3, r3, #19
 8005b10:	04db      	lsls	r3, r3, #19
 8005b12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b36:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d11a      	bne.n	8005b74 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d903      	bls.n	8005b52 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b70:	6113      	str	r3, [r2, #16]
 8005b72:	e044      	b.n	8005bfe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	1e5a      	subs	r2, r3, #1
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	8afb      	ldrh	r3, [r7, #22]
 8005b9a:	04d9      	lsls	r1, r3, #19
 8005b9c:	4ba4      	ldr	r3, [pc, #656]	@ (8005e30 <USB_EPStartXfer+0x3cc>)
 8005b9e:	400b      	ands	r3, r1
 8005ba0:	69b9      	ldr	r1, [r7, #24]
 8005ba2:	0148      	lsls	r0, r1, #5
 8005ba4:	69f9      	ldr	r1, [r7, #28]
 8005ba6:	4401      	add	r1, r0
 8005ba8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bac:	4313      	orrs	r3, r2
 8005bae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	791b      	ldrb	r3, [r3, #4]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d122      	bne.n	8005bfe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005bd6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	8afb      	ldrh	r3, [r7, #22]
 8005be8:	075b      	lsls	r3, r3, #29
 8005bea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005bee:	69b9      	ldr	r1, [r7, #24]
 8005bf0:	0148      	lsls	r0, r1, #5
 8005bf2:	69f9      	ldr	r1, [r7, #28]
 8005bf4:	4401      	add	r1, r0
 8005bf6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c14:	69b9      	ldr	r1, [r7, #24]
 8005c16:	0148      	lsls	r0, r1, #5
 8005c18:	69f9      	ldr	r1, [r7, #28]
 8005c1a:	4401      	add	r1, r0
 8005c1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c20:	4313      	orrs	r3, r2
 8005c22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d14b      	bne.n	8005cc2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	791b      	ldrb	r3, [r3, #4]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d128      	bne.n	8005ca0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d110      	bne.n	8005c80 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e00f      	b.n	8005ca0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	e166      	b.n	8005f90 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cdc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ce0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	791b      	ldrb	r3, [r3, #4]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d015      	beq.n	8005d16 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 814e 	beq.w	8005f90 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	2101      	movs	r1, #1
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	69f9      	ldr	r1, [r7, #28]
 8005d0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d10:	4313      	orrs	r3, r2
 8005d12:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d14:	e13c      	b.n	8005f90 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d110      	bne.n	8005d48 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00f      	b.n	8005d68 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d66:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68d9      	ldr	r1, [r3, #12]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	b298      	uxth	r0, r3
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f9b9 	bl	80060f4 <USB_WritePacket>
 8005d82:	e105      	b.n	8005f90 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d9e:	0cdb      	lsrs	r3, r3, #19
 8005da0:	04db      	lsls	r3, r3, #19
 8005da2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dbe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dc2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dc6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d132      	bne.n	8005e34 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	0148      	lsls	r0, r1, #5
 8005e00:	69f9      	ldr	r1, [r7, #28]
 8005e02:	4401      	add	r1, r0
 8005e04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e2a:	6113      	str	r3, [r2, #16]
 8005e2c:	e062      	b.n	8005ef4 <USB_EPStartXfer+0x490>
 8005e2e:	bf00      	nop
 8005e30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d123      	bne.n	8005e84 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	0148      	lsls	r0, r1, #5
 8005e56:	69f9      	ldr	r1, [r7, #28]
 8005e58:	4401      	add	r1, r0
 8005e5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e80:	6113      	str	r3, [r2, #16]
 8005e82:	e037      	b.n	8005ef4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	8afa      	ldrh	r2, [r7, #22]
 8005ea0:	fb03 f202 	mul.w	r2, r3, r2
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	8afb      	ldrh	r3, [r7, #22]
 8005eb8:	04d9      	lsls	r1, r3, #19
 8005eba:	4b38      	ldr	r3, [pc, #224]	@ (8005f9c <USB_EPStartXfer+0x538>)
 8005ebc:	400b      	ands	r3, r1
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	0148      	lsls	r0, r1, #5
 8005ec2:	69f9      	ldr	r1, [r7, #28]
 8005ec4:	4401      	add	r1, r0
 8005ec6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee4:	69b9      	ldr	r1, [r7, #24]
 8005ee6:	0148      	lsls	r0, r1, #5
 8005ee8:	69f9      	ldr	r1, [r7, #28]
 8005eea:	4401      	add	r1, r0
 8005eec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10d      	bne.n	8005f16 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	68d9      	ldr	r1, [r3, #12]
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	460a      	mov	r2, r1
 8005f14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	791b      	ldrb	r3, [r3, #4]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d128      	bne.n	8005f70 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d110      	bne.n	8005f50 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	e00f      	b.n	8005f70 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	1ff80000 	.word	0x1ff80000

08005fa0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d14a      	bne.n	8006054 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fd6:	f040 8086 	bne.w	80060e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	7812      	ldrb	r2, [r2, #0]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ffc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	7812      	ldrb	r2, [r2, #0]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800601c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006020:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3301      	adds	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800602e:	4293      	cmp	r3, r2
 8006030:	d902      	bls.n	8006038 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
          break;
 8006036:	e056      	b.n	80060e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800604c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006050:	d0e7      	beq.n	8006022 <USB_EPStopXfer+0x82>
 8006052:	e048      	b.n	80060e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006068:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800606c:	d13b      	bne.n	80060e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800608c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006090:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	7812      	ldrb	r2, [r2, #0]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d902      	bls.n	80060cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
          break;
 80060ca:	e00c      	b.n	80060e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060e4:	d0e7      	beq.n	80060b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b089      	sub	sp, #36	@ 0x24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4611      	mov	r1, r2
 8006100:	461a      	mov	r2, r3
 8006102:	460b      	mov	r3, r1
 8006104:	71fb      	strb	r3, [r7, #7]
 8006106:	4613      	mov	r3, r2
 8006108:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006112:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d123      	bne.n	8006162 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800611a:	88bb      	ldrh	r3, [r7, #4]
 800611c:	3303      	adds	r3, #3
 800611e:	089b      	lsrs	r3, r3, #2
 8006120:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e018      	b.n	800615a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	031a      	lsls	r2, r3, #12
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4413      	add	r3, r2
 8006130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006134:	461a      	mov	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3301      	adds	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	3301      	adds	r3, #1
 8006146:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3301      	adds	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	3301      	adds	r3, #1
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	429a      	cmp	r2, r3
 8006160:	d3e2      	bcc.n	8006128 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3724      	adds	r7, #36	@ 0x24
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006170:	b480      	push	{r7}
 8006172:	b08b      	sub	sp, #44	@ 0x2c
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	4613      	mov	r3, r2
 800617c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	089b      	lsrs	r3, r3, #2
 800618a:	b29b      	uxth	r3, r3
 800618c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006196:	2300      	movs	r3, #0
 8006198:	623b      	str	r3, [r7, #32]
 800619a:	e014      	b.n	80061c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	3301      	adds	r3, #1
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	3301      	adds	r3, #1
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	3301      	adds	r3, #1
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	3301      	adds	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	3301      	adds	r3, #1
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d3e6      	bcc.n	800619c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061ce:	8bfb      	ldrh	r3, [r7, #30]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01e      	beq.n	8006212 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061de:	461a      	mov	r2, r3
 80061e0:	f107 0310 	add.w	r3, r7, #16
 80061e4:	6812      	ldr	r2, [r2, #0]
 80061e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	701a      	strb	r2, [r3, #0]
      i++;
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	3301      	adds	r3, #1
 80061fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	3301      	adds	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006206:	8bfb      	ldrh	r3, [r7, #30]
 8006208:	3b01      	subs	r3, #1
 800620a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800620c:	8bfb      	ldrh	r3, [r7, #30]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1ea      	bne.n	80061e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006214:	4618      	mov	r0, r3
 8006216:	372c      	adds	r7, #44	@ 0x2c
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d12c      	bne.n	8006296 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	db12      	blt.n	8006274 <USB_EPSetStall+0x54>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00f      	beq.n	8006274 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800626e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006272:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e02b      	b.n	80062ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	db12      	blt.n	80062ce <USB_EPSetStall+0xae>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00f      	beq.n	80062ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d128      	bne.n	800636a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006332:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006336:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d003      	beq.n	8006348 <USB_EPClearStall+0x4c>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	791b      	ldrb	r3, [r3, #4]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d138      	bne.n	80063ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e027      	b.n	80063ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006384:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006388:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d003      	beq.n	800639a <USB_EPClearStall+0x9e>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	791b      	ldrb	r3, [r3, #4]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d10f      	bne.n	80063ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80063ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80063fc:	68f9      	ldr	r1, [r7, #12]
 80063fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006402:	4313      	orrs	r3, r2
 8006404:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800642e:	f023 0303 	bic.w	r3, r3, #3
 8006432:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006442:	f023 0302 	bic.w	r3, r3, #2
 8006446:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006470:	f023 0303 	bic.w	r3, r3, #3
 8006474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006484:	f043 0302 	orr.w	r3, r3, #2
 8006488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4013      	ands	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	0c1b      	lsrs	r3, r3, #16
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	4013      	ands	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	b29b      	uxth	r3, r3
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	4013      	ands	r3, r2
 8006552:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006554:	68bb      	ldr	r3, [r7, #8]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006562:	b480      	push	{r7}
 8006564:	b087      	sub	sp, #28
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006584:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	01db      	lsls	r3, r3, #7
 8006594:	b2db      	uxtb	r3, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4013      	ands	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065b0:	68bb      	ldr	r3, [r7, #8]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0301 	and.w	r3, r3, #1
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065f8:	f023 0307 	bic.w	r3, r3, #7
 80065fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800660c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006610:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	460b      	mov	r3, r1
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	333c      	adds	r3, #60	@ 0x3c
 8006636:	3304      	adds	r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4a26      	ldr	r2, [pc, #152]	@ (80066d8 <USB_EP0_OutStart+0xb8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d90a      	bls.n	800665a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006654:	d101      	bne.n	800665a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	e037      	b.n	80066ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006660:	461a      	mov	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006674:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006688:	f043 0318 	orr.w	r3, r3, #24
 800668c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800669c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80066a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d10f      	bne.n	80066c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80066c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	4f54300a 	.word	0x4f54300a

080066dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066f4:	d901      	bls.n	80066fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e01b      	b.n	8006732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	daf2      	bge.n	80066e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800671e:	d901      	bls.n	8006724 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e006      	b.n	8006732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d0f0      	beq.n	8006712 <USB_CoreReset+0x36>

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800674c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006750:	f002 fca4 	bl	800909c <USBD_static_malloc>
 8006754:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32b0      	adds	r2, #176	@ 0xb0
 8006766:	2100      	movs	r1, #0
 8006768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800676c:	2302      	movs	r3, #2
 800676e:	e0d4      	b.n	800691a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006770:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006774:	2100      	movs	r1, #0
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f003 fa31 	bl	8009bde <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	32b0      	adds	r2, #176	@ 0xb0
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	32b0      	adds	r2, #176	@ 0xb0
 8006796:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7c1b      	ldrb	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d138      	bne.n	800681a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80067a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006924 <USBD_CDC_Init+0x1e4>)
 80067aa:	7819      	ldrb	r1, [r3, #0]
 80067ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067b0:	2202      	movs	r2, #2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 fb4f 	bl	8008e56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80067b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006924 <USBD_CDC_Init+0x1e4>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 020f 	and.w	r2, r3, #15
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3324      	adds	r3, #36	@ 0x24
 80067ce:	2201      	movs	r2, #1
 80067d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067d2:	4b55      	ldr	r3, [pc, #340]	@ (8006928 <USBD_CDC_Init+0x1e8>)
 80067d4:	7819      	ldrb	r1, [r3, #0]
 80067d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067da:	2202      	movs	r2, #2
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f002 fb3a 	bl	8008e56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067e2:	4b51      	ldr	r3, [pc, #324]	@ (8006928 <USBD_CDC_Init+0x1e8>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f003 020f 	and.w	r2, r3, #15
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067fa:	2201      	movs	r2, #1
 80067fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80067fe:	4b4b      	ldr	r3, [pc, #300]	@ (800692c <USBD_CDC_Init+0x1ec>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	f003 020f 	and.w	r2, r3, #15
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	3326      	adds	r3, #38	@ 0x26
 8006814:	2210      	movs	r2, #16
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e035      	b.n	8006886 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800681a:	4b42      	ldr	r3, [pc, #264]	@ (8006924 <USBD_CDC_Init+0x1e4>)
 800681c:	7819      	ldrb	r1, [r3, #0]
 800681e:	2340      	movs	r3, #64	@ 0x40
 8006820:	2202      	movs	r2, #2
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f002 fb17 	bl	8008e56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006828:	4b3e      	ldr	r3, [pc, #248]	@ (8006924 <USBD_CDC_Init+0x1e4>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	3324      	adds	r3, #36	@ 0x24
 800683e:	2201      	movs	r2, #1
 8006840:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006842:	4b39      	ldr	r3, [pc, #228]	@ (8006928 <USBD_CDC_Init+0x1e8>)
 8006844:	7819      	ldrb	r1, [r3, #0]
 8006846:	2340      	movs	r3, #64	@ 0x40
 8006848:	2202      	movs	r2, #2
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f002 fb03 	bl	8008e56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006850:	4b35      	ldr	r3, [pc, #212]	@ (8006928 <USBD_CDC_Init+0x1e8>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 020f 	and.w	r2, r3, #15
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006868:	2201      	movs	r2, #1
 800686a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800686c:	4b2f      	ldr	r3, [pc, #188]	@ (800692c <USBD_CDC_Init+0x1ec>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3326      	adds	r3, #38	@ 0x26
 8006882:	2210      	movs	r2, #16
 8006884:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006886:	4b29      	ldr	r3, [pc, #164]	@ (800692c <USBD_CDC_Init+0x1ec>)
 8006888:	7819      	ldrb	r1, [r3, #0]
 800688a:	2308      	movs	r3, #8
 800688c:	2203      	movs	r2, #3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 fae1 	bl	8008e56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006894:	4b25      	ldr	r3, [pc, #148]	@ (800692c <USBD_CDC_Init+0x1ec>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 020f 	and.w	r2, r3, #15
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	3324      	adds	r3, #36	@ 0x24
 80068aa:	2201      	movs	r2, #1
 80068ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	33b0      	adds	r3, #176	@ 0xb0
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80068e4:	2302      	movs	r3, #2
 80068e6:	e018      	b.n	800691a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7c1b      	ldrb	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <USBD_CDC_Init+0x1e8>)
 80068f2:	7819      	ldrb	r1, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f002 fb98 	bl	8009034 <USBD_LL_PrepareReceive>
 8006904:	e008      	b.n	8006918 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006906:	4b08      	ldr	r3, [pc, #32]	@ (8006928 <USBD_CDC_Init+0x1e8>)
 8006908:	7819      	ldrb	r1, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006910:	2340      	movs	r3, #64	@ 0x40
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f002 fb8e 	bl	8009034 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20000093 	.word	0x20000093
 8006928:	20000094 	.word	0x20000094
 800692c:	20000095 	.word	0x20000095

08006930 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800693c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a28 <USBD_CDC_DeInit+0xf8>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f002 faad 	bl	8008ea2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006948:	4b37      	ldr	r3, [pc, #220]	@ (8006a28 <USBD_CDC_DeInit+0xf8>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 020f 	and.w	r2, r3, #15
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	3324      	adds	r3, #36	@ 0x24
 800695e:	2200      	movs	r2, #0
 8006960:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006962:	4b32      	ldr	r3, [pc, #200]	@ (8006a2c <USBD_CDC_DeInit+0xfc>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f002 fa9a 	bl	8008ea2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800696e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a2c <USBD_CDC_DeInit+0xfc>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f003 020f 	and.w	r2, r3, #15
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006986:	2200      	movs	r2, #0
 8006988:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800698a:	4b29      	ldr	r3, [pc, #164]	@ (8006a30 <USBD_CDC_DeInit+0x100>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f002 fa86 	bl	8008ea2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006996:	4b26      	ldr	r3, [pc, #152]	@ (8006a30 <USBD_CDC_DeInit+0x100>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	3324      	adds	r3, #36	@ 0x24
 80069ac:	2200      	movs	r2, #0
 80069ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80069b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006a30 <USBD_CDC_DeInit+0x100>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 020f 	and.w	r2, r3, #15
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3326      	adds	r3, #38	@ 0x26
 80069c6:	2200      	movs	r2, #0
 80069c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32b0      	adds	r2, #176	@ 0xb0
 80069d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01f      	beq.n	8006a1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	33b0      	adds	r3, #176	@ 0xb0
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	32b0      	adds	r2, #176	@ 0xb0
 80069fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f002 fb5a 	bl	80090b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32b0      	adds	r2, #176	@ 0xb0
 8006a0e:	2100      	movs	r1, #0
 8006a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000093 	.word	0x20000093
 8006a2c:	20000094 	.word	0x20000094
 8006a30:	20000095 	.word	0x20000095

08006a34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	32b0      	adds	r2, #176	@ 0xb0
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e0bf      	b.n	8006be4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d050      	beq.n	8006b12 <USBD_CDC_Setup+0xde>
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	f040 80af 	bne.w	8006bd4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	88db      	ldrh	r3, [r3, #6]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d03a      	beq.n	8006af4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	da1b      	bge.n	8006ac0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	33b0      	adds	r3, #176	@ 0xb0
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006a9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	88d2      	ldrh	r2, [r2, #6]
 8006aa4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	88db      	ldrh	r3, [r3, #6]
 8006aaa:	2b07      	cmp	r3, #7
 8006aac:	bf28      	it	cs
 8006aae:	2307      	movcs	r3, #7
 8006ab0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	89fa      	ldrh	r2, [r7, #14]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fd93 	bl	80085e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006abe:	e090      	b.n	8006be2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	785a      	ldrb	r2, [r3, #1]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	88db      	ldrh	r3, [r3, #6]
 8006ace:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ad0:	d803      	bhi.n	8006ada <USBD_CDC_Setup+0xa6>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	88db      	ldrh	r3, [r3, #6]
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	e000      	b.n	8006adc <USBD_CDC_Setup+0xa8>
 8006ada:	2240      	movs	r2, #64	@ 0x40
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ae2:	6939      	ldr	r1, [r7, #16]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006aea:	461a      	mov	r2, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fda5 	bl	800863c <USBD_CtlPrepareRx>
      break;
 8006af2:	e076      	b.n	8006be2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	33b0      	adds	r3, #176	@ 0xb0
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	7850      	ldrb	r0, [r2, #1]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	4798      	blx	r3
      break;
 8006b10:	e067      	b.n	8006be2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b0b      	cmp	r3, #11
 8006b18:	d851      	bhi.n	8006bbe <USBD_CDC_Setup+0x18a>
 8006b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <USBD_CDC_Setup+0xec>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006bcd 	.word	0x08006bcd
 8006b28:	08006bbf 	.word	0x08006bbf
 8006b2c:	08006bbf 	.word	0x08006bbf
 8006b30:	08006bbf 	.word	0x08006bbf
 8006b34:	08006bbf 	.word	0x08006bbf
 8006b38:	08006bbf 	.word	0x08006bbf
 8006b3c:	08006bbf 	.word	0x08006bbf
 8006b40:	08006bbf 	.word	0x08006bbf
 8006b44:	08006bbf 	.word	0x08006bbf
 8006b48:	08006b7b 	.word	0x08006b7b
 8006b4c:	08006ba5 	.word	0x08006ba5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d107      	bne.n	8006b6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b5c:	f107 030a 	add.w	r3, r7, #10
 8006b60:	2202      	movs	r2, #2
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fd3d 	bl	80085e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b6a:	e032      	b.n	8006bd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 fcbb 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	75fb      	strb	r3, [r7, #23]
          break;
 8006b78:	e02b      	b.n	8006bd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d107      	bne.n	8006b96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b86:	f107 030d 	add.w	r3, r7, #13
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fd28 	bl	80085e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b94:	e01d      	b.n	8006bd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fca6 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ba2:	e016      	b.n	8006bd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d00f      	beq.n	8006bd0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fc99 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006bbc:	e008      	b.n	8006bd0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fc92 	bl	80084ea <USBD_CtlError>
          ret = USBD_FAIL;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bca:	e002      	b.n	8006bd2 <USBD_CDC_Setup+0x19e>
          break;
 8006bcc:	bf00      	nop
 8006bce:	e008      	b.n	8006be2 <USBD_CDC_Setup+0x1ae>
          break;
 8006bd0:	bf00      	nop
      }
      break;
 8006bd2:	e006      	b.n	8006be2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 fc87 	bl	80084ea <USBD_CtlError>
      ret = USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	75fb      	strb	r3, [r7, #23]
      break;
 8006be0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32b0      	adds	r2, #176	@ 0xb0
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e065      	b.n	8006ce2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32b0      	adds	r2, #176	@ 0xb0
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3318      	adds	r3, #24
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d02f      	beq.n	8006ca0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	f003 020f 	and.w	r2, r3, #15
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	3318      	adds	r3, #24
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	f003 010f 	and.w	r1, r3, #15
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	440b      	add	r3, r1
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4403      	add	r3, r0
 8006c68:	331c      	adds	r3, #28
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d112      	bne.n	8006ca0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3318      	adds	r3, #24
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c92:	78f9      	ldrb	r1, [r7, #3]
 8006c94:	2300      	movs	r3, #0
 8006c96:	2200      	movs	r2, #0
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f002 f9aa 	bl	8008ff2 <USBD_LL_Transmit>
 8006c9e:	e01f      	b.n	8006ce0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	33b0      	adds	r3, #176	@ 0xb0
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d010      	beq.n	8006ce0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	33b0      	adds	r3, #176	@ 0xb0
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006cdc:	78fa      	ldrb	r2, [r7, #3]
 8006cde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	32b0      	adds	r2, #176	@ 0xb0
 8006d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32b0      	adds	r2, #176	@ 0xb0
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e01a      	b.n	8006d52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f002 f9a8 	bl	8009076 <USBD_LL_GetRxDataSize>
 8006d26:	4602      	mov	r2, r0
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	33b0      	adds	r3, #176	@ 0xb0
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	32b0      	adds	r2, #176	@ 0xb0
 8006d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e024      	b.n	8006dc6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	33b0      	adds	r3, #176	@ 0xb0
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d019      	beq.n	8006dc4 <USBD_CDC_EP0_RxReady+0x6a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d96:	2bff      	cmp	r3, #255	@ 0xff
 8006d98:	d014      	beq.n	8006dc4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	33b0      	adds	r3, #176	@ 0xb0
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006db2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006dba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	22ff      	movs	r2, #255	@ 0xff
 8006dc0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dd8:	2182      	movs	r1, #130	@ 0x82
 8006dda:	4818      	ldr	r0, [pc, #96]	@ (8006e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ddc:	f000 fd4f 	bl	800787e <USBD_GetEpDesc>
 8006de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006de2:	2101      	movs	r1, #1
 8006de4:	4815      	ldr	r0, [pc, #84]	@ (8006e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006de6:	f000 fd4a 	bl	800787e <USBD_GetEpDesc>
 8006dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dec:	2181      	movs	r1, #129	@ 0x81
 8006dee:	4813      	ldr	r0, [pc, #76]	@ (8006e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006df0:	f000 fd45 	bl	800787e <USBD_GetEpDesc>
 8006df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e10:	711a      	strb	r2, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d006      	beq.n	8006e2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e24:	711a      	strb	r2, [r3, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2243      	movs	r2, #67	@ 0x43
 8006e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000050 	.word	0x20000050

08006e40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e48:	2182      	movs	r1, #130	@ 0x82
 8006e4a:	4818      	ldr	r0, [pc, #96]	@ (8006eac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e4c:	f000 fd17 	bl	800787e <USBD_GetEpDesc>
 8006e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e52:	2101      	movs	r1, #1
 8006e54:	4815      	ldr	r0, [pc, #84]	@ (8006eac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e56:	f000 fd12 	bl	800787e <USBD_GetEpDesc>
 8006e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e5c:	2181      	movs	r1, #129	@ 0x81
 8006e5e:	4813      	ldr	r0, [pc, #76]	@ (8006eac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e60:	f000 fd0d 	bl	800787e <USBD_GetEpDesc>
 8006e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2210      	movs	r2, #16
 8006e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d006      	beq.n	8006e86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	711a      	strb	r2, [r3, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f042 0202 	orr.w	r2, r2, #2
 8006e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	711a      	strb	r2, [r3, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f042 0202 	orr.w	r2, r2, #2
 8006e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2243      	movs	r2, #67	@ 0x43
 8006e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ea0:	4b02      	ldr	r3, [pc, #8]	@ (8006eac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000050 	.word	0x20000050

08006eb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006eb8:	2182      	movs	r1, #130	@ 0x82
 8006eba:	4818      	ldr	r0, [pc, #96]	@ (8006f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ebc:	f000 fcdf 	bl	800787e <USBD_GetEpDesc>
 8006ec0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4815      	ldr	r0, [pc, #84]	@ (8006f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ec6:	f000 fcda 	bl	800787e <USBD_GetEpDesc>
 8006eca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ecc:	2181      	movs	r1, #129	@ 0x81
 8006ece:	4813      	ldr	r0, [pc, #76]	@ (8006f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ed0:	f000 fcd5 	bl	800787e <USBD_GetEpDesc>
 8006ed4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2210      	movs	r2, #16
 8006ee0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d006      	beq.n	8006ef6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ef0:	711a      	strb	r2, [r3, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d006      	beq.n	8006f0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f04:	711a      	strb	r2, [r3, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2243      	movs	r2, #67	@ 0x43
 8006f0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f10:	4b02      	ldr	r3, [pc, #8]	@ (8006f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000050 	.word	0x20000050

08006f20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	220a      	movs	r2, #10
 8006f2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f2e:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	2000000c 	.word	0x2000000c

08006f40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e009      	b.n	8006f68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	33b0      	adds	r3, #176	@ 0xb0
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	32b0      	adds	r2, #176	@ 0xb0
 8006f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e008      	b.n	8006fac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	32b0      	adds	r2, #176	@ 0xb0
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e004      	b.n	8006fe6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	32b0      	adds	r2, #176	@ 0xb0
 8007006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007016:	2303      	movs	r3, #3
 8007018:	e025      	b.n	8007066 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11f      	bne.n	8007064 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2201      	movs	r2, #1
 8007028:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800702c:	4b10      	ldr	r3, [pc, #64]	@ (8007070 <USBD_CDC_TransmitPacket+0x7c>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4403      	add	r3, r0
 8007046:	3318      	adds	r3, #24
 8007048:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800704a:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <USBD_CDC_TransmitPacket+0x7c>)
 800704c:	7819      	ldrb	r1, [r3, #0]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 ffc9 	bl	8008ff2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000093 	.word	0x20000093

08007074 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32b0      	adds	r2, #176	@ 0xb0
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32b0      	adds	r2, #176	@ 0xb0
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800709e:	2303      	movs	r3, #3
 80070a0:	e018      	b.n	80070d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7c1b      	ldrb	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070aa:	4b0c      	ldr	r3, [pc, #48]	@ (80070dc <USBD_CDC_ReceivePacket+0x68>)
 80070ac:	7819      	ldrb	r1, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 ffbb 	bl	8009034 <USBD_LL_PrepareReceive>
 80070be:	e008      	b.n	80070d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070c0:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <USBD_CDC_ReceivePacket+0x68>)
 80070c2:	7819      	ldrb	r1, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070ca:	2340      	movs	r3, #64	@ 0x40
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 ffb1 	bl	8009034 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000094 	.word	0x20000094

080070e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e01f      	b.n	8007138 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	79fa      	ldrb	r2, [r7, #7]
 800712a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f001 fe2b 	bl	8008d88 <USBD_LL_Init>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	e025      	b.n	80071a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	32ae      	adds	r2, #174	@ 0xae
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00f      	beq.n	8007194 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32ae      	adds	r2, #174	@ 0xae
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	f107 020e 	add.w	r2, r7, #14
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	4602      	mov	r2, r0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fe33 	bl	8008e20 <USBD_LL_Start>
 80071ba:	4603      	mov	r3, r0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	4611      	mov	r1, r2
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	4611      	mov	r1, r2
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f001 f90c 	bl	8008476 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	2b02      	cmp	r3, #2
 8007280:	d01a      	beq.n	80072b8 <USBD_LL_SetupStage+0x72>
 8007282:	2b02      	cmp	r3, #2
 8007284:	d822      	bhi.n	80072cc <USBD_LL_SetupStage+0x86>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <USBD_LL_SetupStage+0x4a>
 800728a:	2b01      	cmp	r3, #1
 800728c:	d00a      	beq.n	80072a4 <USBD_LL_SetupStage+0x5e>
 800728e:	e01d      	b.n	80072cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb63 	bl	8007964 <USBD_StdDevReq>
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]
      break;
 80072a2:	e020      	b.n	80072e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fbcb 	bl	8007a48 <USBD_StdItfReq>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
      break;
 80072b6:	e016      	b.n	80072e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc2d 	bl	8007b20 <USBD_StdEPReq>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
      break;
 80072ca:	e00c      	b.n	80072e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fe00 	bl	8008ee0 <USBD_LL_StallEP>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]
      break;
 80072e4:	bf00      	nop
  }

  return ret;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	460b      	mov	r3, r1
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d16e      	bne.n	80073e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800730e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007316:	2b03      	cmp	r3, #3
 8007318:	f040 8098 	bne.w	800744c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	429a      	cmp	r2, r3
 8007326:	d913      	bls.n	8007350 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	1ad2      	subs	r2, r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	4293      	cmp	r3, r2
 8007340:	bf28      	it	cs
 8007342:	4613      	movcs	r3, r2
 8007344:	461a      	mov	r2, r3
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 f994 	bl	8008676 <USBD_CtlContinueRx>
 800734e:	e07d      	b.n	800744c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2b02      	cmp	r3, #2
 800735c:	d014      	beq.n	8007388 <USBD_LL_DataOutStage+0x98>
 800735e:	2b02      	cmp	r3, #2
 8007360:	d81d      	bhi.n	800739e <USBD_LL_DataOutStage+0xae>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <USBD_LL_DataOutStage+0x7c>
 8007366:	2b01      	cmp	r3, #1
 8007368:	d003      	beq.n	8007372 <USBD_LL_DataOutStage+0x82>
 800736a:	e018      	b.n	800739e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	75bb      	strb	r3, [r7, #22]
            break;
 8007370:	e018      	b.n	80073a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fa64 	bl	800784a <USBD_CoreFindIF>
 8007382:	4603      	mov	r3, r0
 8007384:	75bb      	strb	r3, [r7, #22]
            break;
 8007386:	e00d      	b.n	80073a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fa66 	bl	8007864 <USBD_CoreFindEP>
 8007398:	4603      	mov	r3, r0
 800739a:	75bb      	strb	r3, [r7, #22]
            break;
 800739c:	e002      	b.n	80073a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	75bb      	strb	r3, [r7, #22]
            break;
 80073a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80073a4:	7dbb      	ldrb	r3, [r7, #22]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d119      	bne.n	80073de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d113      	bne.n	80073de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80073b6:	7dba      	ldrb	r2, [r7, #22]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	32ae      	adds	r2, #174	@ 0xae
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80073c6:	7dba      	ldrb	r2, [r7, #22]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80073ce:	7dba      	ldrb	r2, [r7, #22]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	32ae      	adds	r2, #174	@ 0xae
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 f95a 	bl	8008698 <USBD_CtlSendStatus>
 80073e4:	e032      	b.n	800744c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fa37 	bl	8007864 <USBD_CoreFindEP>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073fa:	7dbb      	ldrb	r3, [r7, #22]
 80073fc:	2bff      	cmp	r3, #255	@ 0xff
 80073fe:	d025      	beq.n	800744c <USBD_LL_DataOutStage+0x15c>
 8007400:	7dbb      	ldrb	r3, [r7, #22]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d122      	bne.n	800744c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d117      	bne.n	8007442 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007412:	7dba      	ldrb	r2, [r7, #22]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	32ae      	adds	r2, #174	@ 0xae
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00f      	beq.n	8007442 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007422:	7dba      	ldrb	r2, [r7, #22]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800742a:	7dba      	ldrb	r2, [r7, #22]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	32ae      	adds	r2, #174	@ 0xae
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	7afa      	ldrb	r2, [r7, #11]
 8007438:	4611      	mov	r1, r2
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	e000      	b.n	800744e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	460b      	mov	r3, r1
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d16f      	bne.n	800754a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3314      	adds	r3, #20
 800746e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007476:	2b02      	cmp	r3, #2
 8007478:	d15a      	bne.n	8007530 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	429a      	cmp	r2, r3
 8007484:	d914      	bls.n	80074b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	461a      	mov	r2, r3
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f001 f8bc 	bl	800861a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a2:	2300      	movs	r3, #0
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 fdc3 	bl	8009034 <USBD_LL_PrepareReceive>
 80074ae:	e03f      	b.n	8007530 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d11c      	bne.n	80074f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d316      	bcc.n	80074f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d20f      	bcs.n	80074f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 f89d 	bl	800861a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f001 fda0 	bl	8009034 <USBD_LL_PrepareReceive>
 80074f4:	e01c      	b.n	8007530 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d10f      	bne.n	8007522 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007522:	2180      	movs	r1, #128	@ 0x80
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f001 fcdb 	bl	8008ee0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f001 f8c7 	bl	80086be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d03a      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fe42 	bl	80071c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007548:	e032      	b.n	80075b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007550:	b2db      	uxtb	r3, r3
 8007552:	4619      	mov	r1, r3
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f985 	bl	8007864 <USBD_CoreFindEP>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2bff      	cmp	r3, #255	@ 0xff
 8007562:	d025      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d122      	bne.n	80075b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d11c      	bne.n	80075b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007576:	7dfa      	ldrb	r2, [r7, #23]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	32ae      	adds	r2, #174	@ 0xae
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d014      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007586:	7dfa      	ldrb	r2, [r7, #23]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800758e:	7dfa      	ldrb	r2, [r7, #23]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	32ae      	adds	r2, #174	@ 0xae
 8007594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	7afa      	ldrb	r2, [r7, #11]
 800759c:	4611      	mov	r1, r2
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	4798      	blx	r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80075a6:	7dbb      	ldrb	r3, [r7, #22]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80075ac:	7dbb      	ldrb	r3, [r7, #22]
 80075ae:	e000      	b.n	80075b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d014      	beq.n	8007620 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00e      	beq.n	8007620 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6852      	ldr	r2, [r2, #4]
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	4611      	mov	r1, r2
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007620:	2340      	movs	r3, #64	@ 0x40
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fc15 	bl	8008e56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2240      	movs	r2, #64	@ 0x40
 8007638:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800763c:	2340      	movs	r3, #64	@ 0x40
 800763e:	2200      	movs	r2, #0
 8007640:	2180      	movs	r1, #128	@ 0x80
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fc07 	bl	8008e56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2240      	movs	r2, #64	@ 0x40
 8007652:	621a      	str	r2, [r3, #32]

  return ret;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b04      	cmp	r3, #4
 8007690:	d006      	beq.n	80076a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007698:	b2da      	uxtb	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2204      	movs	r2, #4
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d106      	bne.n	80076d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d110      	bne.n	800771c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	32ae      	adds	r2, #174	@ 0xae
 800773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007744:	2303      	movs	r3, #3
 8007746:	e01c      	b.n	8007782 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d115      	bne.n	8007780 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	32ae      	adds	r2, #174	@ 0xae
 800775e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32ae      	adds	r2, #174	@ 0xae
 8007772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4611      	mov	r1, r2
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	32ae      	adds	r2, #174	@ 0xae
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e01c      	b.n	80077e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d115      	bne.n	80077e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	32ae      	adds	r2, #174	@ 0xae
 80077c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32ae      	adds	r2, #174	@ 0xae
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077dc:	78fa      	ldrb	r2, [r7, #3]
 80077de:	4611      	mov	r1, r2
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00e      	beq.n	8007840 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6852      	ldr	r2, [r2, #4]
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	4611      	mov	r1, r2
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007856:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007870:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	885b      	ldrh	r3, [r3, #2]
 800789a:	b29b      	uxth	r3, r3
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	7812      	ldrb	r2, [r2, #0]
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d91f      	bls.n	80078e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80078aa:	e013      	b.n	80078d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80078ac:	f107 030a 	add.w	r3, r7, #10
 80078b0:	4619      	mov	r1, r3
 80078b2:	6978      	ldr	r0, [r7, #20]
 80078b4:	f000 f81b 	bl	80078ee <USBD_GetNextDesc>
 80078b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d108      	bne.n	80078d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	789b      	ldrb	r3, [r3, #2]
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d008      	beq.n	80078e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	885b      	ldrh	r3, [r3, #2]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	897b      	ldrh	r3, [r7, #10]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d8e5      	bhi.n	80078ac <USBD_GetEpDesc+0x2e>
 80078e0:	e000      	b.n	80078e4 <USBD_GetEpDesc+0x66>
          break;
 80078e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80078e4:	693b      	ldr	r3, [r7, #16]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	7812      	ldrb	r2, [r2, #0]
 8007904:	4413      	add	r3, r2
 8007906:	b29a      	uxth	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4413      	add	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007918:	68fb      	ldr	r3, [r7, #12]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	3301      	adds	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007944:	8a3b      	ldrh	r3, [r7, #16]
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	b21a      	sxth	r2, r3
 800794a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800794e:	4313      	orrs	r3, r2
 8007950:	b21b      	sxth	r3, r3
 8007952:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007954:	89fb      	ldrh	r3, [r7, #14]
}
 8007956:	4618      	mov	r0, r3
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
	...

08007964 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800797a:	2b40      	cmp	r3, #64	@ 0x40
 800797c:	d005      	beq.n	800798a <USBD_StdDevReq+0x26>
 800797e:	2b40      	cmp	r3, #64	@ 0x40
 8007980:	d857      	bhi.n	8007a32 <USBD_StdDevReq+0xce>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00f      	beq.n	80079a6 <USBD_StdDevReq+0x42>
 8007986:	2b20      	cmp	r3, #32
 8007988:	d153      	bne.n	8007a32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	32ae      	adds	r2, #174	@ 0xae
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
      break;
 80079a4:	e04a      	b.n	8007a3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b09      	cmp	r3, #9
 80079ac:	d83b      	bhi.n	8007a26 <USBD_StdDevReq+0xc2>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <USBD_StdDevReq+0x50>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007a1d 	.word	0x08007a1d
 80079bc:	08007a27 	.word	0x08007a27
 80079c0:	08007a13 	.word	0x08007a13
 80079c4:	08007a27 	.word	0x08007a27
 80079c8:	080079e7 	.word	0x080079e7
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	08007a27 	.word	0x08007a27
 80079d4:	080079ff 	.word	0x080079ff
 80079d8:	080079f1 	.word	0x080079f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fa3c 	bl	8007e5c <USBD_GetDescriptor>
          break;
 80079e4:	e024      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fba1 	bl	8008130 <USBD_SetAddress>
          break;
 80079ee:	e01f      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fbe0 	bl	80081b8 <USBD_SetConfig>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]
          break;
 80079fc:	e018      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc83 	bl	800830c <USBD_GetConfig>
          break;
 8007a06:	e013      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fcb4 	bl	8008378 <USBD_GetStatus>
          break;
 8007a10:	e00e      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fce3 	bl	80083e0 <USBD_SetFeature>
          break;
 8007a1a:	e009      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fd07 	bl	8008432 <USBD_ClrFeature>
          break;
 8007a24:	e004      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fd5e 	bl	80084ea <USBD_CtlError>
          break;
 8007a2e:	bf00      	nop
      }
      break;
 8007a30:	e004      	b.n	8007a3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fd58 	bl	80084ea <USBD_CtlError>
      break;
 8007a3a:	bf00      	nop
  }

  return ret;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a5e:	2b40      	cmp	r3, #64	@ 0x40
 8007a60:	d005      	beq.n	8007a6e <USBD_StdItfReq+0x26>
 8007a62:	2b40      	cmp	r3, #64	@ 0x40
 8007a64:	d852      	bhi.n	8007b0c <USBD_StdItfReq+0xc4>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <USBD_StdItfReq+0x26>
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d14e      	bne.n	8007b0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d840      	bhi.n	8007afe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	889b      	ldrh	r3, [r3, #4]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d836      	bhi.n	8007af4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	889b      	ldrh	r3, [r3, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fedb 	bl	800784a <USBD_CoreFindIF>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2bff      	cmp	r3, #255	@ 0xff
 8007a9c:	d01d      	beq.n	8007ada <USBD_StdItfReq+0x92>
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11a      	bne.n	8007ada <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007aa4:	7bba      	ldrb	r2, [r7, #14]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	32ae      	adds	r2, #174	@ 0xae
 8007aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00f      	beq.n	8007ad4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ab4:	7bba      	ldrb	r2, [r7, #14]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007abc:	7bba      	ldrb	r2, [r7, #14]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	@ 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ad2:	e004      	b.n	8007ade <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ad8:	e001      	b.n	8007ade <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	88db      	ldrh	r3, [r3, #6]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d110      	bne.n	8007b08 <USBD_StdItfReq+0xc0>
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10d      	bne.n	8007b08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fdd3 	bl	8008698 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007af2:	e009      	b.n	8007b08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fcf7 	bl	80084ea <USBD_CtlError>
          break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fcf2 	bl	80084ea <USBD_CtlError>
          break;
 8007b06:	e000      	b.n	8007b0a <USBD_StdItfReq+0xc2>
          break;
 8007b08:	bf00      	nop
      }
      break;
 8007b0a:	e004      	b.n	8007b16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fceb 	bl	80084ea <USBD_CtlError>
      break;
 8007b14:	bf00      	nop
  }

  return ret;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	889b      	ldrh	r3, [r3, #4]
 8007b32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b3c:	2b40      	cmp	r3, #64	@ 0x40
 8007b3e:	d007      	beq.n	8007b50 <USBD_StdEPReq+0x30>
 8007b40:	2b40      	cmp	r3, #64	@ 0x40
 8007b42:	f200 817f 	bhi.w	8007e44 <USBD_StdEPReq+0x324>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d02a      	beq.n	8007ba0 <USBD_StdEPReq+0x80>
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	f040 817a 	bne.w	8007e44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fe85 	bl	8007864 <USBD_CoreFindEP>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b5e:	7b7b      	ldrb	r3, [r7, #13]
 8007b60:	2bff      	cmp	r3, #255	@ 0xff
 8007b62:	f000 8174 	beq.w	8007e4e <USBD_StdEPReq+0x32e>
 8007b66:	7b7b      	ldrb	r3, [r7, #13]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 8170 	bne.w	8007e4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007b6e:	7b7a      	ldrb	r2, [r7, #13]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b76:	7b7a      	ldrb	r2, [r7, #13]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	32ae      	adds	r2, #174	@ 0xae
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8163 	beq.w	8007e4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b88:	7b7a      	ldrb	r2, [r7, #13]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32ae      	adds	r2, #174	@ 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b9e:	e156      	b.n	8007e4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d008      	beq.n	8007bba <USBD_StdEPReq+0x9a>
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	f300 8145 	bgt.w	8007e38 <USBD_StdEPReq+0x318>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 809b 	beq.w	8007cea <USBD_StdEPReq+0x1ca>
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d03c      	beq.n	8007c32 <USBD_StdEPReq+0x112>
 8007bb8:	e13e      	b.n	8007e38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d002      	beq.n	8007bcc <USBD_StdEPReq+0xac>
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d016      	beq.n	8007bf8 <USBD_StdEPReq+0xd8>
 8007bca:	e02c      	b.n	8007c26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <USBD_StdEPReq+0xce>
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b80      	cmp	r3, #128	@ 0x80
 8007bd6:	d00a      	beq.n	8007bee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f97f 	bl	8008ee0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be2:	2180      	movs	r1, #128	@ 0x80
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f97b 	bl	8008ee0 <USBD_LL_StallEP>
 8007bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bec:	e020      	b.n	8007c30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fc7a 	bl	80084ea <USBD_CtlError>
              break;
 8007bf6:	e01b      	b.n	8007c30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	885b      	ldrh	r3, [r3, #2]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10e      	bne.n	8007c1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <USBD_StdEPReq+0xfe>
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b80      	cmp	r3, #128	@ 0x80
 8007c0a:	d008      	beq.n	8007c1e <USBD_StdEPReq+0xfe>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	88db      	ldrh	r3, [r3, #6]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 f961 	bl	8008ee0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd3a 	bl	8008698 <USBD_CtlSendStatus>

              break;
 8007c24:	e004      	b.n	8007c30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc5e 	bl	80084ea <USBD_CtlError>
              break;
 8007c2e:	bf00      	nop
          }
          break;
 8007c30:	e107      	b.n	8007e42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d002      	beq.n	8007c44 <USBD_StdEPReq+0x124>
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d016      	beq.n	8007c70 <USBD_StdEPReq+0x150>
 8007c42:	e04b      	b.n	8007cdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00d      	beq.n	8007c66 <USBD_StdEPReq+0x146>
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b80      	cmp	r3, #128	@ 0x80
 8007c4e:	d00a      	beq.n	8007c66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f943 	bl	8008ee0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c5a:	2180      	movs	r1, #128	@ 0x80
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 f93f 	bl	8008ee0 <USBD_LL_StallEP>
 8007c62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c64:	e040      	b.n	8007ce8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fc3e 	bl	80084ea <USBD_CtlError>
              break;
 8007c6e:	e03b      	b.n	8007ce8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	885b      	ldrh	r3, [r3, #2]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d136      	bne.n	8007ce6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 f949 	bl	8008f1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fd03 	bl	8008698 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff fde4 	bl	8007864 <USBD_CoreFindEP>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ca0:	7b7b      	ldrb	r3, [r7, #13]
 8007ca2:	2bff      	cmp	r3, #255	@ 0xff
 8007ca4:	d01f      	beq.n	8007ce6 <USBD_StdEPReq+0x1c6>
 8007ca6:	7b7b      	ldrb	r3, [r7, #13]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d11c      	bne.n	8007ce6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007cac:	7b7a      	ldrb	r2, [r7, #13]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007cb4:	7b7a      	ldrb	r2, [r7, #13]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	32ae      	adds	r2, #174	@ 0xae
 8007cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d010      	beq.n	8007ce6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cc4:	7b7a      	ldrb	r2, [r7, #13]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	32ae      	adds	r2, #174	@ 0xae
 8007cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007cda:	e004      	b.n	8007ce6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fc03 	bl	80084ea <USBD_CtlError>
              break;
 8007ce4:	e000      	b.n	8007ce8 <USBD_StdEPReq+0x1c8>
              break;
 8007ce6:	bf00      	nop
          }
          break;
 8007ce8:	e0ab      	b.n	8007e42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d002      	beq.n	8007cfc <USBD_StdEPReq+0x1dc>
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d032      	beq.n	8007d60 <USBD_StdEPReq+0x240>
 8007cfa:	e097      	b.n	8007e2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <USBD_StdEPReq+0x1f2>
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b80      	cmp	r3, #128	@ 0x80
 8007d06:	d004      	beq.n	8007d12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fbed 	bl	80084ea <USBD_CtlError>
                break;
 8007d10:	e091      	b.n	8007e36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da0b      	bge.n	8007d32 <USBD_StdEPReq+0x212>
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	3310      	adds	r3, #16
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3304      	adds	r3, #4
 8007d30:	e00b      	b.n	8007d4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	4413      	add	r3, r2
 8007d48:	3304      	adds	r3, #4
 8007d4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2202      	movs	r2, #2
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fc43 	bl	80085e4 <USBD_CtlSendData>
              break;
 8007d5e:	e06a      	b.n	8007e36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	da11      	bge.n	8007d8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	f003 020f 	and.w	r2, r3, #15
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	3324      	adds	r3, #36	@ 0x24
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d117      	bne.n	8007db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fbb0 	bl	80084ea <USBD_CtlError>
                  break;
 8007d8a:	e054      	b.n	8007e36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	f003 020f 	and.w	r2, r3, #15
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb9d 	bl	80084ea <USBD_CtlError>
                  break;
 8007db0:	e041      	b.n	8007e36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da0b      	bge.n	8007dd2 <USBD_StdEPReq+0x2b2>
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	3310      	adds	r3, #16
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	3304      	adds	r3, #4
 8007dd0:	e00b      	b.n	8007dea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	4413      	add	r3, r2
 8007de8:	3304      	adds	r3, #4
 8007dea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <USBD_StdEPReq+0x2d8>
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b80      	cmp	r3, #128	@ 0x80
 8007df6:	d103      	bne.n	8007e00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e00e      	b.n	8007e1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f8a9 	bl	8008f5c <USBD_LL_IsStallEP>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2202      	movs	r2, #2
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fbdd 	bl	80085e4 <USBD_CtlSendData>
              break;
 8007e2a:	e004      	b.n	8007e36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fb5b 	bl	80084ea <USBD_CtlError>
              break;
 8007e34:	bf00      	nop
          }
          break;
 8007e36:	e004      	b.n	8007e42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fb55 	bl	80084ea <USBD_CtlError>
          break;
 8007e40:	bf00      	nop
      }
      break;
 8007e42:	e005      	b.n	8007e50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fb4f 	bl	80084ea <USBD_CtlError>
      break;
 8007e4c:	e000      	b.n	8007e50 <USBD_StdEPReq+0x330>
      break;
 8007e4e:	bf00      	nop
  }

  return ret;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	2b06      	cmp	r3, #6
 8007e7e:	f200 8128 	bhi.w	80080d2 <USBD_GetDescriptor+0x276>
 8007e82:	a201      	add	r2, pc, #4	@ (adr r2, 8007e88 <USBD_GetDescriptor+0x2c>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007ea5 	.word	0x08007ea5
 8007e8c:	08007ebd 	.word	0x08007ebd
 8007e90:	08007efd 	.word	0x08007efd
 8007e94:	080080d3 	.word	0x080080d3
 8007e98:	080080d3 	.word	0x080080d3
 8007e9c:	08008073 	.word	0x08008073
 8007ea0:	0800809f 	.word	0x0800809f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	7c12      	ldrb	r2, [r2, #16]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	60f8      	str	r0, [r7, #12]
      break;
 8007eba:	e112      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7c1b      	ldrb	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10d      	bne.n	8007ee0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ecc:	f107 0208 	add.w	r2, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	2202      	movs	r2, #2
 8007edc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ede:	e100      	b.n	80080e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	f107 0208 	add.w	r2, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	701a      	strb	r2, [r3, #0]
      break;
 8007efa:	e0f2      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	f200 80ac 	bhi.w	8008060 <USBD_GetDescriptor+0x204>
 8007f08:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <USBD_GetDescriptor+0xb4>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f29 	.word	0x08007f29
 8007f14:	08007f5d 	.word	0x08007f5d
 8007f18:	08007f91 	.word	0x08007f91
 8007f1c:	08007fc5 	.word	0x08007fc5
 8007f20:	08007ff9 	.word	0x08007ff9
 8007f24:	0800802d 	.word	0x0800802d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7c12      	ldrb	r2, [r2, #16]
 8007f40:	f107 0108 	add.w	r1, r7, #8
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4a:	e091      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 facb 	bl	80084ea <USBD_CtlError>
            err++;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	3301      	adds	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5a:	e089      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	7c12      	ldrb	r2, [r2, #16]
 8007f74:	f107 0108 	add.w	r1, r7, #8
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
 8007f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f7e:	e077      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fab1 	bl	80084ea <USBD_CtlError>
            err++;
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f8e:	e06f      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	7c12      	ldrb	r2, [r2, #16]
 8007fa8:	f107 0108 	add.w	r1, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fb2:	e05d      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa97 	bl	80084ea <USBD_CtlError>
            err++;
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fc2:	e055      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	7c12      	ldrb	r2, [r2, #16]
 8007fdc:	f107 0108 	add.w	r1, r7, #8
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fe6:	e043      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa7d 	bl	80084ea <USBD_CtlError>
            err++;
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ff6:	e03b      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7c12      	ldrb	r2, [r2, #16]
 8008010:	f107 0108 	add.w	r1, r7, #8
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
 8008018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800801a:	e029      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa63 	bl	80084ea <USBD_CtlError>
            err++;
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	3301      	adds	r3, #1
 8008028:	72fb      	strb	r3, [r7, #11]
          break;
 800802a:	e021      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7c12      	ldrb	r2, [r2, #16]
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804e:	e00f      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa49 	bl	80084ea <USBD_CtlError>
            err++;
 8008058:	7afb      	ldrb	r3, [r7, #11]
 800805a:	3301      	adds	r3, #1
 800805c:	72fb      	strb	r3, [r7, #11]
          break;
 800805e:	e007      	b.n	8008070 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa41 	bl	80084ea <USBD_CtlError>
          err++;
 8008068:	7afb      	ldrb	r3, [r7, #11]
 800806a:	3301      	adds	r3, #1
 800806c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800806e:	bf00      	nop
      }
      break;
 8008070:	e037      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	7c1b      	ldrb	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008082:	f107 0208 	add.w	r2, r7, #8
 8008086:	4610      	mov	r0, r2
 8008088:	4798      	blx	r3
 800808a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800808c:	e029      	b.n	80080e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa2a 	bl	80084ea <USBD_CtlError>
        err++;
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	3301      	adds	r3, #1
 800809a:	72fb      	strb	r3, [r7, #11]
      break;
 800809c:	e021      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7c1b      	ldrb	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10d      	bne.n	80080c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	f107 0208 	add.w	r2, r7, #8
 80080b2:	4610      	mov	r0, r2
 80080b4:	4798      	blx	r3
 80080b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	2207      	movs	r2, #7
 80080be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080c0:	e00f      	b.n	80080e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa10 	bl	80084ea <USBD_CtlError>
        err++;
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	3301      	adds	r3, #1
 80080ce:	72fb      	strb	r3, [r7, #11]
      break;
 80080d0:	e007      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa08 	bl	80084ea <USBD_CtlError>
      err++;
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	3301      	adds	r3, #1
 80080de:	72fb      	strb	r3, [r7, #11]
      break;
 80080e0:	bf00      	nop
  }

  if (err != 0U)
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11e      	bne.n	8008126 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	88db      	ldrh	r3, [r3, #6]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d016      	beq.n	800811e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080f0:	893b      	ldrh	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	88da      	ldrh	r2, [r3, #6]
 80080fa:	893b      	ldrh	r3, [r7, #8]
 80080fc:	4293      	cmp	r3, r2
 80080fe:	bf28      	it	cs
 8008100:	4613      	movcs	r3, r2
 8008102:	b29b      	uxth	r3, r3
 8008104:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008106:	893b      	ldrh	r3, [r7, #8]
 8008108:	461a      	mov	r2, r3
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fa69 	bl	80085e4 <USBD_CtlSendData>
 8008112:	e009      	b.n	8008128 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f9e7 	bl	80084ea <USBD_CtlError>
 800811c:	e004      	b.n	8008128 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 faba 	bl	8008698 <USBD_CtlSendStatus>
 8008124:	e000      	b.n	8008128 <USBD_GetDescriptor+0x2cc>
    return;
 8008126:	bf00      	nop
  }
}
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop

08008130 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	889b      	ldrh	r3, [r3, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d131      	bne.n	80081a6 <USBD_SetAddress+0x76>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88db      	ldrh	r3, [r3, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d12d      	bne.n	80081a6 <USBD_SetAddress+0x76>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	885b      	ldrh	r3, [r3, #2]
 800814e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008150:	d829      	bhi.n	80081a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b03      	cmp	r3, #3
 8008168:	d104      	bne.n	8008174 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9bc 	bl	80084ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008172:	e01d      	b.n	80081b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7bfa      	ldrb	r2, [r7, #15]
 8008178:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 ff17 	bl	8008fb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa86 	bl	8008698 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819a:	e009      	b.n	80081b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a4:	e004      	b.n	80081b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f99e 	bl	80084ea <USBD_CtlError>
  }
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	885b      	ldrh	r3, [r3, #2]
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	4b4e      	ldr	r3, [pc, #312]	@ (8008308 <USBD_SetConfig+0x150>)
 80081ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008308 <USBD_SetConfig+0x150>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d905      	bls.n	80081e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f985 	bl	80084ea <USBD_CtlError>
    return USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e08c      	b.n	80082fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d002      	beq.n	80081f6 <USBD_SetConfig+0x3e>
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d029      	beq.n	8008248 <USBD_SetConfig+0x90>
 80081f4:	e075      	b.n	80082e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081f6:	4b44      	ldr	r3, [pc, #272]	@ (8008308 <USBD_SetConfig+0x150>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d020      	beq.n	8008240 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80081fe:	4b42      	ldr	r3, [pc, #264]	@ (8008308 <USBD_SetConfig+0x150>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008208:	4b3f      	ldr	r3, [pc, #252]	@ (8008308 <USBD_SetConfig+0x150>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fe ffe3 	bl	80071da <USBD_SetClassConfig>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d008      	beq.n	8008230 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f962 	bl	80084ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800822e:	e065      	b.n	80082fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa31 	bl	8008698 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2203      	movs	r2, #3
 800823a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800823e:	e05d      	b.n	80082fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa29 	bl	8008698 <USBD_CtlSendStatus>
      break;
 8008246:	e059      	b.n	80082fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008248:	4b2f      	ldr	r3, [pc, #188]	@ (8008308 <USBD_SetConfig+0x150>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d112      	bne.n	8008276 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008258:	4b2b      	ldr	r3, [pc, #172]	@ (8008308 <USBD_SetConfig+0x150>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008262:	4b29      	ldr	r3, [pc, #164]	@ (8008308 <USBD_SetConfig+0x150>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fe ffd2 	bl	8007212 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa12 	bl	8008698 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008274:	e042      	b.n	80082fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008276:	4b24      	ldr	r3, [pc, #144]	@ (8008308 <USBD_SetConfig+0x150>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d02a      	beq.n	80082da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7fe ffc0 	bl	8007212 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008292:	4b1d      	ldr	r3, [pc, #116]	@ (8008308 <USBD_SetConfig+0x150>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800829c:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <USBD_SetConfig+0x150>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fe ff99 	bl	80071da <USBD_SetClassConfig>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00f      	beq.n	80082d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f918 	bl	80084ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fe ffa5 	bl	8007212 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80082d0:	e014      	b.n	80082fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9e0 	bl	8008698 <USBD_CtlSendStatus>
      break;
 80082d8:	e010      	b.n	80082fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f9dc 	bl	8008698 <USBD_CtlSendStatus>
      break;
 80082e0:	e00c      	b.n	80082fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f900 	bl	80084ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082ea:	4b07      	ldr	r3, [pc, #28]	@ (8008308 <USBD_SetConfig+0x150>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fe ff8e 	bl	8007212 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	73fb      	strb	r3, [r7, #15]
      break;
 80082fa:	bf00      	nop
  }

  return ret;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20004424 	.word	0x20004424

0800830c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88db      	ldrh	r3, [r3, #6]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d004      	beq.n	8008328 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8e2 	bl	80084ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008326:	e023      	b.n	8008370 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	dc02      	bgt.n	800833a <USBD_GetConfig+0x2e>
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc03      	bgt.n	8008340 <USBD_GetConfig+0x34>
 8008338:	e015      	b.n	8008366 <USBD_GetConfig+0x5a>
 800833a:	2b03      	cmp	r3, #3
 800833c:	d00b      	beq.n	8008356 <USBD_GetConfig+0x4a>
 800833e:	e012      	b.n	8008366 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3308      	adds	r3, #8
 800834a:	2201      	movs	r2, #1
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f948 	bl	80085e4 <USBD_CtlSendData>
        break;
 8008354:	e00c      	b.n	8008370 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3304      	adds	r3, #4
 800835a:	2201      	movs	r2, #1
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f940 	bl	80085e4 <USBD_CtlSendData>
        break;
 8008364:	e004      	b.n	8008370 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8be 	bl	80084ea <USBD_CtlError>
        break;
 800836e:	bf00      	nop
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	2b02      	cmp	r3, #2
 800838e:	d81e      	bhi.n	80083ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88db      	ldrh	r3, [r3, #6]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d004      	beq.n	80083a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f8a5 	bl	80084ea <USBD_CtlError>
        break;
 80083a0:	e01a      	b.n	80083d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f043 0202 	orr.w	r2, r3, #2
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	330c      	adds	r3, #12
 80083c2:	2202      	movs	r2, #2
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f90c 	bl	80085e4 <USBD_CtlSendData>
      break;
 80083cc:	e004      	b.n	80083d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f88a 	bl	80084ea <USBD_CtlError>
      break;
 80083d6:	bf00      	nop
  }
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	885b      	ldrh	r3, [r3, #2]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d107      	bne.n	8008402 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f94c 	bl	8008698 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008400:	e013      	b.n	800842a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d10b      	bne.n	8008422 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	889b      	ldrh	r3, [r3, #4]
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	b29b      	uxth	r3, r3
 8008412:	b2da      	uxtb	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f93c 	bl	8008698 <USBD_CtlSendStatus>
}
 8008420:	e003      	b.n	800842a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f860 	bl	80084ea <USBD_CtlError>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008442:	b2db      	uxtb	r3, r3
 8008444:	3b01      	subs	r3, #1
 8008446:	2b02      	cmp	r3, #2
 8008448:	d80b      	bhi.n	8008462 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d10c      	bne.n	800846c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f91c 	bl	8008698 <USBD_CtlSendStatus>
      }
      break;
 8008460:	e004      	b.n	800846c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f840 	bl	80084ea <USBD_CtlError>
      break;
 800846a:	e000      	b.n	800846e <USBD_ClrFeature+0x3c>
      break;
 800846c:	bf00      	nop
  }
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	781a      	ldrb	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3301      	adds	r3, #1
 800849e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff fa40 	bl	8007926 <SWAPBYTE>
 80084a6:	4603      	mov	r3, r0
 80084a8:	461a      	mov	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff fa33 	bl	8007926 <SWAPBYTE>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3301      	adds	r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7ff fa26 	bl	8007926 <SWAPBYTE>
 80084da:	4603      	mov	r3, r0
 80084dc:	461a      	mov	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	80da      	strh	r2, [r3, #6]
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084f4:	2180      	movs	r1, #128	@ 0x80
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fcf2 	bl	8008ee0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fcee 	bl	8008ee0 <USBD_LL_StallEP>
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d042      	beq.n	80085a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008526:	6938      	ldr	r0, [r7, #16]
 8008528:	f000 f842 	bl	80085b0 <USBD_GetLen>
 800852c:	4603      	mov	r3, r0
 800852e:	3301      	adds	r3, #1
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008536:	d808      	bhi.n	800854a <USBD_GetString+0x3e>
 8008538:	6938      	ldr	r0, [r7, #16]
 800853a:	f000 f839 	bl	80085b0 <USBD_GetLen>
 800853e:	4603      	mov	r3, r0
 8008540:	3301      	adds	r3, #1
 8008542:	b29b      	uxth	r3, r3
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	e001      	b.n	800854e <USBD_GetString+0x42>
 800854a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	4413      	add	r3, r2
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	7812      	ldrb	r2, [r2, #0]
 800855c:	701a      	strb	r2, [r3, #0]
  idx++;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	3301      	adds	r3, #1
 8008562:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	2203      	movs	r2, #3
 800856c:	701a      	strb	r2, [r3, #0]
  idx++;
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	3301      	adds	r3, #1
 8008572:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008574:	e013      	b.n	800859e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008576:	7dfb      	ldrb	r3, [r7, #23]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	4413      	add	r3, r2
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3301      	adds	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
    idx++;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	3301      	adds	r3, #1
 800858c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	4413      	add	r3, r2
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
    idx++;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	3301      	adds	r3, #1
 800859c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e7      	bne.n	8008576 <USBD_GetString+0x6a>
 80085a6:	e000      	b.n	80085aa <USBD_GetString+0x9e>
    return;
 80085a8:	bf00      	nop
  }
}
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085c0:	e005      	b.n	80085ce <USBD_GetLen+0x1e>
  {
    len++;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	3301      	adds	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3301      	adds	r3, #1
 80085cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f5      	bne.n	80085c2 <USBD_GetLen+0x12>
  }

  return len;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	2100      	movs	r1, #0
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fcf1 	bl	8008ff2 <USBD_LL_Transmit>

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	2100      	movs	r1, #0
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fce0 	bl	8008ff2 <USBD_LL_Transmit>

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2203      	movs	r2, #3
 800864c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	2100      	movs	r1, #0
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fce4 	bl	8009034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	2100      	movs	r1, #0
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fcd3 	bl	8009034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2204      	movs	r2, #4
 80086a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086a8:	2300      	movs	r3, #0
 80086aa:	2200      	movs	r2, #0
 80086ac:	2100      	movs	r1, #0
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fc9f 	bl	8008ff2 <USBD_LL_Transmit>

  return USBD_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2205      	movs	r2, #5
 80086ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ce:	2300      	movs	r3, #0
 80086d0:	2200      	movs	r2, #0
 80086d2:	2100      	movs	r1, #0
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fcad 	bl	8009034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086e8:	2200      	movs	r2, #0
 80086ea:	4912      	ldr	r1, [pc, #72]	@ (8008734 <MX_USB_DEVICE_Init+0x50>)
 80086ec:	4812      	ldr	r0, [pc, #72]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 80086ee:	f7fe fcf7 	bl	80070e0 <USBD_Init>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086f8:	f7f8 fdfa 	bl	80012f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086fc:	490f      	ldr	r1, [pc, #60]	@ (800873c <MX_USB_DEVICE_Init+0x58>)
 80086fe:	480e      	ldr	r0, [pc, #56]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008700:	f7fe fd1e 	bl	8007140 <USBD_RegisterClass>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800870a:	f7f8 fdf1 	bl	80012f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800870e:	490c      	ldr	r1, [pc, #48]	@ (8008740 <MX_USB_DEVICE_Init+0x5c>)
 8008710:	4809      	ldr	r0, [pc, #36]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008712:	f7fe fc15 	bl	8006f40 <USBD_CDC_RegisterInterface>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800871c:	f7f8 fde8 	bl	80012f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008720:	4805      	ldr	r0, [pc, #20]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008722:	f7fe fd43 	bl	80071ac <USBD_Start>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800872c:	f7f8 fde0 	bl	80012f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008730:	bf00      	nop
 8008732:	bd80      	pop	{r7, pc}
 8008734:	200000ac 	.word	0x200000ac
 8008738:	20004428 	.word	0x20004428
 800873c:	20000018 	.word	0x20000018
 8008740:	20000098 	.word	0x20000098

08008744 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008748:	2200      	movs	r2, #0
 800874a:	4905      	ldr	r1, [pc, #20]	@ (8008760 <CDC_Init_FS+0x1c>)
 800874c:	4805      	ldr	r0, [pc, #20]	@ (8008764 <CDC_Init_FS+0x20>)
 800874e:	f7fe fc11 	bl	8006f74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008752:	4905      	ldr	r1, [pc, #20]	@ (8008768 <CDC_Init_FS+0x24>)
 8008754:	4803      	ldr	r0, [pc, #12]	@ (8008764 <CDC_Init_FS+0x20>)
 8008756:	f7fe fc2f 	bl	8006fb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800875a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800875c:	4618      	mov	r0, r3
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20004f04 	.word	0x20004f04
 8008764:	20004428 	.word	0x20004428
 8008768:	20004704 	.word	0x20004704

0800876c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008770:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
 8008788:	4613      	mov	r3, r2
 800878a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b23      	cmp	r3, #35	@ 0x23
 8008790:	d84a      	bhi.n	8008828 <CDC_Control_FS+0xac>
 8008792:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <CDC_Control_FS+0x1c>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	08008829 	.word	0x08008829
 800879c:	08008829 	.word	0x08008829
 80087a0:	08008829 	.word	0x08008829
 80087a4:	08008829 	.word	0x08008829
 80087a8:	08008829 	.word	0x08008829
 80087ac:	08008829 	.word	0x08008829
 80087b0:	08008829 	.word	0x08008829
 80087b4:	08008829 	.word	0x08008829
 80087b8:	08008829 	.word	0x08008829
 80087bc:	08008829 	.word	0x08008829
 80087c0:	08008829 	.word	0x08008829
 80087c4:	08008829 	.word	0x08008829
 80087c8:	08008829 	.word	0x08008829
 80087cc:	08008829 	.word	0x08008829
 80087d0:	08008829 	.word	0x08008829
 80087d4:	08008829 	.word	0x08008829
 80087d8:	08008829 	.word	0x08008829
 80087dc:	08008829 	.word	0x08008829
 80087e0:	08008829 	.word	0x08008829
 80087e4:	08008829 	.word	0x08008829
 80087e8:	08008829 	.word	0x08008829
 80087ec:	08008829 	.word	0x08008829
 80087f0:	08008829 	.word	0x08008829
 80087f4:	08008829 	.word	0x08008829
 80087f8:	08008829 	.word	0x08008829
 80087fc:	08008829 	.word	0x08008829
 8008800:	08008829 	.word	0x08008829
 8008804:	08008829 	.word	0x08008829
 8008808:	08008829 	.word	0x08008829
 800880c:	08008829 	.word	0x08008829
 8008810:	08008829 	.word	0x08008829
 8008814:	08008829 	.word	0x08008829
 8008818:	08008829 	.word	0x08008829
 800881c:	08008829 	.word	0x08008829
 8008820:	08008829 	.word	0x08008829
 8008824:	08008829 	.word	0x08008829
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008828:	bf00      	nop
  }

  return (USBD_OK);
 800882a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  rxdata=Buf[0];
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	781a      	ldrb	r2, [r3, #0]
 8008846:	4b07      	ldr	r3, [pc, #28]	@ (8008864 <CDC_Receive_FS+0x2c>)
 8008848:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4806      	ldr	r0, [pc, #24]	@ (8008868 <CDC_Receive_FS+0x30>)
 800884e:	f7fe fbb3 	bl	8006fb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008852:	4805      	ldr	r0, [pc, #20]	@ (8008868 <CDC_Receive_FS+0x30>)
 8008854:	f7fe fc0e 	bl	8007074 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008858:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	200002e0 	.word	0x200002e0
 8008868:	20004428 	.word	0x20004428

0800886c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800887c:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <CDC_Transmit_FS+0x48>)
 800887e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008882:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800888e:	2301      	movs	r3, #1
 8008890:	e00b      	b.n	80088aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008892:	887b      	ldrh	r3, [r7, #2]
 8008894:	461a      	mov	r2, r3
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4806      	ldr	r0, [pc, #24]	@ (80088b4 <CDC_Transmit_FS+0x48>)
 800889a:	f7fe fb6b 	bl	8006f74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800889e:	4805      	ldr	r0, [pc, #20]	@ (80088b4 <CDC_Transmit_FS+0x48>)
 80088a0:	f7fe fba8 	bl	8006ff4 <USBD_CDC_TransmitPacket>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20004428 	.word	0x20004428

080088b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80088ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	6039      	str	r1, [r7, #0]
 80088e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2212      	movs	r2, #18
 80088ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088ee:	4b03      	ldr	r3, [pc, #12]	@ (80088fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	200000c8 	.word	0x200000c8

08008900 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	6039      	str	r1, [r7, #0]
 800890a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2204      	movs	r2, #4
 8008910:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008912:	4b03      	ldr	r3, [pc, #12]	@ (8008920 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	200000dc 	.word	0x200000dc

08008924 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	6039      	str	r1, [r7, #0]
 800892e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d105      	bne.n	8008942 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	4907      	ldr	r1, [pc, #28]	@ (8008958 <USBD_FS_ProductStrDescriptor+0x34>)
 800893a:	4808      	ldr	r0, [pc, #32]	@ (800895c <USBD_FS_ProductStrDescriptor+0x38>)
 800893c:	f7ff fde6 	bl	800850c <USBD_GetString>
 8008940:	e004      	b.n	800894c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	4904      	ldr	r1, [pc, #16]	@ (8008958 <USBD_FS_ProductStrDescriptor+0x34>)
 8008946:	4805      	ldr	r0, [pc, #20]	@ (800895c <USBD_FS_ProductStrDescriptor+0x38>)
 8008948:	f7ff fde0 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 800894c:	4b02      	ldr	r3, [pc, #8]	@ (8008958 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20005704 	.word	0x20005704
 800895c:	0800ba38 	.word	0x0800ba38

08008960 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	4904      	ldr	r1, [pc, #16]	@ (8008980 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008970:	4804      	ldr	r0, [pc, #16]	@ (8008984 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008972:	f7ff fdcb 	bl	800850c <USBD_GetString>
  return USBD_StrDesc;
 8008976:	4b02      	ldr	r3, [pc, #8]	@ (8008980 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20005704 	.word	0x20005704
 8008984:	0800ba50 	.word	0x0800ba50

08008988 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	6039      	str	r1, [r7, #0]
 8008992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	221a      	movs	r2, #26
 8008998:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800899a:	f000 f843 	bl	8008a24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800899e:	4b02      	ldr	r3, [pc, #8]	@ (80089a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	200000e0 	.word	0x200000e0

080089ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	6039      	str	r1, [r7, #0]
 80089b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d105      	bne.n	80089ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	4907      	ldr	r1, [pc, #28]	@ (80089e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089c2:	4808      	ldr	r0, [pc, #32]	@ (80089e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089c4:	f7ff fda2 	bl	800850c <USBD_GetString>
 80089c8:	e004      	b.n	80089d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	4904      	ldr	r1, [pc, #16]	@ (80089e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089ce:	4805      	ldr	r0, [pc, #20]	@ (80089e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089d0:	f7ff fd9c 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089d4:	4b02      	ldr	r3, [pc, #8]	@ (80089e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20005704 	.word	0x20005704
 80089e4:	0800ba64 	.word	0x0800ba64

080089e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4907      	ldr	r1, [pc, #28]	@ (8008a1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089fe:	4808      	ldr	r0, [pc, #32]	@ (8008a20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a00:	f7ff fd84 	bl	800850c <USBD_GetString>
 8008a04:	e004      	b.n	8008a10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4904      	ldr	r1, [pc, #16]	@ (8008a1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a0a:	4805      	ldr	r0, [pc, #20]	@ (8008a20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a0c:	f7ff fd7e 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a10:	4b02      	ldr	r3, [pc, #8]	@ (8008a1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20005704 	.word	0x20005704
 8008a20:	0800ba70 	.word	0x0800ba70

08008a24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a68 <Get_SerialNum+0x44>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a30:	4b0e      	ldr	r3, [pc, #56]	@ (8008a6c <Get_SerialNum+0x48>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a36:	4b0e      	ldr	r3, [pc, #56]	@ (8008a70 <Get_SerialNum+0x4c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4413      	add	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d009      	beq.n	8008a5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	4909      	ldr	r1, [pc, #36]	@ (8008a74 <Get_SerialNum+0x50>)
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 f814 	bl	8008a7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a54:	2204      	movs	r2, #4
 8008a56:	4908      	ldr	r1, [pc, #32]	@ (8008a78 <Get_SerialNum+0x54>)
 8008a58:	68b8      	ldr	r0, [r7, #8]
 8008a5a:	f000 f80f 	bl	8008a7c <IntToUnicode>
  }
}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	1fff7a10 	.word	0x1fff7a10
 8008a6c:	1fff7a14 	.word	0x1fff7a14
 8008a70:	1fff7a18 	.word	0x1fff7a18
 8008a74:	200000e2 	.word	0x200000e2
 8008a78:	200000f2 	.word	0x200000f2

08008a7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75fb      	strb	r3, [r7, #23]
 8008a92:	e027      	b.n	8008ae4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	0f1b      	lsrs	r3, r3, #28
 8008a98:	2b09      	cmp	r3, #9
 8008a9a:	d80b      	bhi.n	8008ab4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	0f1b      	lsrs	r3, r3, #28
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	440b      	add	r3, r1
 8008aac:	3230      	adds	r2, #48	@ 0x30
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	e00a      	b.n	8008aca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	0f1b      	lsrs	r3, r3, #28
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4619      	mov	r1, r3
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	440b      	add	r3, r1
 8008ac4:	3237      	adds	r2, #55	@ 0x37
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	011b      	lsls	r3, r3, #4
 8008ace:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	4413      	add	r3, r2
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	75fb      	strb	r3, [r7, #23]
 8008ae4:	7dfa      	ldrb	r2, [r7, #23]
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d3d3      	bcc.n	8008a94 <IntToUnicode+0x18>
  }
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
	...

08008afc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08a      	sub	sp, #40	@ 0x28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	605a      	str	r2, [r3, #4]
 8008b0e:	609a      	str	r2, [r3, #8]
 8008b10:	60da      	str	r2, [r3, #12]
 8008b12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b1c:	d13a      	bne.n	8008b94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b1e:	2300      	movs	r3, #0
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	4b1e      	ldr	r3, [pc, #120]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b26:	4a1d      	ldr	r2, [pc, #116]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	613b      	str	r3, [r7, #16]
 8008b38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b3a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b40:	2302      	movs	r3, #2
 8008b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b4c:	230a      	movs	r3, #10
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b50:	f107 0314 	add.w	r3, r7, #20
 8008b54:	4619      	mov	r1, r3
 8008b56:	4812      	ldr	r0, [pc, #72]	@ (8008ba0 <HAL_PCD_MspInit+0xa4>)
 8008b58:	f7fa f8ba 	bl	8002cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b60:	4a0e      	ldr	r2, [pc, #56]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b66:	6353      	str	r3, [r2, #52]	@ 0x34
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b70:	4a0a      	ldr	r2, [pc, #40]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b76:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b78:	4b08      	ldr	r3, [pc, #32]	@ (8008b9c <HAL_PCD_MspInit+0xa0>)
 8008b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	2043      	movs	r0, #67	@ 0x43
 8008b8a:	f7f9 fc8a 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b8e:	2043      	movs	r0, #67	@ 0x43
 8008b90:	f7f9 fca3 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b94:	bf00      	nop
 8008b96:	3728      	adds	r7, #40	@ 0x28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40023800 	.word	0x40023800
 8008ba0:	40020000 	.word	0x40020000

08008ba4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f7fe fb43 	bl	8007246 <USBD_LL_SetupStage>
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	4613      	mov	r3, r2
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	f7fe fb7d 	bl	80072f0 <USBD_LL_DataOutStage>
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4613      	mov	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	3320      	adds	r3, #32
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	4619      	mov	r1, r3
 8008c26:	f7fe fc16 	bl	8007456 <USBD_LL_DataInStage>
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fe fd50 	bl	80076e6 <USBD_LL_SOF>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c56:	2301      	movs	r3, #1
 8008c58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	79db      	ldrb	r3, [r3, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
 8008c66:	e008      	b.n	8008c7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	79db      	ldrb	r3, [r3, #7]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d102      	bne.n	8008c76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e001      	b.n	8008c7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008c76:	f7f8 fb3b 	bl	80012f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c80:	7bfa      	ldrb	r2, [r7, #15]
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fcea 	bl	800765e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fc92 	bl	80075ba <USBD_LL_Reset>
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fce5 	bl	800767e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008cc6:	f043 0301 	orr.w	r3, r3, #1
 8008cca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7adb      	ldrb	r3, [r3, #11]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cd4:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <HAL_PCD_SuspendCallback+0x48>)
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	4a03      	ldr	r2, [pc, #12]	@ (8008ce8 <HAL_PCD_SuspendCallback+0x48>)
 8008cda:	f043 0306 	orr.w	r3, r3, #6
 8008cde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	e000ed00 	.word	0xe000ed00

08008cec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe fcdb 	bl	80076b6 <USBD_LL_Resume>
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fd33 	bl	800778a <USBD_LL_IsoOUTIncomplete>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	4611      	mov	r1, r2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe fcef 	bl	8007726 <USBD_LL_IsoINIncomplete>
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fd45 	bl	80077ee <USBD_LL_DevConnected>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fd42 	bl	8007804 <USBD_LL_DevDisconnected>
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d13c      	bne.n	8008e12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d98:	4a20      	ldr	r2, [pc, #128]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a1e      	ldr	r2, [pc, #120]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008da4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008da8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008daa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008db0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008db2:	2204      	movs	r2, #4
 8008db4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008db6:	4b19      	ldr	r3, [pc, #100]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008db8:	2202      	movs	r2, #2
 8008dba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dbc:	4b17      	ldr	r3, [pc, #92]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dc2:	4b16      	ldr	r3, [pc, #88]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008dc8:	4b14      	ldr	r3, [pc, #80]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008dce:	4b13      	ldr	r3, [pc, #76]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008dd4:	4b11      	ldr	r3, [pc, #68]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008dda:	4b10      	ldr	r3, [pc, #64]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008de0:	4b0e      	ldr	r3, [pc, #56]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008de6:	480d      	ldr	r0, [pc, #52]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008de8:	f7fa f927 	bl	800303a <HAL_PCD_Init>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008df2:	f7f8 fa7d 	bl	80012f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008df6:	2180      	movs	r1, #128	@ 0x80
 8008df8:	4808      	ldr	r0, [pc, #32]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008dfa:	f7fb fb54 	bl	80044a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008dfe:	2240      	movs	r2, #64	@ 0x40
 8008e00:	2100      	movs	r1, #0
 8008e02:	4806      	ldr	r0, [pc, #24]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008e04:	f7fb fb08 	bl	8004418 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e08:	2280      	movs	r2, #128	@ 0x80
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	4803      	ldr	r0, [pc, #12]	@ (8008e1c <USBD_LL_Init+0x94>)
 8008e0e:	f7fb fb03 	bl	8004418 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20005904 	.word	0x20005904

08008e20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fa fa0e 	bl	8003258 <HAL_PCD_Start>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f942 	bl	80090cc <USBD_Get_USB_Status>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4611      	mov	r1, r2
 8008e62:	461a      	mov	r2, r3
 8008e64:	4603      	mov	r3, r0
 8008e66:	70fb      	strb	r3, [r7, #3]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70bb      	strb	r3, [r7, #2]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e7e:	78bb      	ldrb	r3, [r7, #2]
 8008e80:	883a      	ldrh	r2, [r7, #0]
 8008e82:	78f9      	ldrb	r1, [r7, #3]
 8008e84:	f7fa fee2 	bl	8003c4c <HAL_PCD_EP_Open>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f91c 	bl	80090cc <USBD_Get_USB_Status>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ebc:	78fa      	ldrb	r2, [r7, #3]
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fa ff2d 	bl	8003d20 <HAL_PCD_EP_Close>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 f8fd 	bl	80090cc <USBD_Get_USB_Status>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fa ffe5 	bl	8003ece <HAL_PCD_EP_SetStall>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f8de 	bl	80090cc <USBD_Get_USB_Status>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb f829 	bl	8003f94 <HAL_PCD_EP_ClrStall>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f8bf 	bl	80090cc <USBD_Get_USB_Status>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da0b      	bge.n	8008f90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f7e:	68f9      	ldr	r1, [r7, #12]
 8008f80:	4613      	mov	r3, r2
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	440b      	add	r3, r1
 8008f8a:	3316      	adds	r3, #22
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	e00b      	b.n	8008fa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008fa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fa fe16 	bl	8003c04 <HAL_PCD_SetAddress>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f874 	bl	80090cc <USBD_Get_USB_Status>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b086      	sub	sp, #24
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]
 8008ffe:	460b      	mov	r3, r1
 8009000:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009010:	7af9      	ldrb	r1, [r7, #11]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	f7fa ff20 	bl	8003e5a <HAL_PCD_EP_Transmit>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	4618      	mov	r0, r3
 8009022:	f000 f853 	bl	80090cc <USBD_Get_USB_Status>
 8009026:	4603      	mov	r3, r0
 8009028:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800902a:	7dbb      	ldrb	r3, [r7, #22]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	607a      	str	r2, [r7, #4]
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	460b      	mov	r3, r1
 8009042:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009052:	7af9      	ldrb	r1, [r7, #11]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	f7fa feac 	bl	8003db4 <HAL_PCD_EP_Receive>
 800905c:	4603      	mov	r3, r0
 800905e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f832 	bl	80090cc <USBD_Get_USB_Status>
 8009068:	4603      	mov	r3, r0
 800906a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800906c:	7dbb      	ldrb	r3, [r7, #22]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f7fa fecc 	bl	8003e2a <HAL_PCD_EP_GetRxCount>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090a4:	4b03      	ldr	r3, [pc, #12]	@ (80090b4 <USBD_static_malloc+0x18>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	20005de8 	.word	0x20005de8

080090b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]

}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d817      	bhi.n	8009110 <USBD_Get_USB_Status+0x44>
 80090e0:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <USBD_Get_USB_Status+0x1c>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	080090f9 	.word	0x080090f9
 80090ec:	080090ff 	.word	0x080090ff
 80090f0:	08009105 	.word	0x08009105
 80090f4:	0800910b 	.word	0x0800910b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
    break;
 80090fc:	e00b      	b.n	8009116 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090fe:	2303      	movs	r3, #3
 8009100:	73fb      	strb	r3, [r7, #15]
    break;
 8009102:	e008      	b.n	8009116 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
    break;
 8009108:	e005      	b.n	8009116 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800910a:	2303      	movs	r3, #3
 800910c:	73fb      	strb	r3, [r7, #15]
    break;
 800910e:	e002      	b.n	8009116 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	73fb      	strb	r3, [r7, #15]
    break;
 8009114:	bf00      	nop
  }
  return usb_status;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <__cvt>:
 8009124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	ec57 6b10 	vmov	r6, r7, d0
 800912c:	2f00      	cmp	r7, #0
 800912e:	460c      	mov	r4, r1
 8009130:	4619      	mov	r1, r3
 8009132:	463b      	mov	r3, r7
 8009134:	bfbb      	ittet	lt
 8009136:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800913a:	461f      	movlt	r7, r3
 800913c:	2300      	movge	r3, #0
 800913e:	232d      	movlt	r3, #45	@ 0x2d
 8009140:	700b      	strb	r3, [r1, #0]
 8009142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009144:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009148:	4691      	mov	r9, r2
 800914a:	f023 0820 	bic.w	r8, r3, #32
 800914e:	bfbc      	itt	lt
 8009150:	4632      	movlt	r2, r6
 8009152:	4616      	movlt	r6, r2
 8009154:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009158:	d005      	beq.n	8009166 <__cvt+0x42>
 800915a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800915e:	d100      	bne.n	8009162 <__cvt+0x3e>
 8009160:	3401      	adds	r4, #1
 8009162:	2102      	movs	r1, #2
 8009164:	e000      	b.n	8009168 <__cvt+0x44>
 8009166:	2103      	movs	r1, #3
 8009168:	ab03      	add	r3, sp, #12
 800916a:	9301      	str	r3, [sp, #4]
 800916c:	ab02      	add	r3, sp, #8
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	ec47 6b10 	vmov	d0, r6, r7
 8009174:	4653      	mov	r3, sl
 8009176:	4622      	mov	r2, r4
 8009178:	f000 fe3a 	bl	8009df0 <_dtoa_r>
 800917c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009180:	4605      	mov	r5, r0
 8009182:	d119      	bne.n	80091b8 <__cvt+0x94>
 8009184:	f019 0f01 	tst.w	r9, #1
 8009188:	d00e      	beq.n	80091a8 <__cvt+0x84>
 800918a:	eb00 0904 	add.w	r9, r0, r4
 800918e:	2200      	movs	r2, #0
 8009190:	2300      	movs	r3, #0
 8009192:	4630      	mov	r0, r6
 8009194:	4639      	mov	r1, r7
 8009196:	f7f7 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800919a:	b108      	cbz	r0, 80091a0 <__cvt+0x7c>
 800919c:	f8cd 900c 	str.w	r9, [sp, #12]
 80091a0:	2230      	movs	r2, #48	@ 0x30
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	454b      	cmp	r3, r9
 80091a6:	d31e      	bcc.n	80091e6 <__cvt+0xc2>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091ac:	1b5b      	subs	r3, r3, r5
 80091ae:	4628      	mov	r0, r5
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	b004      	add	sp, #16
 80091b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091bc:	eb00 0904 	add.w	r9, r0, r4
 80091c0:	d1e5      	bne.n	800918e <__cvt+0x6a>
 80091c2:	7803      	ldrb	r3, [r0, #0]
 80091c4:	2b30      	cmp	r3, #48	@ 0x30
 80091c6:	d10a      	bne.n	80091de <__cvt+0xba>
 80091c8:	2200      	movs	r2, #0
 80091ca:	2300      	movs	r3, #0
 80091cc:	4630      	mov	r0, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f7 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80091d4:	b918      	cbnz	r0, 80091de <__cvt+0xba>
 80091d6:	f1c4 0401 	rsb	r4, r4, #1
 80091da:	f8ca 4000 	str.w	r4, [sl]
 80091de:	f8da 3000 	ldr.w	r3, [sl]
 80091e2:	4499      	add	r9, r3
 80091e4:	e7d3      	b.n	800918e <__cvt+0x6a>
 80091e6:	1c59      	adds	r1, r3, #1
 80091e8:	9103      	str	r1, [sp, #12]
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e7d9      	b.n	80091a2 <__cvt+0x7e>

080091ee <__exponent>:
 80091ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091f0:	2900      	cmp	r1, #0
 80091f2:	bfba      	itte	lt
 80091f4:	4249      	neglt	r1, r1
 80091f6:	232d      	movlt	r3, #45	@ 0x2d
 80091f8:	232b      	movge	r3, #43	@ 0x2b
 80091fa:	2909      	cmp	r1, #9
 80091fc:	7002      	strb	r2, [r0, #0]
 80091fe:	7043      	strb	r3, [r0, #1]
 8009200:	dd29      	ble.n	8009256 <__exponent+0x68>
 8009202:	f10d 0307 	add.w	r3, sp, #7
 8009206:	461d      	mov	r5, r3
 8009208:	270a      	movs	r7, #10
 800920a:	461a      	mov	r2, r3
 800920c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009210:	fb07 1416 	mls	r4, r7, r6, r1
 8009214:	3430      	adds	r4, #48	@ 0x30
 8009216:	f802 4c01 	strb.w	r4, [r2, #-1]
 800921a:	460c      	mov	r4, r1
 800921c:	2c63      	cmp	r4, #99	@ 0x63
 800921e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009222:	4631      	mov	r1, r6
 8009224:	dcf1      	bgt.n	800920a <__exponent+0x1c>
 8009226:	3130      	adds	r1, #48	@ 0x30
 8009228:	1e94      	subs	r4, r2, #2
 800922a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800922e:	1c41      	adds	r1, r0, #1
 8009230:	4623      	mov	r3, r4
 8009232:	42ab      	cmp	r3, r5
 8009234:	d30a      	bcc.n	800924c <__exponent+0x5e>
 8009236:	f10d 0309 	add.w	r3, sp, #9
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	42ac      	cmp	r4, r5
 800923e:	bf88      	it	hi
 8009240:	2300      	movhi	r3, #0
 8009242:	3302      	adds	r3, #2
 8009244:	4403      	add	r3, r0
 8009246:	1a18      	subs	r0, r3, r0
 8009248:	b003      	add	sp, #12
 800924a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800924c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009250:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009254:	e7ed      	b.n	8009232 <__exponent+0x44>
 8009256:	2330      	movs	r3, #48	@ 0x30
 8009258:	3130      	adds	r1, #48	@ 0x30
 800925a:	7083      	strb	r3, [r0, #2]
 800925c:	70c1      	strb	r1, [r0, #3]
 800925e:	1d03      	adds	r3, r0, #4
 8009260:	e7f1      	b.n	8009246 <__exponent+0x58>
	...

08009264 <_printf_float>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	b08d      	sub	sp, #52	@ 0x34
 800926a:	460c      	mov	r4, r1
 800926c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009270:	4616      	mov	r6, r2
 8009272:	461f      	mov	r7, r3
 8009274:	4605      	mov	r5, r0
 8009276:	f000 fcbb 	bl	8009bf0 <_localeconv_r>
 800927a:	6803      	ldr	r3, [r0, #0]
 800927c:	9304      	str	r3, [sp, #16]
 800927e:	4618      	mov	r0, r3
 8009280:	f7f6 fff6 	bl	8000270 <strlen>
 8009284:	2300      	movs	r3, #0
 8009286:	930a      	str	r3, [sp, #40]	@ 0x28
 8009288:	f8d8 3000 	ldr.w	r3, [r8]
 800928c:	9005      	str	r0, [sp, #20]
 800928e:	3307      	adds	r3, #7
 8009290:	f023 0307 	bic.w	r3, r3, #7
 8009294:	f103 0208 	add.w	r2, r3, #8
 8009298:	f894 a018 	ldrb.w	sl, [r4, #24]
 800929c:	f8d4 b000 	ldr.w	fp, [r4]
 80092a0:	f8c8 2000 	str.w	r2, [r8]
 80092a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80092ac:	9307      	str	r3, [sp, #28]
 80092ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80092b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80092b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ba:	4b9c      	ldr	r3, [pc, #624]	@ (800952c <_printf_float+0x2c8>)
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295
 80092c0:	f7f7 fc34 	bl	8000b2c <__aeabi_dcmpun>
 80092c4:	bb70      	cbnz	r0, 8009324 <_printf_float+0xc0>
 80092c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ca:	4b98      	ldr	r3, [pc, #608]	@ (800952c <_printf_float+0x2c8>)
 80092cc:	f04f 32ff 	mov.w	r2, #4294967295
 80092d0:	f7f7 fc0e 	bl	8000af0 <__aeabi_dcmple>
 80092d4:	bb30      	cbnz	r0, 8009324 <_printf_float+0xc0>
 80092d6:	2200      	movs	r2, #0
 80092d8:	2300      	movs	r3, #0
 80092da:	4640      	mov	r0, r8
 80092dc:	4649      	mov	r1, r9
 80092de:	f7f7 fbfd 	bl	8000adc <__aeabi_dcmplt>
 80092e2:	b110      	cbz	r0, 80092ea <_printf_float+0x86>
 80092e4:	232d      	movs	r3, #45	@ 0x2d
 80092e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092ea:	4a91      	ldr	r2, [pc, #580]	@ (8009530 <_printf_float+0x2cc>)
 80092ec:	4b91      	ldr	r3, [pc, #580]	@ (8009534 <_printf_float+0x2d0>)
 80092ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092f2:	bf94      	ite	ls
 80092f4:	4690      	movls	r8, r2
 80092f6:	4698      	movhi	r8, r3
 80092f8:	2303      	movs	r3, #3
 80092fa:	6123      	str	r3, [r4, #16]
 80092fc:	f02b 0304 	bic.w	r3, fp, #4
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	f04f 0900 	mov.w	r9, #0
 8009306:	9700      	str	r7, [sp, #0]
 8009308:	4633      	mov	r3, r6
 800930a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800930c:	4621      	mov	r1, r4
 800930e:	4628      	mov	r0, r5
 8009310:	f000 f9d2 	bl	80096b8 <_printf_common>
 8009314:	3001      	adds	r0, #1
 8009316:	f040 808d 	bne.w	8009434 <_printf_float+0x1d0>
 800931a:	f04f 30ff 	mov.w	r0, #4294967295
 800931e:	b00d      	add	sp, #52	@ 0x34
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	4642      	mov	r2, r8
 8009326:	464b      	mov	r3, r9
 8009328:	4640      	mov	r0, r8
 800932a:	4649      	mov	r1, r9
 800932c:	f7f7 fbfe 	bl	8000b2c <__aeabi_dcmpun>
 8009330:	b140      	cbz	r0, 8009344 <_printf_float+0xe0>
 8009332:	464b      	mov	r3, r9
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfbc      	itt	lt
 8009338:	232d      	movlt	r3, #45	@ 0x2d
 800933a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800933e:	4a7e      	ldr	r2, [pc, #504]	@ (8009538 <_printf_float+0x2d4>)
 8009340:	4b7e      	ldr	r3, [pc, #504]	@ (800953c <_printf_float+0x2d8>)
 8009342:	e7d4      	b.n	80092ee <_printf_float+0x8a>
 8009344:	6863      	ldr	r3, [r4, #4]
 8009346:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800934a:	9206      	str	r2, [sp, #24]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	d13b      	bne.n	80093c8 <_printf_float+0x164>
 8009350:	2306      	movs	r3, #6
 8009352:	6063      	str	r3, [r4, #4]
 8009354:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009358:	2300      	movs	r3, #0
 800935a:	6022      	str	r2, [r4, #0]
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009360:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009364:	ab09      	add	r3, sp, #36	@ 0x24
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	6861      	ldr	r1, [r4, #4]
 800936a:	ec49 8b10 	vmov	d0, r8, r9
 800936e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009372:	4628      	mov	r0, r5
 8009374:	f7ff fed6 	bl	8009124 <__cvt>
 8009378:	9b06      	ldr	r3, [sp, #24]
 800937a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800937c:	2b47      	cmp	r3, #71	@ 0x47
 800937e:	4680      	mov	r8, r0
 8009380:	d129      	bne.n	80093d6 <_printf_float+0x172>
 8009382:	1cc8      	adds	r0, r1, #3
 8009384:	db02      	blt.n	800938c <_printf_float+0x128>
 8009386:	6863      	ldr	r3, [r4, #4]
 8009388:	4299      	cmp	r1, r3
 800938a:	dd41      	ble.n	8009410 <_printf_float+0x1ac>
 800938c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009390:	fa5f fa8a 	uxtb.w	sl, sl
 8009394:	3901      	subs	r1, #1
 8009396:	4652      	mov	r2, sl
 8009398:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800939c:	9109      	str	r1, [sp, #36]	@ 0x24
 800939e:	f7ff ff26 	bl	80091ee <__exponent>
 80093a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093a4:	1813      	adds	r3, r2, r0
 80093a6:	2a01      	cmp	r2, #1
 80093a8:	4681      	mov	r9, r0
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	dc02      	bgt.n	80093b4 <_printf_float+0x150>
 80093ae:	6822      	ldr	r2, [r4, #0]
 80093b0:	07d2      	lsls	r2, r2, #31
 80093b2:	d501      	bpl.n	80093b8 <_printf_float+0x154>
 80093b4:	3301      	adds	r3, #1
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0a2      	beq.n	8009306 <_printf_float+0xa2>
 80093c0:	232d      	movs	r3, #45	@ 0x2d
 80093c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093c6:	e79e      	b.n	8009306 <_printf_float+0xa2>
 80093c8:	9a06      	ldr	r2, [sp, #24]
 80093ca:	2a47      	cmp	r2, #71	@ 0x47
 80093cc:	d1c2      	bne.n	8009354 <_printf_float+0xf0>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1c0      	bne.n	8009354 <_printf_float+0xf0>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e7bd      	b.n	8009352 <_printf_float+0xee>
 80093d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093da:	d9db      	bls.n	8009394 <_printf_float+0x130>
 80093dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093e0:	d118      	bne.n	8009414 <_printf_float+0x1b0>
 80093e2:	2900      	cmp	r1, #0
 80093e4:	6863      	ldr	r3, [r4, #4]
 80093e6:	dd0b      	ble.n	8009400 <_printf_float+0x19c>
 80093e8:	6121      	str	r1, [r4, #16]
 80093ea:	b913      	cbnz	r3, 80093f2 <_printf_float+0x18e>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	07d0      	lsls	r0, r2, #31
 80093f0:	d502      	bpl.n	80093f8 <_printf_float+0x194>
 80093f2:	3301      	adds	r3, #1
 80093f4:	440b      	add	r3, r1
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093fa:	f04f 0900 	mov.w	r9, #0
 80093fe:	e7db      	b.n	80093b8 <_printf_float+0x154>
 8009400:	b913      	cbnz	r3, 8009408 <_printf_float+0x1a4>
 8009402:	6822      	ldr	r2, [r4, #0]
 8009404:	07d2      	lsls	r2, r2, #31
 8009406:	d501      	bpl.n	800940c <_printf_float+0x1a8>
 8009408:	3302      	adds	r3, #2
 800940a:	e7f4      	b.n	80093f6 <_printf_float+0x192>
 800940c:	2301      	movs	r3, #1
 800940e:	e7f2      	b.n	80093f6 <_printf_float+0x192>
 8009410:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009416:	4299      	cmp	r1, r3
 8009418:	db05      	blt.n	8009426 <_printf_float+0x1c2>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	6121      	str	r1, [r4, #16]
 800941e:	07d8      	lsls	r0, r3, #31
 8009420:	d5ea      	bpl.n	80093f8 <_printf_float+0x194>
 8009422:	1c4b      	adds	r3, r1, #1
 8009424:	e7e7      	b.n	80093f6 <_printf_float+0x192>
 8009426:	2900      	cmp	r1, #0
 8009428:	bfd4      	ite	le
 800942a:	f1c1 0202 	rsble	r2, r1, #2
 800942e:	2201      	movgt	r2, #1
 8009430:	4413      	add	r3, r2
 8009432:	e7e0      	b.n	80093f6 <_printf_float+0x192>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	055a      	lsls	r2, r3, #21
 8009438:	d407      	bmi.n	800944a <_printf_float+0x1e6>
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	4642      	mov	r2, r8
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	d12b      	bne.n	80094a0 <_printf_float+0x23c>
 8009448:	e767      	b.n	800931a <_printf_float+0xb6>
 800944a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800944e:	f240 80dd 	bls.w	800960c <_printf_float+0x3a8>
 8009452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009456:	2200      	movs	r2, #0
 8009458:	2300      	movs	r3, #0
 800945a:	f7f7 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800945e:	2800      	cmp	r0, #0
 8009460:	d033      	beq.n	80094ca <_printf_float+0x266>
 8009462:	4a37      	ldr	r2, [pc, #220]	@ (8009540 <_printf_float+0x2dc>)
 8009464:	2301      	movs	r3, #1
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	f43f af54 	beq.w	800931a <_printf_float+0xb6>
 8009472:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009476:	4543      	cmp	r3, r8
 8009478:	db02      	blt.n	8009480 <_printf_float+0x21c>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	07d8      	lsls	r0, r3, #31
 800947e:	d50f      	bpl.n	80094a0 <_printf_float+0x23c>
 8009480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009484:	4631      	mov	r1, r6
 8009486:	4628      	mov	r0, r5
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	f43f af45 	beq.w	800931a <_printf_float+0xb6>
 8009490:	f04f 0900 	mov.w	r9, #0
 8009494:	f108 38ff 	add.w	r8, r8, #4294967295
 8009498:	f104 0a1a 	add.w	sl, r4, #26
 800949c:	45c8      	cmp	r8, r9
 800949e:	dc09      	bgt.n	80094b4 <_printf_float+0x250>
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	079b      	lsls	r3, r3, #30
 80094a4:	f100 8103 	bmi.w	80096ae <_printf_float+0x44a>
 80094a8:	68e0      	ldr	r0, [r4, #12]
 80094aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094ac:	4298      	cmp	r0, r3
 80094ae:	bfb8      	it	lt
 80094b0:	4618      	movlt	r0, r3
 80094b2:	e734      	b.n	800931e <_printf_float+0xba>
 80094b4:	2301      	movs	r3, #1
 80094b6:	4652      	mov	r2, sl
 80094b8:	4631      	mov	r1, r6
 80094ba:	4628      	mov	r0, r5
 80094bc:	47b8      	blx	r7
 80094be:	3001      	adds	r0, #1
 80094c0:	f43f af2b 	beq.w	800931a <_printf_float+0xb6>
 80094c4:	f109 0901 	add.w	r9, r9, #1
 80094c8:	e7e8      	b.n	800949c <_printf_float+0x238>
 80094ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dc39      	bgt.n	8009544 <_printf_float+0x2e0>
 80094d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009540 <_printf_float+0x2dc>)
 80094d2:	2301      	movs	r3, #1
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f af1d 	beq.w	800931a <_printf_float+0xb6>
 80094e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094e4:	ea59 0303 	orrs.w	r3, r9, r3
 80094e8:	d102      	bne.n	80094f0 <_printf_float+0x28c>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	07d9      	lsls	r1, r3, #31
 80094ee:	d5d7      	bpl.n	80094a0 <_printf_float+0x23c>
 80094f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094f4:	4631      	mov	r1, r6
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	f43f af0d 	beq.w	800931a <_printf_float+0xb6>
 8009500:	f04f 0a00 	mov.w	sl, #0
 8009504:	f104 0b1a 	add.w	fp, r4, #26
 8009508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800950a:	425b      	negs	r3, r3
 800950c:	4553      	cmp	r3, sl
 800950e:	dc01      	bgt.n	8009514 <_printf_float+0x2b0>
 8009510:	464b      	mov	r3, r9
 8009512:	e793      	b.n	800943c <_printf_float+0x1d8>
 8009514:	2301      	movs	r3, #1
 8009516:	465a      	mov	r2, fp
 8009518:	4631      	mov	r1, r6
 800951a:	4628      	mov	r0, r5
 800951c:	47b8      	blx	r7
 800951e:	3001      	adds	r0, #1
 8009520:	f43f aefb 	beq.w	800931a <_printf_float+0xb6>
 8009524:	f10a 0a01 	add.w	sl, sl, #1
 8009528:	e7ee      	b.n	8009508 <_printf_float+0x2a4>
 800952a:	bf00      	nop
 800952c:	7fefffff 	.word	0x7fefffff
 8009530:	0800ba98 	.word	0x0800ba98
 8009534:	0800ba9c 	.word	0x0800ba9c
 8009538:	0800baa0 	.word	0x0800baa0
 800953c:	0800baa4 	.word	0x0800baa4
 8009540:	0800baa8 	.word	0x0800baa8
 8009544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800954a:	4553      	cmp	r3, sl
 800954c:	bfa8      	it	ge
 800954e:	4653      	movge	r3, sl
 8009550:	2b00      	cmp	r3, #0
 8009552:	4699      	mov	r9, r3
 8009554:	dc36      	bgt.n	80095c4 <_printf_float+0x360>
 8009556:	f04f 0b00 	mov.w	fp, #0
 800955a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800955e:	f104 021a 	add.w	r2, r4, #26
 8009562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009564:	9306      	str	r3, [sp, #24]
 8009566:	eba3 0309 	sub.w	r3, r3, r9
 800956a:	455b      	cmp	r3, fp
 800956c:	dc31      	bgt.n	80095d2 <_printf_float+0x36e>
 800956e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009570:	459a      	cmp	sl, r3
 8009572:	dc3a      	bgt.n	80095ea <_printf_float+0x386>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07da      	lsls	r2, r3, #31
 8009578:	d437      	bmi.n	80095ea <_printf_float+0x386>
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	ebaa 0903 	sub.w	r9, sl, r3
 8009580:	9b06      	ldr	r3, [sp, #24]
 8009582:	ebaa 0303 	sub.w	r3, sl, r3
 8009586:	4599      	cmp	r9, r3
 8009588:	bfa8      	it	ge
 800958a:	4699      	movge	r9, r3
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	dc33      	bgt.n	80095fa <_printf_float+0x396>
 8009592:	f04f 0800 	mov.w	r8, #0
 8009596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800959a:	f104 0b1a 	add.w	fp, r4, #26
 800959e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a0:	ebaa 0303 	sub.w	r3, sl, r3
 80095a4:	eba3 0309 	sub.w	r3, r3, r9
 80095a8:	4543      	cmp	r3, r8
 80095aa:	f77f af79 	ble.w	80094a0 <_printf_float+0x23c>
 80095ae:	2301      	movs	r3, #1
 80095b0:	465a      	mov	r2, fp
 80095b2:	4631      	mov	r1, r6
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b8      	blx	r7
 80095b8:	3001      	adds	r0, #1
 80095ba:	f43f aeae 	beq.w	800931a <_printf_float+0xb6>
 80095be:	f108 0801 	add.w	r8, r8, #1
 80095c2:	e7ec      	b.n	800959e <_printf_float+0x33a>
 80095c4:	4642      	mov	r2, r8
 80095c6:	4631      	mov	r1, r6
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	d1c2      	bne.n	8009556 <_printf_float+0x2f2>
 80095d0:	e6a3      	b.n	800931a <_printf_float+0xb6>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	9206      	str	r2, [sp, #24]
 80095da:	47b8      	blx	r7
 80095dc:	3001      	adds	r0, #1
 80095de:	f43f ae9c 	beq.w	800931a <_printf_float+0xb6>
 80095e2:	9a06      	ldr	r2, [sp, #24]
 80095e4:	f10b 0b01 	add.w	fp, fp, #1
 80095e8:	e7bb      	b.n	8009562 <_printf_float+0x2fe>
 80095ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ee:	4631      	mov	r1, r6
 80095f0:	4628      	mov	r0, r5
 80095f2:	47b8      	blx	r7
 80095f4:	3001      	adds	r0, #1
 80095f6:	d1c0      	bne.n	800957a <_printf_float+0x316>
 80095f8:	e68f      	b.n	800931a <_printf_float+0xb6>
 80095fa:	9a06      	ldr	r2, [sp, #24]
 80095fc:	464b      	mov	r3, r9
 80095fe:	4442      	add	r2, r8
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	d1c3      	bne.n	8009592 <_printf_float+0x32e>
 800960a:	e686      	b.n	800931a <_printf_float+0xb6>
 800960c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009610:	f1ba 0f01 	cmp.w	sl, #1
 8009614:	dc01      	bgt.n	800961a <_printf_float+0x3b6>
 8009616:	07db      	lsls	r3, r3, #31
 8009618:	d536      	bpl.n	8009688 <_printf_float+0x424>
 800961a:	2301      	movs	r3, #1
 800961c:	4642      	mov	r2, r8
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f ae78 	beq.w	800931a <_printf_float+0xb6>
 800962a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	f43f ae70 	beq.w	800931a <_printf_float+0xb6>
 800963a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800963e:	2200      	movs	r2, #0
 8009640:	2300      	movs	r3, #0
 8009642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009646:	f7f7 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800964a:	b9c0      	cbnz	r0, 800967e <_printf_float+0x41a>
 800964c:	4653      	mov	r3, sl
 800964e:	f108 0201 	add.w	r2, r8, #1
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	d10c      	bne.n	8009676 <_printf_float+0x412>
 800965c:	e65d      	b.n	800931a <_printf_float+0xb6>
 800965e:	2301      	movs	r3, #1
 8009660:	465a      	mov	r2, fp
 8009662:	4631      	mov	r1, r6
 8009664:	4628      	mov	r0, r5
 8009666:	47b8      	blx	r7
 8009668:	3001      	adds	r0, #1
 800966a:	f43f ae56 	beq.w	800931a <_printf_float+0xb6>
 800966e:	f108 0801 	add.w	r8, r8, #1
 8009672:	45d0      	cmp	r8, sl
 8009674:	dbf3      	blt.n	800965e <_printf_float+0x3fa>
 8009676:	464b      	mov	r3, r9
 8009678:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800967c:	e6df      	b.n	800943e <_printf_float+0x1da>
 800967e:	f04f 0800 	mov.w	r8, #0
 8009682:	f104 0b1a 	add.w	fp, r4, #26
 8009686:	e7f4      	b.n	8009672 <_printf_float+0x40e>
 8009688:	2301      	movs	r3, #1
 800968a:	4642      	mov	r2, r8
 800968c:	e7e1      	b.n	8009652 <_printf_float+0x3ee>
 800968e:	2301      	movs	r3, #1
 8009690:	464a      	mov	r2, r9
 8009692:	4631      	mov	r1, r6
 8009694:	4628      	mov	r0, r5
 8009696:	47b8      	blx	r7
 8009698:	3001      	adds	r0, #1
 800969a:	f43f ae3e 	beq.w	800931a <_printf_float+0xb6>
 800969e:	f108 0801 	add.w	r8, r8, #1
 80096a2:	68e3      	ldr	r3, [r4, #12]
 80096a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096a6:	1a5b      	subs	r3, r3, r1
 80096a8:	4543      	cmp	r3, r8
 80096aa:	dcf0      	bgt.n	800968e <_printf_float+0x42a>
 80096ac:	e6fc      	b.n	80094a8 <_printf_float+0x244>
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	f104 0919 	add.w	r9, r4, #25
 80096b6:	e7f4      	b.n	80096a2 <_printf_float+0x43e>

080096b8 <_printf_common>:
 80096b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096bc:	4616      	mov	r6, r2
 80096be:	4698      	mov	r8, r3
 80096c0:	688a      	ldr	r2, [r1, #8]
 80096c2:	690b      	ldr	r3, [r1, #16]
 80096c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	bfb8      	it	lt
 80096cc:	4613      	movlt	r3, r2
 80096ce:	6033      	str	r3, [r6, #0]
 80096d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096d4:	4607      	mov	r7, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	b10a      	cbz	r2, 80096de <_printf_common+0x26>
 80096da:	3301      	adds	r3, #1
 80096dc:	6033      	str	r3, [r6, #0]
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	0699      	lsls	r1, r3, #26
 80096e2:	bf42      	ittt	mi
 80096e4:	6833      	ldrmi	r3, [r6, #0]
 80096e6:	3302      	addmi	r3, #2
 80096e8:	6033      	strmi	r3, [r6, #0]
 80096ea:	6825      	ldr	r5, [r4, #0]
 80096ec:	f015 0506 	ands.w	r5, r5, #6
 80096f0:	d106      	bne.n	8009700 <_printf_common+0x48>
 80096f2:	f104 0a19 	add.w	sl, r4, #25
 80096f6:	68e3      	ldr	r3, [r4, #12]
 80096f8:	6832      	ldr	r2, [r6, #0]
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	42ab      	cmp	r3, r5
 80096fe:	dc26      	bgt.n	800974e <_printf_common+0x96>
 8009700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009704:	6822      	ldr	r2, [r4, #0]
 8009706:	3b00      	subs	r3, #0
 8009708:	bf18      	it	ne
 800970a:	2301      	movne	r3, #1
 800970c:	0692      	lsls	r2, r2, #26
 800970e:	d42b      	bmi.n	8009768 <_printf_common+0xb0>
 8009710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009714:	4641      	mov	r1, r8
 8009716:	4638      	mov	r0, r7
 8009718:	47c8      	blx	r9
 800971a:	3001      	adds	r0, #1
 800971c:	d01e      	beq.n	800975c <_printf_common+0xa4>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	6922      	ldr	r2, [r4, #16]
 8009722:	f003 0306 	and.w	r3, r3, #6
 8009726:	2b04      	cmp	r3, #4
 8009728:	bf02      	ittt	eq
 800972a:	68e5      	ldreq	r5, [r4, #12]
 800972c:	6833      	ldreq	r3, [r6, #0]
 800972e:	1aed      	subeq	r5, r5, r3
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	bf0c      	ite	eq
 8009734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009738:	2500      	movne	r5, #0
 800973a:	4293      	cmp	r3, r2
 800973c:	bfc4      	itt	gt
 800973e:	1a9b      	subgt	r3, r3, r2
 8009740:	18ed      	addgt	r5, r5, r3
 8009742:	2600      	movs	r6, #0
 8009744:	341a      	adds	r4, #26
 8009746:	42b5      	cmp	r5, r6
 8009748:	d11a      	bne.n	8009780 <_printf_common+0xc8>
 800974a:	2000      	movs	r0, #0
 800974c:	e008      	b.n	8009760 <_printf_common+0xa8>
 800974e:	2301      	movs	r3, #1
 8009750:	4652      	mov	r2, sl
 8009752:	4641      	mov	r1, r8
 8009754:	4638      	mov	r0, r7
 8009756:	47c8      	blx	r9
 8009758:	3001      	adds	r0, #1
 800975a:	d103      	bne.n	8009764 <_printf_common+0xac>
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009764:	3501      	adds	r5, #1
 8009766:	e7c6      	b.n	80096f6 <_printf_common+0x3e>
 8009768:	18e1      	adds	r1, r4, r3
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	2030      	movs	r0, #48	@ 0x30
 800976e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009772:	4422      	add	r2, r4
 8009774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800977c:	3302      	adds	r3, #2
 800977e:	e7c7      	b.n	8009710 <_printf_common+0x58>
 8009780:	2301      	movs	r3, #1
 8009782:	4622      	mov	r2, r4
 8009784:	4641      	mov	r1, r8
 8009786:	4638      	mov	r0, r7
 8009788:	47c8      	blx	r9
 800978a:	3001      	adds	r0, #1
 800978c:	d0e6      	beq.n	800975c <_printf_common+0xa4>
 800978e:	3601      	adds	r6, #1
 8009790:	e7d9      	b.n	8009746 <_printf_common+0x8e>
	...

08009794 <_printf_i>:
 8009794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	7e0f      	ldrb	r7, [r1, #24]
 800979a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800979c:	2f78      	cmp	r7, #120	@ 0x78
 800979e:	4691      	mov	r9, r2
 80097a0:	4680      	mov	r8, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	469a      	mov	sl, r3
 80097a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097aa:	d807      	bhi.n	80097bc <_printf_i+0x28>
 80097ac:	2f62      	cmp	r7, #98	@ 0x62
 80097ae:	d80a      	bhi.n	80097c6 <_printf_i+0x32>
 80097b0:	2f00      	cmp	r7, #0
 80097b2:	f000 80d2 	beq.w	800995a <_printf_i+0x1c6>
 80097b6:	2f58      	cmp	r7, #88	@ 0x58
 80097b8:	f000 80b9 	beq.w	800992e <_printf_i+0x19a>
 80097bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097c4:	e03a      	b.n	800983c <_printf_i+0xa8>
 80097c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097ca:	2b15      	cmp	r3, #21
 80097cc:	d8f6      	bhi.n	80097bc <_printf_i+0x28>
 80097ce:	a101      	add	r1, pc, #4	@ (adr r1, 80097d4 <_printf_i+0x40>)
 80097d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097d4:	0800982d 	.word	0x0800982d
 80097d8:	08009841 	.word	0x08009841
 80097dc:	080097bd 	.word	0x080097bd
 80097e0:	080097bd 	.word	0x080097bd
 80097e4:	080097bd 	.word	0x080097bd
 80097e8:	080097bd 	.word	0x080097bd
 80097ec:	08009841 	.word	0x08009841
 80097f0:	080097bd 	.word	0x080097bd
 80097f4:	080097bd 	.word	0x080097bd
 80097f8:	080097bd 	.word	0x080097bd
 80097fc:	080097bd 	.word	0x080097bd
 8009800:	08009941 	.word	0x08009941
 8009804:	0800986b 	.word	0x0800986b
 8009808:	080098fb 	.word	0x080098fb
 800980c:	080097bd 	.word	0x080097bd
 8009810:	080097bd 	.word	0x080097bd
 8009814:	08009963 	.word	0x08009963
 8009818:	080097bd 	.word	0x080097bd
 800981c:	0800986b 	.word	0x0800986b
 8009820:	080097bd 	.word	0x080097bd
 8009824:	080097bd 	.word	0x080097bd
 8009828:	08009903 	.word	0x08009903
 800982c:	6833      	ldr	r3, [r6, #0]
 800982e:	1d1a      	adds	r2, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6032      	str	r2, [r6, #0]
 8009834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800983c:	2301      	movs	r3, #1
 800983e:	e09d      	b.n	800997c <_printf_i+0x1e8>
 8009840:	6833      	ldr	r3, [r6, #0]
 8009842:	6820      	ldr	r0, [r4, #0]
 8009844:	1d19      	adds	r1, r3, #4
 8009846:	6031      	str	r1, [r6, #0]
 8009848:	0606      	lsls	r6, r0, #24
 800984a:	d501      	bpl.n	8009850 <_printf_i+0xbc>
 800984c:	681d      	ldr	r5, [r3, #0]
 800984e:	e003      	b.n	8009858 <_printf_i+0xc4>
 8009850:	0645      	lsls	r5, r0, #25
 8009852:	d5fb      	bpl.n	800984c <_printf_i+0xb8>
 8009854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009858:	2d00      	cmp	r5, #0
 800985a:	da03      	bge.n	8009864 <_printf_i+0xd0>
 800985c:	232d      	movs	r3, #45	@ 0x2d
 800985e:	426d      	negs	r5, r5
 8009860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009864:	4859      	ldr	r0, [pc, #356]	@ (80099cc <_printf_i+0x238>)
 8009866:	230a      	movs	r3, #10
 8009868:	e011      	b.n	800988e <_printf_i+0xfa>
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	6833      	ldr	r3, [r6, #0]
 800986e:	0608      	lsls	r0, r1, #24
 8009870:	f853 5b04 	ldr.w	r5, [r3], #4
 8009874:	d402      	bmi.n	800987c <_printf_i+0xe8>
 8009876:	0649      	lsls	r1, r1, #25
 8009878:	bf48      	it	mi
 800987a:	b2ad      	uxthmi	r5, r5
 800987c:	2f6f      	cmp	r7, #111	@ 0x6f
 800987e:	4853      	ldr	r0, [pc, #332]	@ (80099cc <_printf_i+0x238>)
 8009880:	6033      	str	r3, [r6, #0]
 8009882:	bf14      	ite	ne
 8009884:	230a      	movne	r3, #10
 8009886:	2308      	moveq	r3, #8
 8009888:	2100      	movs	r1, #0
 800988a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800988e:	6866      	ldr	r6, [r4, #4]
 8009890:	60a6      	str	r6, [r4, #8]
 8009892:	2e00      	cmp	r6, #0
 8009894:	bfa2      	ittt	ge
 8009896:	6821      	ldrge	r1, [r4, #0]
 8009898:	f021 0104 	bicge.w	r1, r1, #4
 800989c:	6021      	strge	r1, [r4, #0]
 800989e:	b90d      	cbnz	r5, 80098a4 <_printf_i+0x110>
 80098a0:	2e00      	cmp	r6, #0
 80098a2:	d04b      	beq.n	800993c <_printf_i+0x1a8>
 80098a4:	4616      	mov	r6, r2
 80098a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80098aa:	fb03 5711 	mls	r7, r3, r1, r5
 80098ae:	5dc7      	ldrb	r7, [r0, r7]
 80098b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098b4:	462f      	mov	r7, r5
 80098b6:	42bb      	cmp	r3, r7
 80098b8:	460d      	mov	r5, r1
 80098ba:	d9f4      	bls.n	80098a6 <_printf_i+0x112>
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d10b      	bne.n	80098d8 <_printf_i+0x144>
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	07df      	lsls	r7, r3, #31
 80098c4:	d508      	bpl.n	80098d8 <_printf_i+0x144>
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	6861      	ldr	r1, [r4, #4]
 80098ca:	4299      	cmp	r1, r3
 80098cc:	bfde      	ittt	le
 80098ce:	2330      	movle	r3, #48	@ 0x30
 80098d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098d8:	1b92      	subs	r2, r2, r6
 80098da:	6122      	str	r2, [r4, #16]
 80098dc:	f8cd a000 	str.w	sl, [sp]
 80098e0:	464b      	mov	r3, r9
 80098e2:	aa03      	add	r2, sp, #12
 80098e4:	4621      	mov	r1, r4
 80098e6:	4640      	mov	r0, r8
 80098e8:	f7ff fee6 	bl	80096b8 <_printf_common>
 80098ec:	3001      	adds	r0, #1
 80098ee:	d14a      	bne.n	8009986 <_printf_i+0x1f2>
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295
 80098f4:	b004      	add	sp, #16
 80098f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	f043 0320 	orr.w	r3, r3, #32
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	4833      	ldr	r0, [pc, #204]	@ (80099d0 <_printf_i+0x23c>)
 8009904:	2778      	movs	r7, #120	@ 0x78
 8009906:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	6831      	ldr	r1, [r6, #0]
 800990e:	061f      	lsls	r7, r3, #24
 8009910:	f851 5b04 	ldr.w	r5, [r1], #4
 8009914:	d402      	bmi.n	800991c <_printf_i+0x188>
 8009916:	065f      	lsls	r7, r3, #25
 8009918:	bf48      	it	mi
 800991a:	b2ad      	uxthmi	r5, r5
 800991c:	6031      	str	r1, [r6, #0]
 800991e:	07d9      	lsls	r1, r3, #31
 8009920:	bf44      	itt	mi
 8009922:	f043 0320 	orrmi.w	r3, r3, #32
 8009926:	6023      	strmi	r3, [r4, #0]
 8009928:	b11d      	cbz	r5, 8009932 <_printf_i+0x19e>
 800992a:	2310      	movs	r3, #16
 800992c:	e7ac      	b.n	8009888 <_printf_i+0xf4>
 800992e:	4827      	ldr	r0, [pc, #156]	@ (80099cc <_printf_i+0x238>)
 8009930:	e7e9      	b.n	8009906 <_printf_i+0x172>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	f023 0320 	bic.w	r3, r3, #32
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	e7f6      	b.n	800992a <_printf_i+0x196>
 800993c:	4616      	mov	r6, r2
 800993e:	e7bd      	b.n	80098bc <_printf_i+0x128>
 8009940:	6833      	ldr	r3, [r6, #0]
 8009942:	6825      	ldr	r5, [r4, #0]
 8009944:	6961      	ldr	r1, [r4, #20]
 8009946:	1d18      	adds	r0, r3, #4
 8009948:	6030      	str	r0, [r6, #0]
 800994a:	062e      	lsls	r6, r5, #24
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	d501      	bpl.n	8009954 <_printf_i+0x1c0>
 8009950:	6019      	str	r1, [r3, #0]
 8009952:	e002      	b.n	800995a <_printf_i+0x1c6>
 8009954:	0668      	lsls	r0, r5, #25
 8009956:	d5fb      	bpl.n	8009950 <_printf_i+0x1bc>
 8009958:	8019      	strh	r1, [r3, #0]
 800995a:	2300      	movs	r3, #0
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	4616      	mov	r6, r2
 8009960:	e7bc      	b.n	80098dc <_printf_i+0x148>
 8009962:	6833      	ldr	r3, [r6, #0]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	6032      	str	r2, [r6, #0]
 8009968:	681e      	ldr	r6, [r3, #0]
 800996a:	6862      	ldr	r2, [r4, #4]
 800996c:	2100      	movs	r1, #0
 800996e:	4630      	mov	r0, r6
 8009970:	f7f6 fc2e 	bl	80001d0 <memchr>
 8009974:	b108      	cbz	r0, 800997a <_printf_i+0x1e6>
 8009976:	1b80      	subs	r0, r0, r6
 8009978:	6060      	str	r0, [r4, #4]
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	2300      	movs	r3, #0
 8009980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009984:	e7aa      	b.n	80098dc <_printf_i+0x148>
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	4632      	mov	r2, r6
 800998a:	4649      	mov	r1, r9
 800998c:	4640      	mov	r0, r8
 800998e:	47d0      	blx	sl
 8009990:	3001      	adds	r0, #1
 8009992:	d0ad      	beq.n	80098f0 <_printf_i+0x15c>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	079b      	lsls	r3, r3, #30
 8009998:	d413      	bmi.n	80099c2 <_printf_i+0x22e>
 800999a:	68e0      	ldr	r0, [r4, #12]
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	4298      	cmp	r0, r3
 80099a0:	bfb8      	it	lt
 80099a2:	4618      	movlt	r0, r3
 80099a4:	e7a6      	b.n	80098f4 <_printf_i+0x160>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4632      	mov	r2, r6
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	47d0      	blx	sl
 80099b0:	3001      	adds	r0, #1
 80099b2:	d09d      	beq.n	80098f0 <_printf_i+0x15c>
 80099b4:	3501      	adds	r5, #1
 80099b6:	68e3      	ldr	r3, [r4, #12]
 80099b8:	9903      	ldr	r1, [sp, #12]
 80099ba:	1a5b      	subs	r3, r3, r1
 80099bc:	42ab      	cmp	r3, r5
 80099be:	dcf2      	bgt.n	80099a6 <_printf_i+0x212>
 80099c0:	e7eb      	b.n	800999a <_printf_i+0x206>
 80099c2:	2500      	movs	r5, #0
 80099c4:	f104 0619 	add.w	r6, r4, #25
 80099c8:	e7f5      	b.n	80099b6 <_printf_i+0x222>
 80099ca:	bf00      	nop
 80099cc:	0800baaa 	.word	0x0800baaa
 80099d0:	0800babb 	.word	0x0800babb

080099d4 <std>:
 80099d4:	2300      	movs	r3, #0
 80099d6:	b510      	push	{r4, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	e9c0 3300 	strd	r3, r3, [r0]
 80099de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099e2:	6083      	str	r3, [r0, #8]
 80099e4:	8181      	strh	r1, [r0, #12]
 80099e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80099e8:	81c2      	strh	r2, [r0, #14]
 80099ea:	6183      	str	r3, [r0, #24]
 80099ec:	4619      	mov	r1, r3
 80099ee:	2208      	movs	r2, #8
 80099f0:	305c      	adds	r0, #92	@ 0x5c
 80099f2:	f000 f8f4 	bl	8009bde <memset>
 80099f6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a2c <std+0x58>)
 80099f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80099fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009a30 <std+0x5c>)
 80099fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009a34 <std+0x60>)
 8009a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a02:	4b0d      	ldr	r3, [pc, #52]	@ (8009a38 <std+0x64>)
 8009a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <std+0x68>)
 8009a08:	6224      	str	r4, [r4, #32]
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d006      	beq.n	8009a1c <std+0x48>
 8009a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a12:	4294      	cmp	r4, r2
 8009a14:	d002      	beq.n	8009a1c <std+0x48>
 8009a16:	33d0      	adds	r3, #208	@ 0xd0
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d105      	bne.n	8009a28 <std+0x54>
 8009a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a24:	f000 b958 	b.w	8009cd8 <__retarget_lock_init_recursive>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	bf00      	nop
 8009a2c:	08009b59 	.word	0x08009b59
 8009a30:	08009b7b 	.word	0x08009b7b
 8009a34:	08009bb3 	.word	0x08009bb3
 8009a38:	08009bd7 	.word	0x08009bd7
 8009a3c:	20006008 	.word	0x20006008

08009a40 <stdio_exit_handler>:
 8009a40:	4a02      	ldr	r2, [pc, #8]	@ (8009a4c <stdio_exit_handler+0xc>)
 8009a42:	4903      	ldr	r1, [pc, #12]	@ (8009a50 <stdio_exit_handler+0x10>)
 8009a44:	4803      	ldr	r0, [pc, #12]	@ (8009a54 <stdio_exit_handler+0x14>)
 8009a46:	f000 b869 	b.w	8009b1c <_fwalk_sglue>
 8009a4a:	bf00      	nop
 8009a4c:	200000fc 	.word	0x200000fc
 8009a50:	0800b385 	.word	0x0800b385
 8009a54:	2000010c 	.word	0x2000010c

08009a58 <cleanup_stdio>:
 8009a58:	6841      	ldr	r1, [r0, #4]
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a8c <cleanup_stdio+0x34>)
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	4604      	mov	r4, r0
 8009a62:	d001      	beq.n	8009a68 <cleanup_stdio+0x10>
 8009a64:	f001 fc8e 	bl	800b384 <_fflush_r>
 8009a68:	68a1      	ldr	r1, [r4, #8]
 8009a6a:	4b09      	ldr	r3, [pc, #36]	@ (8009a90 <cleanup_stdio+0x38>)
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d002      	beq.n	8009a76 <cleanup_stdio+0x1e>
 8009a70:	4620      	mov	r0, r4
 8009a72:	f001 fc87 	bl	800b384 <_fflush_r>
 8009a76:	68e1      	ldr	r1, [r4, #12]
 8009a78:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <cleanup_stdio+0x3c>)
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d004      	beq.n	8009a88 <cleanup_stdio+0x30>
 8009a7e:	4620      	mov	r0, r4
 8009a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a84:	f001 bc7e 	b.w	800b384 <_fflush_r>
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20006008 	.word	0x20006008
 8009a90:	20006070 	.word	0x20006070
 8009a94:	200060d8 	.word	0x200060d8

08009a98 <global_stdio_init.part.0>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac8 <global_stdio_init.part.0+0x30>)
 8009a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8009acc <global_stdio_init.part.0+0x34>)
 8009a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ad0 <global_stdio_init.part.0+0x38>)
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2104      	movs	r1, #4
 8009aa8:	f7ff ff94 	bl	80099d4 <std>
 8009aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	2109      	movs	r1, #9
 8009ab4:	f7ff ff8e 	bl	80099d4 <std>
 8009ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009abc:	2202      	movs	r2, #2
 8009abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac2:	2112      	movs	r1, #18
 8009ac4:	f7ff bf86 	b.w	80099d4 <std>
 8009ac8:	20006140 	.word	0x20006140
 8009acc:	20006008 	.word	0x20006008
 8009ad0:	08009a41 	.word	0x08009a41

08009ad4 <__sfp_lock_acquire>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	@ (8009adc <__sfp_lock_acquire+0x8>)
 8009ad6:	f000 b900 	b.w	8009cda <__retarget_lock_acquire_recursive>
 8009ada:	bf00      	nop
 8009adc:	20006149 	.word	0x20006149

08009ae0 <__sfp_lock_release>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	@ (8009ae8 <__sfp_lock_release+0x8>)
 8009ae2:	f000 b8fb 	b.w	8009cdc <__retarget_lock_release_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20006149 	.word	0x20006149

08009aec <__sinit>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	4604      	mov	r4, r0
 8009af0:	f7ff fff0 	bl	8009ad4 <__sfp_lock_acquire>
 8009af4:	6a23      	ldr	r3, [r4, #32]
 8009af6:	b11b      	cbz	r3, 8009b00 <__sinit+0x14>
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afc:	f7ff bff0 	b.w	8009ae0 <__sfp_lock_release>
 8009b00:	4b04      	ldr	r3, [pc, #16]	@ (8009b14 <__sinit+0x28>)
 8009b02:	6223      	str	r3, [r4, #32]
 8009b04:	4b04      	ldr	r3, [pc, #16]	@ (8009b18 <__sinit+0x2c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f5      	bne.n	8009af8 <__sinit+0xc>
 8009b0c:	f7ff ffc4 	bl	8009a98 <global_stdio_init.part.0>
 8009b10:	e7f2      	b.n	8009af8 <__sinit+0xc>
 8009b12:	bf00      	nop
 8009b14:	08009a59 	.word	0x08009a59
 8009b18:	20006140 	.word	0x20006140

08009b1c <_fwalk_sglue>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	4607      	mov	r7, r0
 8009b22:	4688      	mov	r8, r1
 8009b24:	4614      	mov	r4, r2
 8009b26:	2600      	movs	r6, #0
 8009b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b30:	d505      	bpl.n	8009b3e <_fwalk_sglue+0x22>
 8009b32:	6824      	ldr	r4, [r4, #0]
 8009b34:	2c00      	cmp	r4, #0
 8009b36:	d1f7      	bne.n	8009b28 <_fwalk_sglue+0xc>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d907      	bls.n	8009b54 <_fwalk_sglue+0x38>
 8009b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	d003      	beq.n	8009b54 <_fwalk_sglue+0x38>
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4638      	mov	r0, r7
 8009b50:	47c0      	blx	r8
 8009b52:	4306      	orrs	r6, r0
 8009b54:	3568      	adds	r5, #104	@ 0x68
 8009b56:	e7e9      	b.n	8009b2c <_fwalk_sglue+0x10>

08009b58 <__sread>:
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b60:	f000 f86c 	bl	8009c3c <_read_r>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	bfab      	itete	ge
 8009b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b6c:	181b      	addge	r3, r3, r0
 8009b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b72:	bfac      	ite	ge
 8009b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b76:	81a3      	strhlt	r3, [r4, #12]
 8009b78:	bd10      	pop	{r4, pc}

08009b7a <__swrite>:
 8009b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	461f      	mov	r7, r3
 8009b80:	898b      	ldrh	r3, [r1, #12]
 8009b82:	05db      	lsls	r3, r3, #23
 8009b84:	4605      	mov	r5, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	4616      	mov	r6, r2
 8009b8a:	d505      	bpl.n	8009b98 <__swrite+0x1e>
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	2302      	movs	r3, #2
 8009b92:	2200      	movs	r2, #0
 8009b94:	f000 f840 	bl	8009c18 <_lseek_r>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4628      	mov	r0, r5
 8009baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	f000 b857 	b.w	8009c60 <_write_r>

08009bb2 <__sseek>:
 8009bb2:	b510      	push	{r4, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bba:	f000 f82d 	bl	8009c18 <_lseek_r>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	bf15      	itete	ne
 8009bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bce:	81a3      	strheq	r3, [r4, #12]
 8009bd0:	bf18      	it	ne
 8009bd2:	81a3      	strhne	r3, [r4, #12]
 8009bd4:	bd10      	pop	{r4, pc}

08009bd6 <__sclose>:
 8009bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bda:	f000 b80d 	b.w	8009bf8 <_close_r>

08009bde <memset>:
 8009bde:	4402      	add	r2, r0
 8009be0:	4603      	mov	r3, r0
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d100      	bne.n	8009be8 <memset+0xa>
 8009be6:	4770      	bx	lr
 8009be8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bec:	e7f9      	b.n	8009be2 <memset+0x4>
	...

08009bf0 <_localeconv_r>:
 8009bf0:	4800      	ldr	r0, [pc, #0]	@ (8009bf4 <_localeconv_r+0x4>)
 8009bf2:	4770      	bx	lr
 8009bf4:	20000248 	.word	0x20000248

08009bf8 <_close_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d06      	ldr	r5, [pc, #24]	@ (8009c14 <_close_r+0x1c>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	f7f7 fcee 	bl	80015e4 <_close>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_close_r+0x1a>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_close_r+0x1a>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	20006144 	.word	0x20006144

08009c18 <_lseek_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d07      	ldr	r5, [pc, #28]	@ (8009c38 <_lseek_r+0x20>)
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	4608      	mov	r0, r1
 8009c20:	4611      	mov	r1, r2
 8009c22:	2200      	movs	r2, #0
 8009c24:	602a      	str	r2, [r5, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f7f7 fd03 	bl	8001632 <_lseek>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_lseek_r+0x1e>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_lseek_r+0x1e>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20006144 	.word	0x20006144

08009c3c <_read_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	@ (8009c5c <_read_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f7f7 fc91 	bl	8001572 <_read>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_read_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_read_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20006144 	.word	0x20006144

08009c60 <_write_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	@ (8009c80 <_write_r+0x20>)
 8009c64:	4604      	mov	r4, r0
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7f7 fc9c 	bl	80015ac <_write>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_write_r+0x1e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_write_r+0x1e>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	20006144 	.word	0x20006144

08009c84 <__errno>:
 8009c84:	4b01      	ldr	r3, [pc, #4]	@ (8009c8c <__errno+0x8>)
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	20000108 	.word	0x20000108

08009c90 <__libc_init_array>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	4d0d      	ldr	r5, [pc, #52]	@ (8009cc8 <__libc_init_array+0x38>)
 8009c94:	4c0d      	ldr	r4, [pc, #52]	@ (8009ccc <__libc_init_array+0x3c>)
 8009c96:	1b64      	subs	r4, r4, r5
 8009c98:	10a4      	asrs	r4, r4, #2
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	42a6      	cmp	r6, r4
 8009c9e:	d109      	bne.n	8009cb4 <__libc_init_array+0x24>
 8009ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8009cd0 <__libc_init_array+0x40>)
 8009ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8009cd4 <__libc_init_array+0x44>)
 8009ca4:	f001 febc 	bl	800ba20 <_init>
 8009ca8:	1b64      	subs	r4, r4, r5
 8009caa:	10a4      	asrs	r4, r4, #2
 8009cac:	2600      	movs	r6, #0
 8009cae:	42a6      	cmp	r6, r4
 8009cb0:	d105      	bne.n	8009cbe <__libc_init_array+0x2e>
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb8:	4798      	blx	r3
 8009cba:	3601      	adds	r6, #1
 8009cbc:	e7ee      	b.n	8009c9c <__libc_init_array+0xc>
 8009cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc2:	4798      	blx	r3
 8009cc4:	3601      	adds	r6, #1
 8009cc6:	e7f2      	b.n	8009cae <__libc_init_array+0x1e>
 8009cc8:	0800be10 	.word	0x0800be10
 8009ccc:	0800be10 	.word	0x0800be10
 8009cd0:	0800be10 	.word	0x0800be10
 8009cd4:	0800be14 	.word	0x0800be14

08009cd8 <__retarget_lock_init_recursive>:
 8009cd8:	4770      	bx	lr

08009cda <__retarget_lock_acquire_recursive>:
 8009cda:	4770      	bx	lr

08009cdc <__retarget_lock_release_recursive>:
 8009cdc:	4770      	bx	lr

08009cde <quorem>:
 8009cde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce2:	6903      	ldr	r3, [r0, #16]
 8009ce4:	690c      	ldr	r4, [r1, #16]
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	4607      	mov	r7, r0
 8009cea:	db7e      	blt.n	8009dea <quorem+0x10c>
 8009cec:	3c01      	subs	r4, #1
 8009cee:	f101 0814 	add.w	r8, r1, #20
 8009cf2:	00a3      	lsls	r3, r4, #2
 8009cf4:	f100 0514 	add.w	r5, r0, #20
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d14:	d32e      	bcc.n	8009d74 <quorem+0x96>
 8009d16:	f04f 0a00 	mov.w	sl, #0
 8009d1a:	46c4      	mov	ip, r8
 8009d1c:	46ae      	mov	lr, r5
 8009d1e:	46d3      	mov	fp, sl
 8009d20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d24:	b298      	uxth	r0, r3
 8009d26:	fb06 a000 	mla	r0, r6, r0, sl
 8009d2a:	0c02      	lsrs	r2, r0, #16
 8009d2c:	0c1b      	lsrs	r3, r3, #16
 8009d2e:	fb06 2303 	mla	r3, r6, r3, r2
 8009d32:	f8de 2000 	ldr.w	r2, [lr]
 8009d36:	b280      	uxth	r0, r0
 8009d38:	b292      	uxth	r2, r2
 8009d3a:	1a12      	subs	r2, r2, r0
 8009d3c:	445a      	add	r2, fp
 8009d3e:	f8de 0000 	ldr.w	r0, [lr]
 8009d42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d50:	b292      	uxth	r2, r2
 8009d52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d56:	45e1      	cmp	r9, ip
 8009d58:	f84e 2b04 	str.w	r2, [lr], #4
 8009d5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d60:	d2de      	bcs.n	8009d20 <quorem+0x42>
 8009d62:	9b00      	ldr	r3, [sp, #0]
 8009d64:	58eb      	ldr	r3, [r5, r3]
 8009d66:	b92b      	cbnz	r3, 8009d74 <quorem+0x96>
 8009d68:	9b01      	ldr	r3, [sp, #4]
 8009d6a:	3b04      	subs	r3, #4
 8009d6c:	429d      	cmp	r5, r3
 8009d6e:	461a      	mov	r2, r3
 8009d70:	d32f      	bcc.n	8009dd2 <quorem+0xf4>
 8009d72:	613c      	str	r4, [r7, #16]
 8009d74:	4638      	mov	r0, r7
 8009d76:	f001 f979 	bl	800b06c <__mcmp>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	db25      	blt.n	8009dca <quorem+0xec>
 8009d7e:	4629      	mov	r1, r5
 8009d80:	2000      	movs	r0, #0
 8009d82:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d86:	f8d1 c000 	ldr.w	ip, [r1]
 8009d8a:	fa1f fe82 	uxth.w	lr, r2
 8009d8e:	fa1f f38c 	uxth.w	r3, ip
 8009d92:	eba3 030e 	sub.w	r3, r3, lr
 8009d96:	4403      	add	r3, r0
 8009d98:	0c12      	lsrs	r2, r2, #16
 8009d9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009da8:	45c1      	cmp	r9, r8
 8009daa:	f841 3b04 	str.w	r3, [r1], #4
 8009dae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009db2:	d2e6      	bcs.n	8009d82 <quorem+0xa4>
 8009db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009db8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dbc:	b922      	cbnz	r2, 8009dc8 <quorem+0xea>
 8009dbe:	3b04      	subs	r3, #4
 8009dc0:	429d      	cmp	r5, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	d30b      	bcc.n	8009dde <quorem+0x100>
 8009dc6:	613c      	str	r4, [r7, #16]
 8009dc8:	3601      	adds	r6, #1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	b003      	add	sp, #12
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	3b04      	subs	r3, #4
 8009dd6:	2a00      	cmp	r2, #0
 8009dd8:	d1cb      	bne.n	8009d72 <quorem+0x94>
 8009dda:	3c01      	subs	r4, #1
 8009ddc:	e7c6      	b.n	8009d6c <quorem+0x8e>
 8009dde:	6812      	ldr	r2, [r2, #0]
 8009de0:	3b04      	subs	r3, #4
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d1ef      	bne.n	8009dc6 <quorem+0xe8>
 8009de6:	3c01      	subs	r4, #1
 8009de8:	e7ea      	b.n	8009dc0 <quorem+0xe2>
 8009dea:	2000      	movs	r0, #0
 8009dec:	e7ee      	b.n	8009dcc <quorem+0xee>
	...

08009df0 <_dtoa_r>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	69c7      	ldr	r7, [r0, #28]
 8009df6:	b099      	sub	sp, #100	@ 0x64
 8009df8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009dfc:	ec55 4b10 	vmov	r4, r5, d0
 8009e00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e02:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e04:	4683      	mov	fp, r0
 8009e06:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e0a:	b97f      	cbnz	r7, 8009e2c <_dtoa_r+0x3c>
 8009e0c:	2010      	movs	r0, #16
 8009e0e:	f000 fdfd 	bl	800aa0c <malloc>
 8009e12:	4602      	mov	r2, r0
 8009e14:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e18:	b920      	cbnz	r0, 8009e24 <_dtoa_r+0x34>
 8009e1a:	4ba7      	ldr	r3, [pc, #668]	@ (800a0b8 <_dtoa_r+0x2c8>)
 8009e1c:	21ef      	movs	r1, #239	@ 0xef
 8009e1e:	48a7      	ldr	r0, [pc, #668]	@ (800a0bc <_dtoa_r+0x2cc>)
 8009e20:	f001 faf6 	bl	800b410 <__assert_func>
 8009e24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e28:	6007      	str	r7, [r0, #0]
 8009e2a:	60c7      	str	r7, [r0, #12]
 8009e2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e30:	6819      	ldr	r1, [r3, #0]
 8009e32:	b159      	cbz	r1, 8009e4c <_dtoa_r+0x5c>
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	604a      	str	r2, [r1, #4]
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4093      	lsls	r3, r2
 8009e3c:	608b      	str	r3, [r1, #8]
 8009e3e:	4658      	mov	r0, fp
 8009e40:	f000 feda 	bl	800abf8 <_Bfree>
 8009e44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	1e2b      	subs	r3, r5, #0
 8009e4e:	bfb9      	ittee	lt
 8009e50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e54:	9303      	strlt	r3, [sp, #12]
 8009e56:	2300      	movge	r3, #0
 8009e58:	6033      	strge	r3, [r6, #0]
 8009e5a:	9f03      	ldr	r7, [sp, #12]
 8009e5c:	4b98      	ldr	r3, [pc, #608]	@ (800a0c0 <_dtoa_r+0x2d0>)
 8009e5e:	bfbc      	itt	lt
 8009e60:	2201      	movlt	r2, #1
 8009e62:	6032      	strlt	r2, [r6, #0]
 8009e64:	43bb      	bics	r3, r7
 8009e66:	d112      	bne.n	8009e8e <_dtoa_r+0x9e>
 8009e68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e74:	4323      	orrs	r3, r4
 8009e76:	f000 854d 	beq.w	800a914 <_dtoa_r+0xb24>
 8009e7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a0d4 <_dtoa_r+0x2e4>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 854f 	beq.w	800a924 <_dtoa_r+0xb34>
 8009e86:	f10a 0303 	add.w	r3, sl, #3
 8009e8a:	f000 bd49 	b.w	800a920 <_dtoa_r+0xb30>
 8009e8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e92:	2200      	movs	r2, #0
 8009e94:	ec51 0b17 	vmov	r0, r1, d7
 8009e98:	2300      	movs	r3, #0
 8009e9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009e9e:	f7f6 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	b158      	cbz	r0, 8009ebe <_dtoa_r+0xce>
 8009ea6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eae:	b113      	cbz	r3, 8009eb6 <_dtoa_r+0xc6>
 8009eb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009eb2:	4b84      	ldr	r3, [pc, #528]	@ (800a0c4 <_dtoa_r+0x2d4>)
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a0d8 <_dtoa_r+0x2e8>
 8009eba:	f000 bd33 	b.w	800a924 <_dtoa_r+0xb34>
 8009ebe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009ec2:	aa16      	add	r2, sp, #88	@ 0x58
 8009ec4:	a917      	add	r1, sp, #92	@ 0x5c
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	f001 f980 	bl	800b1cc <__d2b>
 8009ecc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ed0:	4681      	mov	r9, r0
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	d077      	beq.n	8009fc6 <_dtoa_r+0x1d6>
 8009ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ed8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ee4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ee8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009eec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4b74      	ldr	r3, [pc, #464]	@ (800a0c8 <_dtoa_r+0x2d8>)
 8009ef6:	f7f6 f9c7 	bl	8000288 <__aeabi_dsub>
 8009efa:	a369      	add	r3, pc, #420	@ (adr r3, 800a0a0 <_dtoa_r+0x2b0>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 fb7a 	bl	80005f8 <__aeabi_dmul>
 8009f04:	a368      	add	r3, pc, #416	@ (adr r3, 800a0a8 <_dtoa_r+0x2b8>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f9bf 	bl	800028c <__adddf3>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4630      	mov	r0, r6
 8009f12:	460d      	mov	r5, r1
 8009f14:	f7f6 fb06 	bl	8000524 <__aeabi_i2d>
 8009f18:	a365      	add	r3, pc, #404	@ (adr r3, 800a0b0 <_dtoa_r+0x2c0>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 fb6b 	bl	80005f8 <__aeabi_dmul>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4620      	mov	r0, r4
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7f6 f9af 	bl	800028c <__adddf3>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	460d      	mov	r5, r1
 8009f32:	f7f6 fe11 	bl	8000b58 <__aeabi_d2iz>
 8009f36:	2200      	movs	r2, #0
 8009f38:	4607      	mov	r7, r0
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8009f44:	b140      	cbz	r0, 8009f58 <_dtoa_r+0x168>
 8009f46:	4638      	mov	r0, r7
 8009f48:	f7f6 faec 	bl	8000524 <__aeabi_i2d>
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	462b      	mov	r3, r5
 8009f50:	f7f6 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f54:	b900      	cbnz	r0, 8009f58 <_dtoa_r+0x168>
 8009f56:	3f01      	subs	r7, #1
 8009f58:	2f16      	cmp	r7, #22
 8009f5a:	d851      	bhi.n	800a000 <_dtoa_r+0x210>
 8009f5c:	4b5b      	ldr	r3, [pc, #364]	@ (800a0cc <_dtoa_r+0x2dc>)
 8009f5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f6a:	f7f6 fdb7 	bl	8000adc <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d048      	beq.n	800a004 <_dtoa_r+0x214>
 8009f72:	3f01      	subs	r7, #1
 8009f74:	2300      	movs	r3, #0
 8009f76:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f7a:	1b9b      	subs	r3, r3, r6
 8009f7c:	1e5a      	subs	r2, r3, #1
 8009f7e:	bf44      	itt	mi
 8009f80:	f1c3 0801 	rsbmi	r8, r3, #1
 8009f84:	2300      	movmi	r3, #0
 8009f86:	9208      	str	r2, [sp, #32]
 8009f88:	bf54      	ite	pl
 8009f8a:	f04f 0800 	movpl.w	r8, #0
 8009f8e:	9308      	strmi	r3, [sp, #32]
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	db39      	blt.n	800a008 <_dtoa_r+0x218>
 8009f94:	9b08      	ldr	r3, [sp, #32]
 8009f96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009f98:	443b      	add	r3, r7
 8009f9a:	9308      	str	r3, [sp, #32]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa2:	2b09      	cmp	r3, #9
 8009fa4:	d864      	bhi.n	800a070 <_dtoa_r+0x280>
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	bfc4      	itt	gt
 8009faa:	3b04      	subgt	r3, #4
 8009fac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb0:	f1a3 0302 	sub.w	r3, r3, #2
 8009fb4:	bfcc      	ite	gt
 8009fb6:	2400      	movgt	r4, #0
 8009fb8:	2401      	movle	r4, #1
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d863      	bhi.n	800a086 <_dtoa_r+0x296>
 8009fbe:	e8df f003 	tbb	[pc, r3]
 8009fc2:	372a      	.short	0x372a
 8009fc4:	5535      	.short	0x5535
 8009fc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009fca:	441e      	add	r6, r3
 8009fcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	bfc1      	itttt	gt
 8009fd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009fd8:	409f      	lslgt	r7, r3
 8009fda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009fde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009fe2:	bfd6      	itet	le
 8009fe4:	f1c3 0320 	rsble	r3, r3, #32
 8009fe8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009fec:	fa04 f003 	lslle.w	r0, r4, r3
 8009ff0:	f7f6 fa88 	bl	8000504 <__aeabi_ui2d>
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ffa:	3e01      	subs	r6, #1
 8009ffc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ffe:	e777      	b.n	8009ef0 <_dtoa_r+0x100>
 800a000:	2301      	movs	r3, #1
 800a002:	e7b8      	b.n	8009f76 <_dtoa_r+0x186>
 800a004:	9012      	str	r0, [sp, #72]	@ 0x48
 800a006:	e7b7      	b.n	8009f78 <_dtoa_r+0x188>
 800a008:	427b      	negs	r3, r7
 800a00a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00c:	2300      	movs	r3, #0
 800a00e:	eba8 0807 	sub.w	r8, r8, r7
 800a012:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a014:	e7c4      	b.n	8009fa0 <_dtoa_r+0x1b0>
 800a016:	2300      	movs	r3, #0
 800a018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a01a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dc35      	bgt.n	800a08c <_dtoa_r+0x29c>
 800a020:	2301      	movs	r3, #1
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	9307      	str	r3, [sp, #28]
 800a026:	461a      	mov	r2, r3
 800a028:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02a:	e00b      	b.n	800a044 <_dtoa_r+0x254>
 800a02c:	2301      	movs	r3, #1
 800a02e:	e7f3      	b.n	800a018 <_dtoa_r+0x228>
 800a030:	2300      	movs	r3, #0
 800a032:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	3301      	adds	r3, #1
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	9307      	str	r3, [sp, #28]
 800a040:	bfb8      	it	lt
 800a042:	2301      	movlt	r3, #1
 800a044:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a048:	2100      	movs	r1, #0
 800a04a:	2204      	movs	r2, #4
 800a04c:	f102 0514 	add.w	r5, r2, #20
 800a050:	429d      	cmp	r5, r3
 800a052:	d91f      	bls.n	800a094 <_dtoa_r+0x2a4>
 800a054:	6041      	str	r1, [r0, #4]
 800a056:	4658      	mov	r0, fp
 800a058:	f000 fd8e 	bl	800ab78 <_Balloc>
 800a05c:	4682      	mov	sl, r0
 800a05e:	2800      	cmp	r0, #0
 800a060:	d13c      	bne.n	800a0dc <_dtoa_r+0x2ec>
 800a062:	4b1b      	ldr	r3, [pc, #108]	@ (800a0d0 <_dtoa_r+0x2e0>)
 800a064:	4602      	mov	r2, r0
 800a066:	f240 11af 	movw	r1, #431	@ 0x1af
 800a06a:	e6d8      	b.n	8009e1e <_dtoa_r+0x2e>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e7e0      	b.n	800a032 <_dtoa_r+0x242>
 800a070:	2401      	movs	r4, #1
 800a072:	2300      	movs	r3, #0
 800a074:	9309      	str	r3, [sp, #36]	@ 0x24
 800a076:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a078:	f04f 33ff 	mov.w	r3, #4294967295
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	2200      	movs	r2, #0
 800a082:	2312      	movs	r3, #18
 800a084:	e7d0      	b.n	800a028 <_dtoa_r+0x238>
 800a086:	2301      	movs	r3, #1
 800a088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a08a:	e7f5      	b.n	800a078 <_dtoa_r+0x288>
 800a08c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	9307      	str	r3, [sp, #28]
 800a092:	e7d7      	b.n	800a044 <_dtoa_r+0x254>
 800a094:	3101      	adds	r1, #1
 800a096:	0052      	lsls	r2, r2, #1
 800a098:	e7d8      	b.n	800a04c <_dtoa_r+0x25c>
 800a09a:	bf00      	nop
 800a09c:	f3af 8000 	nop.w
 800a0a0:	636f4361 	.word	0x636f4361
 800a0a4:	3fd287a7 	.word	0x3fd287a7
 800a0a8:	8b60c8b3 	.word	0x8b60c8b3
 800a0ac:	3fc68a28 	.word	0x3fc68a28
 800a0b0:	509f79fb 	.word	0x509f79fb
 800a0b4:	3fd34413 	.word	0x3fd34413
 800a0b8:	0800bad9 	.word	0x0800bad9
 800a0bc:	0800baf0 	.word	0x0800baf0
 800a0c0:	7ff00000 	.word	0x7ff00000
 800a0c4:	0800baa9 	.word	0x0800baa9
 800a0c8:	3ff80000 	.word	0x3ff80000
 800a0cc:	0800bbe8 	.word	0x0800bbe8
 800a0d0:	0800bb48 	.word	0x0800bb48
 800a0d4:	0800bad5 	.word	0x0800bad5
 800a0d8:	0800baa8 	.word	0x0800baa8
 800a0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0e0:	6018      	str	r0, [r3, #0]
 800a0e2:	9b07      	ldr	r3, [sp, #28]
 800a0e4:	2b0e      	cmp	r3, #14
 800a0e6:	f200 80a4 	bhi.w	800a232 <_dtoa_r+0x442>
 800a0ea:	2c00      	cmp	r4, #0
 800a0ec:	f000 80a1 	beq.w	800a232 <_dtoa_r+0x442>
 800a0f0:	2f00      	cmp	r7, #0
 800a0f2:	dd33      	ble.n	800a15c <_dtoa_r+0x36c>
 800a0f4:	4bad      	ldr	r3, [pc, #692]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a0f6:	f007 020f 	and.w	r2, r7, #15
 800a0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0fe:	ed93 7b00 	vldr	d7, [r3]
 800a102:	05f8      	lsls	r0, r7, #23
 800a104:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a108:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a10c:	d516      	bpl.n	800a13c <_dtoa_r+0x34c>
 800a10e:	4ba8      	ldr	r3, [pc, #672]	@ (800a3b0 <_dtoa_r+0x5c0>)
 800a110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a118:	f7f6 fb98 	bl	800084c <__aeabi_ddiv>
 800a11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a120:	f004 040f 	and.w	r4, r4, #15
 800a124:	2603      	movs	r6, #3
 800a126:	4da2      	ldr	r5, [pc, #648]	@ (800a3b0 <_dtoa_r+0x5c0>)
 800a128:	b954      	cbnz	r4, 800a140 <_dtoa_r+0x350>
 800a12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a132:	f7f6 fb8b 	bl	800084c <__aeabi_ddiv>
 800a136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a13a:	e028      	b.n	800a18e <_dtoa_r+0x39e>
 800a13c:	2602      	movs	r6, #2
 800a13e:	e7f2      	b.n	800a126 <_dtoa_r+0x336>
 800a140:	07e1      	lsls	r1, r4, #31
 800a142:	d508      	bpl.n	800a156 <_dtoa_r+0x366>
 800a144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a148:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a154:	3601      	adds	r6, #1
 800a156:	1064      	asrs	r4, r4, #1
 800a158:	3508      	adds	r5, #8
 800a15a:	e7e5      	b.n	800a128 <_dtoa_r+0x338>
 800a15c:	f000 80d2 	beq.w	800a304 <_dtoa_r+0x514>
 800a160:	427c      	negs	r4, r7
 800a162:	4b92      	ldr	r3, [pc, #584]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a164:	4d92      	ldr	r5, [pc, #584]	@ (800a3b0 <_dtoa_r+0x5c0>)
 800a166:	f004 020f 	and.w	r2, r4, #15
 800a16a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a17e:	1124      	asrs	r4, r4, #4
 800a180:	2300      	movs	r3, #0
 800a182:	2602      	movs	r6, #2
 800a184:	2c00      	cmp	r4, #0
 800a186:	f040 80b2 	bne.w	800a2ee <_dtoa_r+0x4fe>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1d3      	bne.n	800a136 <_dtoa_r+0x346>
 800a18e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a190:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 80b7 	beq.w	800a308 <_dtoa_r+0x518>
 800a19a:	4b86      	ldr	r3, [pc, #536]	@ (800a3b4 <_dtoa_r+0x5c4>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7f6 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f000 80ae 	beq.w	800a308 <_dtoa_r+0x518>
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 80aa 	beq.w	800a308 <_dtoa_r+0x518>
 800a1b4:	9b00      	ldr	r3, [sp, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	dd37      	ble.n	800a22a <_dtoa_r+0x43a>
 800a1ba:	1e7b      	subs	r3, r7, #1
 800a1bc:	9304      	str	r3, [sp, #16]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4b7d      	ldr	r3, [pc, #500]	@ (800a3b8 <_dtoa_r+0x5c8>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7f6 fa17 	bl	80005f8 <__aeabi_dmul>
 800a1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ce:	9c00      	ldr	r4, [sp, #0]
 800a1d0:	3601      	adds	r6, #1
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7f6 f9a6 	bl	8000524 <__aeabi_i2d>
 800a1d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1dc:	f7f6 fa0c 	bl	80005f8 <__aeabi_dmul>
 800a1e0:	4b76      	ldr	r3, [pc, #472]	@ (800a3bc <_dtoa_r+0x5cc>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f7f6 f852 	bl	800028c <__adddf3>
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	f040 808d 	bne.w	800a30e <_dtoa_r+0x51e>
 800a1f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f8:	4b71      	ldr	r3, [pc, #452]	@ (800a3c0 <_dtoa_r+0x5d0>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f7f6 f844 	bl	8000288 <__aeabi_dsub>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a208:	462a      	mov	r2, r5
 800a20a:	4633      	mov	r3, r6
 800a20c:	f7f6 fc84 	bl	8000b18 <__aeabi_dcmpgt>
 800a210:	2800      	cmp	r0, #0
 800a212:	f040 828b 	bne.w	800a72c <_dtoa_r+0x93c>
 800a216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a21a:	462a      	mov	r2, r5
 800a21c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a220:	f7f6 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800a224:	2800      	cmp	r0, #0
 800a226:	f040 8128 	bne.w	800a47a <_dtoa_r+0x68a>
 800a22a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a22e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a234:	2b00      	cmp	r3, #0
 800a236:	f2c0 815a 	blt.w	800a4ee <_dtoa_r+0x6fe>
 800a23a:	2f0e      	cmp	r7, #14
 800a23c:	f300 8157 	bgt.w	800a4ee <_dtoa_r+0x6fe>
 800a240:	4b5a      	ldr	r3, [pc, #360]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a242:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a246:	ed93 7b00 	vldr	d7, [r3]
 800a24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	ed8d 7b00 	vstr	d7, [sp]
 800a252:	da03      	bge.n	800a25c <_dtoa_r+0x46c>
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f340 8101 	ble.w	800a45e <_dtoa_r+0x66e>
 800a25c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a260:	4656      	mov	r6, sl
 800a262:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 faef 	bl	800084c <__aeabi_ddiv>
 800a26e:	f7f6 fc73 	bl	8000b58 <__aeabi_d2iz>
 800a272:	4680      	mov	r8, r0
 800a274:	f7f6 f956 	bl	8000524 <__aeabi_i2d>
 800a278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a27c:	f7f6 f9bc 	bl	80005f8 <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a28c:	f7f5 fffc 	bl	8000288 <__aeabi_dsub>
 800a290:	f806 4b01 	strb.w	r4, [r6], #1
 800a294:	9d07      	ldr	r5, [sp, #28]
 800a296:	eba6 040a 	sub.w	r4, r6, sl
 800a29a:	42a5      	cmp	r5, r4
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	f040 8117 	bne.w	800a4d2 <_dtoa_r+0x6e2>
 800a2a4:	f7f5 fff2 	bl	800028c <__adddf3>
 800a2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	f7f6 fc32 	bl	8000b18 <__aeabi_dcmpgt>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f040 80f9 	bne.w	800a4ac <_dtoa_r+0x6bc>
 800a2ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2c6:	b118      	cbz	r0, 800a2d0 <_dtoa_r+0x4e0>
 800a2c8:	f018 0f01 	tst.w	r8, #1
 800a2cc:	f040 80ee 	bne.w	800a4ac <_dtoa_r+0x6bc>
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	4658      	mov	r0, fp
 800a2d4:	f000 fc90 	bl	800abf8 <_Bfree>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	7033      	strb	r3, [r6, #0]
 800a2dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2de:	3701      	adds	r7, #1
 800a2e0:	601f      	str	r7, [r3, #0]
 800a2e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 831d 	beq.w	800a924 <_dtoa_r+0xb34>
 800a2ea:	601e      	str	r6, [r3, #0]
 800a2ec:	e31a      	b.n	800a924 <_dtoa_r+0xb34>
 800a2ee:	07e2      	lsls	r2, r4, #31
 800a2f0:	d505      	bpl.n	800a2fe <_dtoa_r+0x50e>
 800a2f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2f6:	f7f6 f97f 	bl	80005f8 <__aeabi_dmul>
 800a2fa:	3601      	adds	r6, #1
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	1064      	asrs	r4, r4, #1
 800a300:	3508      	adds	r5, #8
 800a302:	e73f      	b.n	800a184 <_dtoa_r+0x394>
 800a304:	2602      	movs	r6, #2
 800a306:	e742      	b.n	800a18e <_dtoa_r+0x39e>
 800a308:	9c07      	ldr	r4, [sp, #28]
 800a30a:	9704      	str	r7, [sp, #16]
 800a30c:	e761      	b.n	800a1d2 <_dtoa_r+0x3e2>
 800a30e:	4b27      	ldr	r3, [pc, #156]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a316:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a31a:	4454      	add	r4, sl
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d053      	beq.n	800a3c8 <_dtoa_r+0x5d8>
 800a320:	4928      	ldr	r1, [pc, #160]	@ (800a3c4 <_dtoa_r+0x5d4>)
 800a322:	2000      	movs	r0, #0
 800a324:	f7f6 fa92 	bl	800084c <__aeabi_ddiv>
 800a328:	4633      	mov	r3, r6
 800a32a:	462a      	mov	r2, r5
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a334:	4656      	mov	r6, sl
 800a336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a33a:	f7f6 fc0d 	bl	8000b58 <__aeabi_d2iz>
 800a33e:	4605      	mov	r5, r0
 800a340:	f7f6 f8f0 	bl	8000524 <__aeabi_i2d>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a34c:	f7f5 ff9c 	bl	8000288 <__aeabi_dsub>
 800a350:	3530      	adds	r5, #48	@ 0x30
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a35a:	f806 5b01 	strb.w	r5, [r6], #1
 800a35e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a362:	f7f6 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	d171      	bne.n	800a44e <_dtoa_r+0x65e>
 800a36a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a36e:	4911      	ldr	r1, [pc, #68]	@ (800a3b4 <_dtoa_r+0x5c4>)
 800a370:	2000      	movs	r0, #0
 800a372:	f7f5 ff89 	bl	8000288 <__aeabi_dsub>
 800a376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a37a:	f7f6 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800a37e:	2800      	cmp	r0, #0
 800a380:	f040 8095 	bne.w	800a4ae <_dtoa_r+0x6be>
 800a384:	42a6      	cmp	r6, r4
 800a386:	f43f af50 	beq.w	800a22a <_dtoa_r+0x43a>
 800a38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a38e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b8 <_dtoa_r+0x5c8>)
 800a390:	2200      	movs	r2, #0
 800a392:	f7f6 f931 	bl	80005f8 <__aeabi_dmul>
 800a396:	4b08      	ldr	r3, [pc, #32]	@ (800a3b8 <_dtoa_r+0x5c8>)
 800a398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a39c:	2200      	movs	r2, #0
 800a39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a2:	f7f6 f929 	bl	80005f8 <__aeabi_dmul>
 800a3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3aa:	e7c4      	b.n	800a336 <_dtoa_r+0x546>
 800a3ac:	0800bbe8 	.word	0x0800bbe8
 800a3b0:	0800bbc0 	.word	0x0800bbc0
 800a3b4:	3ff00000 	.word	0x3ff00000
 800a3b8:	40240000 	.word	0x40240000
 800a3bc:	401c0000 	.word	0x401c0000
 800a3c0:	40140000 	.word	0x40140000
 800a3c4:	3fe00000 	.word	0x3fe00000
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a3d6:	4656      	mov	r6, sl
 800a3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3dc:	f7f6 fbbc 	bl	8000b58 <__aeabi_d2iz>
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	f7f6 f89f 	bl	8000524 <__aeabi_i2d>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ee:	f7f5 ff4b 	bl	8000288 <__aeabi_dsub>
 800a3f2:	3530      	adds	r5, #48	@ 0x30
 800a3f4:	f806 5b01 	strb.w	r5, [r6], #1
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	42a6      	cmp	r6, r4
 800a3fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	d124      	bne.n	800a452 <_dtoa_r+0x662>
 800a408:	4bac      	ldr	r3, [pc, #688]	@ (800a6bc <_dtoa_r+0x8cc>)
 800a40a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a40e:	f7f5 ff3d 	bl	800028c <__adddf3>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a41a:	f7f6 fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d145      	bne.n	800a4ae <_dtoa_r+0x6be>
 800a422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a426:	49a5      	ldr	r1, [pc, #660]	@ (800a6bc <_dtoa_r+0x8cc>)
 800a428:	2000      	movs	r0, #0
 800a42a:	f7f5 ff2d 	bl	8000288 <__aeabi_dsub>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a436:	f7f6 fb51 	bl	8000adc <__aeabi_dcmplt>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f43f aef5 	beq.w	800a22a <_dtoa_r+0x43a>
 800a440:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a442:	1e73      	subs	r3, r6, #1
 800a444:	9315      	str	r3, [sp, #84]	@ 0x54
 800a446:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a44a:	2b30      	cmp	r3, #48	@ 0x30
 800a44c:	d0f8      	beq.n	800a440 <_dtoa_r+0x650>
 800a44e:	9f04      	ldr	r7, [sp, #16]
 800a450:	e73e      	b.n	800a2d0 <_dtoa_r+0x4e0>
 800a452:	4b9b      	ldr	r3, [pc, #620]	@ (800a6c0 <_dtoa_r+0x8d0>)
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a45c:	e7bc      	b.n	800a3d8 <_dtoa_r+0x5e8>
 800a45e:	d10c      	bne.n	800a47a <_dtoa_r+0x68a>
 800a460:	4b98      	ldr	r3, [pc, #608]	@ (800a6c4 <_dtoa_r+0x8d4>)
 800a462:	2200      	movs	r2, #0
 800a464:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a468:	f7f6 f8c6 	bl	80005f8 <__aeabi_dmul>
 800a46c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a470:	f7f6 fb48 	bl	8000b04 <__aeabi_dcmpge>
 800a474:	2800      	cmp	r0, #0
 800a476:	f000 8157 	beq.w	800a728 <_dtoa_r+0x938>
 800a47a:	2400      	movs	r4, #0
 800a47c:	4625      	mov	r5, r4
 800a47e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a480:	43db      	mvns	r3, r3
 800a482:	9304      	str	r3, [sp, #16]
 800a484:	4656      	mov	r6, sl
 800a486:	2700      	movs	r7, #0
 800a488:	4621      	mov	r1, r4
 800a48a:	4658      	mov	r0, fp
 800a48c:	f000 fbb4 	bl	800abf8 <_Bfree>
 800a490:	2d00      	cmp	r5, #0
 800a492:	d0dc      	beq.n	800a44e <_dtoa_r+0x65e>
 800a494:	b12f      	cbz	r7, 800a4a2 <_dtoa_r+0x6b2>
 800a496:	42af      	cmp	r7, r5
 800a498:	d003      	beq.n	800a4a2 <_dtoa_r+0x6b2>
 800a49a:	4639      	mov	r1, r7
 800a49c:	4658      	mov	r0, fp
 800a49e:	f000 fbab 	bl	800abf8 <_Bfree>
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4658      	mov	r0, fp
 800a4a6:	f000 fba7 	bl	800abf8 <_Bfree>
 800a4aa:	e7d0      	b.n	800a44e <_dtoa_r+0x65e>
 800a4ac:	9704      	str	r7, [sp, #16]
 800a4ae:	4633      	mov	r3, r6
 800a4b0:	461e      	mov	r6, r3
 800a4b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4b6:	2a39      	cmp	r2, #57	@ 0x39
 800a4b8:	d107      	bne.n	800a4ca <_dtoa_r+0x6da>
 800a4ba:	459a      	cmp	sl, r3
 800a4bc:	d1f8      	bne.n	800a4b0 <_dtoa_r+0x6c0>
 800a4be:	9a04      	ldr	r2, [sp, #16]
 800a4c0:	3201      	adds	r2, #1
 800a4c2:	9204      	str	r2, [sp, #16]
 800a4c4:	2230      	movs	r2, #48	@ 0x30
 800a4c6:	f88a 2000 	strb.w	r2, [sl]
 800a4ca:	781a      	ldrb	r2, [r3, #0]
 800a4cc:	3201      	adds	r2, #1
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	e7bd      	b.n	800a44e <_dtoa_r+0x65e>
 800a4d2:	4b7b      	ldr	r3, [pc, #492]	@ (800a6c0 <_dtoa_r+0x8d0>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	f7f6 faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f43f aebb 	beq.w	800a262 <_dtoa_r+0x472>
 800a4ec:	e6f0      	b.n	800a2d0 <_dtoa_r+0x4e0>
 800a4ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	f000 80db 	beq.w	800a6ac <_dtoa_r+0x8bc>
 800a4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4f8:	2a01      	cmp	r2, #1
 800a4fa:	f300 80bf 	bgt.w	800a67c <_dtoa_r+0x88c>
 800a4fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a500:	2a00      	cmp	r2, #0
 800a502:	f000 80b7 	beq.w	800a674 <_dtoa_r+0x884>
 800a506:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a50a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a50c:	4646      	mov	r6, r8
 800a50e:	9a08      	ldr	r2, [sp, #32]
 800a510:	2101      	movs	r1, #1
 800a512:	441a      	add	r2, r3
 800a514:	4658      	mov	r0, fp
 800a516:	4498      	add	r8, r3
 800a518:	9208      	str	r2, [sp, #32]
 800a51a:	f000 fc21 	bl	800ad60 <__i2b>
 800a51e:	4605      	mov	r5, r0
 800a520:	b15e      	cbz	r6, 800a53a <_dtoa_r+0x74a>
 800a522:	9b08      	ldr	r3, [sp, #32]
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd08      	ble.n	800a53a <_dtoa_r+0x74a>
 800a528:	42b3      	cmp	r3, r6
 800a52a:	9a08      	ldr	r2, [sp, #32]
 800a52c:	bfa8      	it	ge
 800a52e:	4633      	movge	r3, r6
 800a530:	eba8 0803 	sub.w	r8, r8, r3
 800a534:	1af6      	subs	r6, r6, r3
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	9308      	str	r3, [sp, #32]
 800a53a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a53c:	b1f3      	cbz	r3, 800a57c <_dtoa_r+0x78c>
 800a53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 80b7 	beq.w	800a6b4 <_dtoa_r+0x8c4>
 800a546:	b18c      	cbz	r4, 800a56c <_dtoa_r+0x77c>
 800a548:	4629      	mov	r1, r5
 800a54a:	4622      	mov	r2, r4
 800a54c:	4658      	mov	r0, fp
 800a54e:	f000 fcc7 	bl	800aee0 <__pow5mult>
 800a552:	464a      	mov	r2, r9
 800a554:	4601      	mov	r1, r0
 800a556:	4605      	mov	r5, r0
 800a558:	4658      	mov	r0, fp
 800a55a:	f000 fc17 	bl	800ad8c <__multiply>
 800a55e:	4649      	mov	r1, r9
 800a560:	9004      	str	r0, [sp, #16]
 800a562:	4658      	mov	r0, fp
 800a564:	f000 fb48 	bl	800abf8 <_Bfree>
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	4699      	mov	r9, r3
 800a56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56e:	1b1a      	subs	r2, r3, r4
 800a570:	d004      	beq.n	800a57c <_dtoa_r+0x78c>
 800a572:	4649      	mov	r1, r9
 800a574:	4658      	mov	r0, fp
 800a576:	f000 fcb3 	bl	800aee0 <__pow5mult>
 800a57a:	4681      	mov	r9, r0
 800a57c:	2101      	movs	r1, #1
 800a57e:	4658      	mov	r0, fp
 800a580:	f000 fbee 	bl	800ad60 <__i2b>
 800a584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a586:	4604      	mov	r4, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 81cf 	beq.w	800a92c <_dtoa_r+0xb3c>
 800a58e:	461a      	mov	r2, r3
 800a590:	4601      	mov	r1, r0
 800a592:	4658      	mov	r0, fp
 800a594:	f000 fca4 	bl	800aee0 <__pow5mult>
 800a598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	4604      	mov	r4, r0
 800a59e:	f300 8095 	bgt.w	800a6cc <_dtoa_r+0x8dc>
 800a5a2:	9b02      	ldr	r3, [sp, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f040 8087 	bne.w	800a6b8 <_dtoa_r+0x8c8>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 8089 	bne.w	800a6c8 <_dtoa_r+0x8d8>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5bc:	0d1b      	lsrs	r3, r3, #20
 800a5be:	051b      	lsls	r3, r3, #20
 800a5c0:	b12b      	cbz	r3, 800a5ce <_dtoa_r+0x7de>
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	9308      	str	r3, [sp, #32]
 800a5c8:	f108 0801 	add.w	r8, r8, #1
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 81b0 	beq.w	800a938 <_dtoa_r+0xb48>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5de:	6918      	ldr	r0, [r3, #16]
 800a5e0:	f000 fb72 	bl	800acc8 <__hi0bits>
 800a5e4:	f1c0 0020 	rsb	r0, r0, #32
 800a5e8:	9b08      	ldr	r3, [sp, #32]
 800a5ea:	4418      	add	r0, r3
 800a5ec:	f010 001f 	ands.w	r0, r0, #31
 800a5f0:	d077      	beq.n	800a6e2 <_dtoa_r+0x8f2>
 800a5f2:	f1c0 0320 	rsb	r3, r0, #32
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	dd6b      	ble.n	800a6d2 <_dtoa_r+0x8e2>
 800a5fa:	9b08      	ldr	r3, [sp, #32]
 800a5fc:	f1c0 001c 	rsb	r0, r0, #28
 800a600:	4403      	add	r3, r0
 800a602:	4480      	add	r8, r0
 800a604:	4406      	add	r6, r0
 800a606:	9308      	str	r3, [sp, #32]
 800a608:	f1b8 0f00 	cmp.w	r8, #0
 800a60c:	dd05      	ble.n	800a61a <_dtoa_r+0x82a>
 800a60e:	4649      	mov	r1, r9
 800a610:	4642      	mov	r2, r8
 800a612:	4658      	mov	r0, fp
 800a614:	f000 fcbe 	bl	800af94 <__lshift>
 800a618:	4681      	mov	r9, r0
 800a61a:	9b08      	ldr	r3, [sp, #32]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dd05      	ble.n	800a62c <_dtoa_r+0x83c>
 800a620:	4621      	mov	r1, r4
 800a622:	461a      	mov	r2, r3
 800a624:	4658      	mov	r0, fp
 800a626:	f000 fcb5 	bl	800af94 <__lshift>
 800a62a:	4604      	mov	r4, r0
 800a62c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d059      	beq.n	800a6e6 <_dtoa_r+0x8f6>
 800a632:	4621      	mov	r1, r4
 800a634:	4648      	mov	r0, r9
 800a636:	f000 fd19 	bl	800b06c <__mcmp>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	da53      	bge.n	800a6e6 <_dtoa_r+0x8f6>
 800a63e:	1e7b      	subs	r3, r7, #1
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	4649      	mov	r1, r9
 800a644:	2300      	movs	r3, #0
 800a646:	220a      	movs	r2, #10
 800a648:	4658      	mov	r0, fp
 800a64a:	f000 faf7 	bl	800ac3c <__multadd>
 800a64e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a650:	4681      	mov	r9, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8172 	beq.w	800a93c <_dtoa_r+0xb4c>
 800a658:	2300      	movs	r3, #0
 800a65a:	4629      	mov	r1, r5
 800a65c:	220a      	movs	r2, #10
 800a65e:	4658      	mov	r0, fp
 800a660:	f000 faec 	bl	800ac3c <__multadd>
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	4605      	mov	r5, r0
 800a66a:	dc67      	bgt.n	800a73c <_dtoa_r+0x94c>
 800a66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66e:	2b02      	cmp	r3, #2
 800a670:	dc41      	bgt.n	800a6f6 <_dtoa_r+0x906>
 800a672:	e063      	b.n	800a73c <_dtoa_r+0x94c>
 800a674:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a676:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a67a:	e746      	b.n	800a50a <_dtoa_r+0x71a>
 800a67c:	9b07      	ldr	r3, [sp, #28]
 800a67e:	1e5c      	subs	r4, r3, #1
 800a680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a682:	42a3      	cmp	r3, r4
 800a684:	bfbf      	itttt	lt
 800a686:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a688:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a68a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a68c:	1ae3      	sublt	r3, r4, r3
 800a68e:	bfb4      	ite	lt
 800a690:	18d2      	addlt	r2, r2, r3
 800a692:	1b1c      	subge	r4, r3, r4
 800a694:	9b07      	ldr	r3, [sp, #28]
 800a696:	bfbc      	itt	lt
 800a698:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a69a:	2400      	movlt	r4, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bfb5      	itete	lt
 800a6a0:	eba8 0603 	sublt.w	r6, r8, r3
 800a6a4:	9b07      	ldrge	r3, [sp, #28]
 800a6a6:	2300      	movlt	r3, #0
 800a6a8:	4646      	movge	r6, r8
 800a6aa:	e730      	b.n	800a50e <_dtoa_r+0x71e>
 800a6ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a6b0:	4646      	mov	r6, r8
 800a6b2:	e735      	b.n	800a520 <_dtoa_r+0x730>
 800a6b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6b6:	e75c      	b.n	800a572 <_dtoa_r+0x782>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e788      	b.n	800a5ce <_dtoa_r+0x7de>
 800a6bc:	3fe00000 	.word	0x3fe00000
 800a6c0:	40240000 	.word	0x40240000
 800a6c4:	40140000 	.word	0x40140000
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	e780      	b.n	800a5ce <_dtoa_r+0x7de>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d0:	e782      	b.n	800a5d8 <_dtoa_r+0x7e8>
 800a6d2:	d099      	beq.n	800a608 <_dtoa_r+0x818>
 800a6d4:	9a08      	ldr	r2, [sp, #32]
 800a6d6:	331c      	adds	r3, #28
 800a6d8:	441a      	add	r2, r3
 800a6da:	4498      	add	r8, r3
 800a6dc:	441e      	add	r6, r3
 800a6de:	9208      	str	r2, [sp, #32]
 800a6e0:	e792      	b.n	800a608 <_dtoa_r+0x818>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	e7f6      	b.n	800a6d4 <_dtoa_r+0x8e4>
 800a6e6:	9b07      	ldr	r3, [sp, #28]
 800a6e8:	9704      	str	r7, [sp, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dc20      	bgt.n	800a730 <_dtoa_r+0x940>
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	dd1e      	ble.n	800a734 <_dtoa_r+0x944>
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f47f aec0 	bne.w	800a47e <_dtoa_r+0x68e>
 800a6fe:	4621      	mov	r1, r4
 800a700:	2205      	movs	r2, #5
 800a702:	4658      	mov	r0, fp
 800a704:	f000 fa9a 	bl	800ac3c <__multadd>
 800a708:	4601      	mov	r1, r0
 800a70a:	4604      	mov	r4, r0
 800a70c:	4648      	mov	r0, r9
 800a70e:	f000 fcad 	bl	800b06c <__mcmp>
 800a712:	2800      	cmp	r0, #0
 800a714:	f77f aeb3 	ble.w	800a47e <_dtoa_r+0x68e>
 800a718:	4656      	mov	r6, sl
 800a71a:	2331      	movs	r3, #49	@ 0x31
 800a71c:	f806 3b01 	strb.w	r3, [r6], #1
 800a720:	9b04      	ldr	r3, [sp, #16]
 800a722:	3301      	adds	r3, #1
 800a724:	9304      	str	r3, [sp, #16]
 800a726:	e6ae      	b.n	800a486 <_dtoa_r+0x696>
 800a728:	9c07      	ldr	r4, [sp, #28]
 800a72a:	9704      	str	r7, [sp, #16]
 800a72c:	4625      	mov	r5, r4
 800a72e:	e7f3      	b.n	800a718 <_dtoa_r+0x928>
 800a730:	9b07      	ldr	r3, [sp, #28]
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 8104 	beq.w	800a944 <_dtoa_r+0xb54>
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	dd05      	ble.n	800a74c <_dtoa_r+0x95c>
 800a740:	4629      	mov	r1, r5
 800a742:	4632      	mov	r2, r6
 800a744:	4658      	mov	r0, fp
 800a746:	f000 fc25 	bl	800af94 <__lshift>
 800a74a:	4605      	mov	r5, r0
 800a74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d05a      	beq.n	800a808 <_dtoa_r+0xa18>
 800a752:	6869      	ldr	r1, [r5, #4]
 800a754:	4658      	mov	r0, fp
 800a756:	f000 fa0f 	bl	800ab78 <_Balloc>
 800a75a:	4606      	mov	r6, r0
 800a75c:	b928      	cbnz	r0, 800a76a <_dtoa_r+0x97a>
 800a75e:	4b84      	ldr	r3, [pc, #528]	@ (800a970 <_dtoa_r+0xb80>)
 800a760:	4602      	mov	r2, r0
 800a762:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a766:	f7ff bb5a 	b.w	8009e1e <_dtoa_r+0x2e>
 800a76a:	692a      	ldr	r2, [r5, #16]
 800a76c:	3202      	adds	r2, #2
 800a76e:	0092      	lsls	r2, r2, #2
 800a770:	f105 010c 	add.w	r1, r5, #12
 800a774:	300c      	adds	r0, #12
 800a776:	f000 fe3d 	bl	800b3f4 <memcpy>
 800a77a:	2201      	movs	r2, #1
 800a77c:	4631      	mov	r1, r6
 800a77e:	4658      	mov	r0, fp
 800a780:	f000 fc08 	bl	800af94 <__lshift>
 800a784:	f10a 0301 	add.w	r3, sl, #1
 800a788:	9307      	str	r3, [sp, #28]
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	4453      	add	r3, sl
 800a78e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a790:	9b02      	ldr	r3, [sp, #8]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	462f      	mov	r7, r5
 800a798:	930a      	str	r3, [sp, #40]	@ 0x28
 800a79a:	4605      	mov	r5, r0
 800a79c:	9b07      	ldr	r3, [sp, #28]
 800a79e:	4621      	mov	r1, r4
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	4648      	mov	r0, r9
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	f7ff fa9a 	bl	8009cde <quorem>
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	9002      	str	r0, [sp, #8]
 800a7ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7b2:	4648      	mov	r0, r9
 800a7b4:	f000 fc5a 	bl	800b06c <__mcmp>
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	9008      	str	r0, [sp, #32]
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4658      	mov	r0, fp
 800a7c0:	f000 fc70 	bl	800b0a4 <__mdiff>
 800a7c4:	68c2      	ldr	r2, [r0, #12]
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	bb02      	cbnz	r2, 800a80c <_dtoa_r+0xa1c>
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4648      	mov	r0, r9
 800a7ce:	f000 fc4d 	bl	800b06c <__mcmp>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4658      	mov	r0, fp
 800a7d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7da:	f000 fa0d 	bl	800abf8 <_Bfree>
 800a7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7e2:	9e07      	ldr	r6, [sp, #28]
 800a7e4:	ea43 0102 	orr.w	r1, r3, r2
 800a7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ea:	4319      	orrs	r1, r3
 800a7ec:	d110      	bne.n	800a810 <_dtoa_r+0xa20>
 800a7ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7f2:	d029      	beq.n	800a848 <_dtoa_r+0xa58>
 800a7f4:	9b08      	ldr	r3, [sp, #32]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dd02      	ble.n	800a800 <_dtoa_r+0xa10>
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a800:	9b00      	ldr	r3, [sp, #0]
 800a802:	f883 8000 	strb.w	r8, [r3]
 800a806:	e63f      	b.n	800a488 <_dtoa_r+0x698>
 800a808:	4628      	mov	r0, r5
 800a80a:	e7bb      	b.n	800a784 <_dtoa_r+0x994>
 800a80c:	2201      	movs	r2, #1
 800a80e:	e7e1      	b.n	800a7d4 <_dtoa_r+0x9e4>
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	db04      	blt.n	800a820 <_dtoa_r+0xa30>
 800a816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a818:	430b      	orrs	r3, r1
 800a81a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a81c:	430b      	orrs	r3, r1
 800a81e:	d120      	bne.n	800a862 <_dtoa_r+0xa72>
 800a820:	2a00      	cmp	r2, #0
 800a822:	dded      	ble.n	800a800 <_dtoa_r+0xa10>
 800a824:	4649      	mov	r1, r9
 800a826:	2201      	movs	r2, #1
 800a828:	4658      	mov	r0, fp
 800a82a:	f000 fbb3 	bl	800af94 <__lshift>
 800a82e:	4621      	mov	r1, r4
 800a830:	4681      	mov	r9, r0
 800a832:	f000 fc1b 	bl	800b06c <__mcmp>
 800a836:	2800      	cmp	r0, #0
 800a838:	dc03      	bgt.n	800a842 <_dtoa_r+0xa52>
 800a83a:	d1e1      	bne.n	800a800 <_dtoa_r+0xa10>
 800a83c:	f018 0f01 	tst.w	r8, #1
 800a840:	d0de      	beq.n	800a800 <_dtoa_r+0xa10>
 800a842:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a846:	d1d8      	bne.n	800a7fa <_dtoa_r+0xa0a>
 800a848:	9a00      	ldr	r2, [sp, #0]
 800a84a:	2339      	movs	r3, #57	@ 0x39
 800a84c:	7013      	strb	r3, [r2, #0]
 800a84e:	4633      	mov	r3, r6
 800a850:	461e      	mov	r6, r3
 800a852:	3b01      	subs	r3, #1
 800a854:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a858:	2a39      	cmp	r2, #57	@ 0x39
 800a85a:	d052      	beq.n	800a902 <_dtoa_r+0xb12>
 800a85c:	3201      	adds	r2, #1
 800a85e:	701a      	strb	r2, [r3, #0]
 800a860:	e612      	b.n	800a488 <_dtoa_r+0x698>
 800a862:	2a00      	cmp	r2, #0
 800a864:	dd07      	ble.n	800a876 <_dtoa_r+0xa86>
 800a866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a86a:	d0ed      	beq.n	800a848 <_dtoa_r+0xa58>
 800a86c:	9a00      	ldr	r2, [sp, #0]
 800a86e:	f108 0301 	add.w	r3, r8, #1
 800a872:	7013      	strb	r3, [r2, #0]
 800a874:	e608      	b.n	800a488 <_dtoa_r+0x698>
 800a876:	9b07      	ldr	r3, [sp, #28]
 800a878:	9a07      	ldr	r2, [sp, #28]
 800a87a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a880:	4293      	cmp	r3, r2
 800a882:	d028      	beq.n	800a8d6 <_dtoa_r+0xae6>
 800a884:	4649      	mov	r1, r9
 800a886:	2300      	movs	r3, #0
 800a888:	220a      	movs	r2, #10
 800a88a:	4658      	mov	r0, fp
 800a88c:	f000 f9d6 	bl	800ac3c <__multadd>
 800a890:	42af      	cmp	r7, r5
 800a892:	4681      	mov	r9, r0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	f04f 020a 	mov.w	r2, #10
 800a89c:	4639      	mov	r1, r7
 800a89e:	4658      	mov	r0, fp
 800a8a0:	d107      	bne.n	800a8b2 <_dtoa_r+0xac2>
 800a8a2:	f000 f9cb 	bl	800ac3c <__multadd>
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	9b07      	ldr	r3, [sp, #28]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	9307      	str	r3, [sp, #28]
 800a8b0:	e774      	b.n	800a79c <_dtoa_r+0x9ac>
 800a8b2:	f000 f9c3 	bl	800ac3c <__multadd>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	220a      	movs	r2, #10
 800a8be:	4658      	mov	r0, fp
 800a8c0:	f000 f9bc 	bl	800ac3c <__multadd>
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	e7f0      	b.n	800a8aa <_dtoa_r+0xaba>
 800a8c8:	9b00      	ldr	r3, [sp, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bfcc      	ite	gt
 800a8ce:	461e      	movgt	r6, r3
 800a8d0:	2601      	movle	r6, #1
 800a8d2:	4456      	add	r6, sl
 800a8d4:	2700      	movs	r7, #0
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	2201      	movs	r2, #1
 800a8da:	4658      	mov	r0, fp
 800a8dc:	f000 fb5a 	bl	800af94 <__lshift>
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4681      	mov	r9, r0
 800a8e4:	f000 fbc2 	bl	800b06c <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	dcb0      	bgt.n	800a84e <_dtoa_r+0xa5e>
 800a8ec:	d102      	bne.n	800a8f4 <_dtoa_r+0xb04>
 800a8ee:	f018 0f01 	tst.w	r8, #1
 800a8f2:	d1ac      	bne.n	800a84e <_dtoa_r+0xa5e>
 800a8f4:	4633      	mov	r3, r6
 800a8f6:	461e      	mov	r6, r3
 800a8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8fc:	2a30      	cmp	r2, #48	@ 0x30
 800a8fe:	d0fa      	beq.n	800a8f6 <_dtoa_r+0xb06>
 800a900:	e5c2      	b.n	800a488 <_dtoa_r+0x698>
 800a902:	459a      	cmp	sl, r3
 800a904:	d1a4      	bne.n	800a850 <_dtoa_r+0xa60>
 800a906:	9b04      	ldr	r3, [sp, #16]
 800a908:	3301      	adds	r3, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	2331      	movs	r3, #49	@ 0x31
 800a90e:	f88a 3000 	strb.w	r3, [sl]
 800a912:	e5b9      	b.n	800a488 <_dtoa_r+0x698>
 800a914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a916:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a974 <_dtoa_r+0xb84>
 800a91a:	b11b      	cbz	r3, 800a924 <_dtoa_r+0xb34>
 800a91c:	f10a 0308 	add.w	r3, sl, #8
 800a920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	4650      	mov	r0, sl
 800a926:	b019      	add	sp, #100	@ 0x64
 800a928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a92e:	2b01      	cmp	r3, #1
 800a930:	f77f ae37 	ble.w	800a5a2 <_dtoa_r+0x7b2>
 800a934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a936:	930a      	str	r3, [sp, #40]	@ 0x28
 800a938:	2001      	movs	r0, #1
 800a93a:	e655      	b.n	800a5e8 <_dtoa_r+0x7f8>
 800a93c:	9b00      	ldr	r3, [sp, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f77f aed6 	ble.w	800a6f0 <_dtoa_r+0x900>
 800a944:	4656      	mov	r6, sl
 800a946:	4621      	mov	r1, r4
 800a948:	4648      	mov	r0, r9
 800a94a:	f7ff f9c8 	bl	8009cde <quorem>
 800a94e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a952:	f806 8b01 	strb.w	r8, [r6], #1
 800a956:	9b00      	ldr	r3, [sp, #0]
 800a958:	eba6 020a 	sub.w	r2, r6, sl
 800a95c:	4293      	cmp	r3, r2
 800a95e:	ddb3      	ble.n	800a8c8 <_dtoa_r+0xad8>
 800a960:	4649      	mov	r1, r9
 800a962:	2300      	movs	r3, #0
 800a964:	220a      	movs	r2, #10
 800a966:	4658      	mov	r0, fp
 800a968:	f000 f968 	bl	800ac3c <__multadd>
 800a96c:	4681      	mov	r9, r0
 800a96e:	e7ea      	b.n	800a946 <_dtoa_r+0xb56>
 800a970:	0800bb48 	.word	0x0800bb48
 800a974:	0800bacc 	.word	0x0800bacc

0800a978 <_free_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4605      	mov	r5, r0
 800a97c:	2900      	cmp	r1, #0
 800a97e:	d041      	beq.n	800aa04 <_free_r+0x8c>
 800a980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a984:	1f0c      	subs	r4, r1, #4
 800a986:	2b00      	cmp	r3, #0
 800a988:	bfb8      	it	lt
 800a98a:	18e4      	addlt	r4, r4, r3
 800a98c:	f000 f8e8 	bl	800ab60 <__malloc_lock>
 800a990:	4a1d      	ldr	r2, [pc, #116]	@ (800aa08 <_free_r+0x90>)
 800a992:	6813      	ldr	r3, [r2, #0]
 800a994:	b933      	cbnz	r3, 800a9a4 <_free_r+0x2c>
 800a996:	6063      	str	r3, [r4, #4]
 800a998:	6014      	str	r4, [r2, #0]
 800a99a:	4628      	mov	r0, r5
 800a99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9a0:	f000 b8e4 	b.w	800ab6c <__malloc_unlock>
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d908      	bls.n	800a9ba <_free_r+0x42>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	1821      	adds	r1, r4, r0
 800a9ac:	428b      	cmp	r3, r1
 800a9ae:	bf01      	itttt	eq
 800a9b0:	6819      	ldreq	r1, [r3, #0]
 800a9b2:	685b      	ldreq	r3, [r3, #4]
 800a9b4:	1809      	addeq	r1, r1, r0
 800a9b6:	6021      	streq	r1, [r4, #0]
 800a9b8:	e7ed      	b.n	800a996 <_free_r+0x1e>
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	b10b      	cbz	r3, 800a9c4 <_free_r+0x4c>
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d9fa      	bls.n	800a9ba <_free_r+0x42>
 800a9c4:	6811      	ldr	r1, [r2, #0]
 800a9c6:	1850      	adds	r0, r2, r1
 800a9c8:	42a0      	cmp	r0, r4
 800a9ca:	d10b      	bne.n	800a9e4 <_free_r+0x6c>
 800a9cc:	6820      	ldr	r0, [r4, #0]
 800a9ce:	4401      	add	r1, r0
 800a9d0:	1850      	adds	r0, r2, r1
 800a9d2:	4283      	cmp	r3, r0
 800a9d4:	6011      	str	r1, [r2, #0]
 800a9d6:	d1e0      	bne.n	800a99a <_free_r+0x22>
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	6053      	str	r3, [r2, #4]
 800a9de:	4408      	add	r0, r1
 800a9e0:	6010      	str	r0, [r2, #0]
 800a9e2:	e7da      	b.n	800a99a <_free_r+0x22>
 800a9e4:	d902      	bls.n	800a9ec <_free_r+0x74>
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	602b      	str	r3, [r5, #0]
 800a9ea:	e7d6      	b.n	800a99a <_free_r+0x22>
 800a9ec:	6820      	ldr	r0, [r4, #0]
 800a9ee:	1821      	adds	r1, r4, r0
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf04      	itt	eq
 800a9f4:	6819      	ldreq	r1, [r3, #0]
 800a9f6:	685b      	ldreq	r3, [r3, #4]
 800a9f8:	6063      	str	r3, [r4, #4]
 800a9fa:	bf04      	itt	eq
 800a9fc:	1809      	addeq	r1, r1, r0
 800a9fe:	6021      	streq	r1, [r4, #0]
 800aa00:	6054      	str	r4, [r2, #4]
 800aa02:	e7ca      	b.n	800a99a <_free_r+0x22>
 800aa04:	bd38      	pop	{r3, r4, r5, pc}
 800aa06:	bf00      	nop
 800aa08:	20006150 	.word	0x20006150

0800aa0c <malloc>:
 800aa0c:	4b02      	ldr	r3, [pc, #8]	@ (800aa18 <malloc+0xc>)
 800aa0e:	4601      	mov	r1, r0
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f000 b825 	b.w	800aa60 <_malloc_r>
 800aa16:	bf00      	nop
 800aa18:	20000108 	.word	0x20000108

0800aa1c <sbrk_aligned>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	4e0f      	ldr	r6, [pc, #60]	@ (800aa5c <sbrk_aligned+0x40>)
 800aa20:	460c      	mov	r4, r1
 800aa22:	6831      	ldr	r1, [r6, #0]
 800aa24:	4605      	mov	r5, r0
 800aa26:	b911      	cbnz	r1, 800aa2e <sbrk_aligned+0x12>
 800aa28:	f000 fcd4 	bl	800b3d4 <_sbrk_r>
 800aa2c:	6030      	str	r0, [r6, #0]
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 fccf 	bl	800b3d4 <_sbrk_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d103      	bne.n	800aa42 <sbrk_aligned+0x26>
 800aa3a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa3e:	4620      	mov	r0, r4
 800aa40:	bd70      	pop	{r4, r5, r6, pc}
 800aa42:	1cc4      	adds	r4, r0, #3
 800aa44:	f024 0403 	bic.w	r4, r4, #3
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d0f8      	beq.n	800aa3e <sbrk_aligned+0x22>
 800aa4c:	1a21      	subs	r1, r4, r0
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 fcc0 	bl	800b3d4 <_sbrk_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d1f2      	bne.n	800aa3e <sbrk_aligned+0x22>
 800aa58:	e7ef      	b.n	800aa3a <sbrk_aligned+0x1e>
 800aa5a:	bf00      	nop
 800aa5c:	2000614c 	.word	0x2000614c

0800aa60 <_malloc_r>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	1ccd      	adds	r5, r1, #3
 800aa66:	f025 0503 	bic.w	r5, r5, #3
 800aa6a:	3508      	adds	r5, #8
 800aa6c:	2d0c      	cmp	r5, #12
 800aa6e:	bf38      	it	cc
 800aa70:	250c      	movcc	r5, #12
 800aa72:	2d00      	cmp	r5, #0
 800aa74:	4606      	mov	r6, r0
 800aa76:	db01      	blt.n	800aa7c <_malloc_r+0x1c>
 800aa78:	42a9      	cmp	r1, r5
 800aa7a:	d904      	bls.n	800aa86 <_malloc_r+0x26>
 800aa7c:	230c      	movs	r3, #12
 800aa7e:	6033      	str	r3, [r6, #0]
 800aa80:	2000      	movs	r0, #0
 800aa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab5c <_malloc_r+0xfc>
 800aa8a:	f000 f869 	bl	800ab60 <__malloc_lock>
 800aa8e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa92:	461c      	mov	r4, r3
 800aa94:	bb44      	cbnz	r4, 800aae8 <_malloc_r+0x88>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7ff ffbf 	bl	800aa1c <sbrk_aligned>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	d158      	bne.n	800ab56 <_malloc_r+0xf6>
 800aaa4:	f8d8 4000 	ldr.w	r4, [r8]
 800aaa8:	4627      	mov	r7, r4
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	d143      	bne.n	800ab36 <_malloc_r+0xd6>
 800aaae:	2c00      	cmp	r4, #0
 800aab0:	d04b      	beq.n	800ab4a <_malloc_r+0xea>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	4639      	mov	r1, r7
 800aab6:	4630      	mov	r0, r6
 800aab8:	eb04 0903 	add.w	r9, r4, r3
 800aabc:	f000 fc8a 	bl	800b3d4 <_sbrk_r>
 800aac0:	4581      	cmp	r9, r0
 800aac2:	d142      	bne.n	800ab4a <_malloc_r+0xea>
 800aac4:	6821      	ldr	r1, [r4, #0]
 800aac6:	1a6d      	subs	r5, r5, r1
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff ffa6 	bl	800aa1c <sbrk_aligned>
 800aad0:	3001      	adds	r0, #1
 800aad2:	d03a      	beq.n	800ab4a <_malloc_r+0xea>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	442b      	add	r3, r5
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	f8d8 3000 	ldr.w	r3, [r8]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	bb62      	cbnz	r2, 800ab3c <_malloc_r+0xdc>
 800aae2:	f8c8 7000 	str.w	r7, [r8]
 800aae6:	e00f      	b.n	800ab08 <_malloc_r+0xa8>
 800aae8:	6822      	ldr	r2, [r4, #0]
 800aaea:	1b52      	subs	r2, r2, r5
 800aaec:	d420      	bmi.n	800ab30 <_malloc_r+0xd0>
 800aaee:	2a0b      	cmp	r2, #11
 800aaf0:	d917      	bls.n	800ab22 <_malloc_r+0xc2>
 800aaf2:	1961      	adds	r1, r4, r5
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	6025      	str	r5, [r4, #0]
 800aaf8:	bf18      	it	ne
 800aafa:	6059      	strne	r1, [r3, #4]
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	bf08      	it	eq
 800ab00:	f8c8 1000 	streq.w	r1, [r8]
 800ab04:	5162      	str	r2, [r4, r5]
 800ab06:	604b      	str	r3, [r1, #4]
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f000 f82f 	bl	800ab6c <__malloc_unlock>
 800ab0e:	f104 000b 	add.w	r0, r4, #11
 800ab12:	1d23      	adds	r3, r4, #4
 800ab14:	f020 0007 	bic.w	r0, r0, #7
 800ab18:	1ac2      	subs	r2, r0, r3
 800ab1a:	bf1c      	itt	ne
 800ab1c:	1a1b      	subne	r3, r3, r0
 800ab1e:	50a3      	strne	r3, [r4, r2]
 800ab20:	e7af      	b.n	800aa82 <_malloc_r+0x22>
 800ab22:	6862      	ldr	r2, [r4, #4]
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	bf0c      	ite	eq
 800ab28:	f8c8 2000 	streq.w	r2, [r8]
 800ab2c:	605a      	strne	r2, [r3, #4]
 800ab2e:	e7eb      	b.n	800ab08 <_malloc_r+0xa8>
 800ab30:	4623      	mov	r3, r4
 800ab32:	6864      	ldr	r4, [r4, #4]
 800ab34:	e7ae      	b.n	800aa94 <_malloc_r+0x34>
 800ab36:	463c      	mov	r4, r7
 800ab38:	687f      	ldr	r7, [r7, #4]
 800ab3a:	e7b6      	b.n	800aaaa <_malloc_r+0x4a>
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	d1fb      	bne.n	800ab3c <_malloc_r+0xdc>
 800ab44:	2300      	movs	r3, #0
 800ab46:	6053      	str	r3, [r2, #4]
 800ab48:	e7de      	b.n	800ab08 <_malloc_r+0xa8>
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	6033      	str	r3, [r6, #0]
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f000 f80c 	bl	800ab6c <__malloc_unlock>
 800ab54:	e794      	b.n	800aa80 <_malloc_r+0x20>
 800ab56:	6005      	str	r5, [r0, #0]
 800ab58:	e7d6      	b.n	800ab08 <_malloc_r+0xa8>
 800ab5a:	bf00      	nop
 800ab5c:	20006150 	.word	0x20006150

0800ab60 <__malloc_lock>:
 800ab60:	4801      	ldr	r0, [pc, #4]	@ (800ab68 <__malloc_lock+0x8>)
 800ab62:	f7ff b8ba 	b.w	8009cda <__retarget_lock_acquire_recursive>
 800ab66:	bf00      	nop
 800ab68:	20006148 	.word	0x20006148

0800ab6c <__malloc_unlock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	@ (800ab74 <__malloc_unlock+0x8>)
 800ab6e:	f7ff b8b5 	b.w	8009cdc <__retarget_lock_release_recursive>
 800ab72:	bf00      	nop
 800ab74:	20006148 	.word	0x20006148

0800ab78 <_Balloc>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	69c6      	ldr	r6, [r0, #28]
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	460d      	mov	r5, r1
 800ab80:	b976      	cbnz	r6, 800aba0 <_Balloc+0x28>
 800ab82:	2010      	movs	r0, #16
 800ab84:	f7ff ff42 	bl	800aa0c <malloc>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	61e0      	str	r0, [r4, #28]
 800ab8c:	b920      	cbnz	r0, 800ab98 <_Balloc+0x20>
 800ab8e:	4b18      	ldr	r3, [pc, #96]	@ (800abf0 <_Balloc+0x78>)
 800ab90:	4818      	ldr	r0, [pc, #96]	@ (800abf4 <_Balloc+0x7c>)
 800ab92:	216b      	movs	r1, #107	@ 0x6b
 800ab94:	f000 fc3c 	bl	800b410 <__assert_func>
 800ab98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab9c:	6006      	str	r6, [r0, #0]
 800ab9e:	60c6      	str	r6, [r0, #12]
 800aba0:	69e6      	ldr	r6, [r4, #28]
 800aba2:	68f3      	ldr	r3, [r6, #12]
 800aba4:	b183      	cbz	r3, 800abc8 <_Balloc+0x50>
 800aba6:	69e3      	ldr	r3, [r4, #28]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abae:	b9b8      	cbnz	r0, 800abe0 <_Balloc+0x68>
 800abb0:	2101      	movs	r1, #1
 800abb2:	fa01 f605 	lsl.w	r6, r1, r5
 800abb6:	1d72      	adds	r2, r6, #5
 800abb8:	0092      	lsls	r2, r2, #2
 800abba:	4620      	mov	r0, r4
 800abbc:	f000 fc46 	bl	800b44c <_calloc_r>
 800abc0:	b160      	cbz	r0, 800abdc <_Balloc+0x64>
 800abc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abc6:	e00e      	b.n	800abe6 <_Balloc+0x6e>
 800abc8:	2221      	movs	r2, #33	@ 0x21
 800abca:	2104      	movs	r1, #4
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 fc3d 	bl	800b44c <_calloc_r>
 800abd2:	69e3      	ldr	r3, [r4, #28]
 800abd4:	60f0      	str	r0, [r6, #12]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e4      	bne.n	800aba6 <_Balloc+0x2e>
 800abdc:	2000      	movs	r0, #0
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	6802      	ldr	r2, [r0, #0]
 800abe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abe6:	2300      	movs	r3, #0
 800abe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abec:	e7f7      	b.n	800abde <_Balloc+0x66>
 800abee:	bf00      	nop
 800abf0:	0800bad9 	.word	0x0800bad9
 800abf4:	0800bb59 	.word	0x0800bb59

0800abf8 <_Bfree>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	69c6      	ldr	r6, [r0, #28]
 800abfc:	4605      	mov	r5, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	b976      	cbnz	r6, 800ac20 <_Bfree+0x28>
 800ac02:	2010      	movs	r0, #16
 800ac04:	f7ff ff02 	bl	800aa0c <malloc>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	61e8      	str	r0, [r5, #28]
 800ac0c:	b920      	cbnz	r0, 800ac18 <_Bfree+0x20>
 800ac0e:	4b09      	ldr	r3, [pc, #36]	@ (800ac34 <_Bfree+0x3c>)
 800ac10:	4809      	ldr	r0, [pc, #36]	@ (800ac38 <_Bfree+0x40>)
 800ac12:	218f      	movs	r1, #143	@ 0x8f
 800ac14:	f000 fbfc 	bl	800b410 <__assert_func>
 800ac18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac1c:	6006      	str	r6, [r0, #0]
 800ac1e:	60c6      	str	r6, [r0, #12]
 800ac20:	b13c      	cbz	r4, 800ac32 <_Bfree+0x3a>
 800ac22:	69eb      	ldr	r3, [r5, #28]
 800ac24:	6862      	ldr	r2, [r4, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac2c:	6021      	str	r1, [r4, #0]
 800ac2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	0800bad9 	.word	0x0800bad9
 800ac38:	0800bb59 	.word	0x0800bb59

0800ac3c <__multadd>:
 800ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac40:	690d      	ldr	r5, [r1, #16]
 800ac42:	4607      	mov	r7, r0
 800ac44:	460c      	mov	r4, r1
 800ac46:	461e      	mov	r6, r3
 800ac48:	f101 0c14 	add.w	ip, r1, #20
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac52:	b299      	uxth	r1, r3
 800ac54:	fb02 6101 	mla	r1, r2, r1, r6
 800ac58:	0c1e      	lsrs	r6, r3, #16
 800ac5a:	0c0b      	lsrs	r3, r1, #16
 800ac5c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac60:	b289      	uxth	r1, r1
 800ac62:	3001      	adds	r0, #1
 800ac64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac68:	4285      	cmp	r5, r0
 800ac6a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac72:	dcec      	bgt.n	800ac4e <__multadd+0x12>
 800ac74:	b30e      	cbz	r6, 800acba <__multadd+0x7e>
 800ac76:	68a3      	ldr	r3, [r4, #8]
 800ac78:	42ab      	cmp	r3, r5
 800ac7a:	dc19      	bgt.n	800acb0 <__multadd+0x74>
 800ac7c:	6861      	ldr	r1, [r4, #4]
 800ac7e:	4638      	mov	r0, r7
 800ac80:	3101      	adds	r1, #1
 800ac82:	f7ff ff79 	bl	800ab78 <_Balloc>
 800ac86:	4680      	mov	r8, r0
 800ac88:	b928      	cbnz	r0, 800ac96 <__multadd+0x5a>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <__multadd+0x84>)
 800ac8e:	480d      	ldr	r0, [pc, #52]	@ (800acc4 <__multadd+0x88>)
 800ac90:	21ba      	movs	r1, #186	@ 0xba
 800ac92:	f000 fbbd 	bl	800b410 <__assert_func>
 800ac96:	6922      	ldr	r2, [r4, #16]
 800ac98:	3202      	adds	r2, #2
 800ac9a:	f104 010c 	add.w	r1, r4, #12
 800ac9e:	0092      	lsls	r2, r2, #2
 800aca0:	300c      	adds	r0, #12
 800aca2:	f000 fba7 	bl	800b3f4 <memcpy>
 800aca6:	4621      	mov	r1, r4
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff ffa5 	bl	800abf8 <_Bfree>
 800acae:	4644      	mov	r4, r8
 800acb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acb4:	3501      	adds	r5, #1
 800acb6:	615e      	str	r6, [r3, #20]
 800acb8:	6125      	str	r5, [r4, #16]
 800acba:	4620      	mov	r0, r4
 800acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc0:	0800bb48 	.word	0x0800bb48
 800acc4:	0800bb59 	.word	0x0800bb59

0800acc8 <__hi0bits>:
 800acc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800accc:	4603      	mov	r3, r0
 800acce:	bf36      	itet	cc
 800acd0:	0403      	lslcc	r3, r0, #16
 800acd2:	2000      	movcs	r0, #0
 800acd4:	2010      	movcc	r0, #16
 800acd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acda:	bf3c      	itt	cc
 800acdc:	021b      	lslcc	r3, r3, #8
 800acde:	3008      	addcc	r0, #8
 800ace0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ace4:	bf3c      	itt	cc
 800ace6:	011b      	lslcc	r3, r3, #4
 800ace8:	3004      	addcc	r0, #4
 800acea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acee:	bf3c      	itt	cc
 800acf0:	009b      	lslcc	r3, r3, #2
 800acf2:	3002      	addcc	r0, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	db05      	blt.n	800ad04 <__hi0bits+0x3c>
 800acf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acfc:	f100 0001 	add.w	r0, r0, #1
 800ad00:	bf08      	it	eq
 800ad02:	2020      	moveq	r0, #32
 800ad04:	4770      	bx	lr

0800ad06 <__lo0bits>:
 800ad06:	6803      	ldr	r3, [r0, #0]
 800ad08:	4602      	mov	r2, r0
 800ad0a:	f013 0007 	ands.w	r0, r3, #7
 800ad0e:	d00b      	beq.n	800ad28 <__lo0bits+0x22>
 800ad10:	07d9      	lsls	r1, r3, #31
 800ad12:	d421      	bmi.n	800ad58 <__lo0bits+0x52>
 800ad14:	0798      	lsls	r0, r3, #30
 800ad16:	bf49      	itett	mi
 800ad18:	085b      	lsrmi	r3, r3, #1
 800ad1a:	089b      	lsrpl	r3, r3, #2
 800ad1c:	2001      	movmi	r0, #1
 800ad1e:	6013      	strmi	r3, [r2, #0]
 800ad20:	bf5c      	itt	pl
 800ad22:	6013      	strpl	r3, [r2, #0]
 800ad24:	2002      	movpl	r0, #2
 800ad26:	4770      	bx	lr
 800ad28:	b299      	uxth	r1, r3
 800ad2a:	b909      	cbnz	r1, 800ad30 <__lo0bits+0x2a>
 800ad2c:	0c1b      	lsrs	r3, r3, #16
 800ad2e:	2010      	movs	r0, #16
 800ad30:	b2d9      	uxtb	r1, r3
 800ad32:	b909      	cbnz	r1, 800ad38 <__lo0bits+0x32>
 800ad34:	3008      	adds	r0, #8
 800ad36:	0a1b      	lsrs	r3, r3, #8
 800ad38:	0719      	lsls	r1, r3, #28
 800ad3a:	bf04      	itt	eq
 800ad3c:	091b      	lsreq	r3, r3, #4
 800ad3e:	3004      	addeq	r0, #4
 800ad40:	0799      	lsls	r1, r3, #30
 800ad42:	bf04      	itt	eq
 800ad44:	089b      	lsreq	r3, r3, #2
 800ad46:	3002      	addeq	r0, #2
 800ad48:	07d9      	lsls	r1, r3, #31
 800ad4a:	d403      	bmi.n	800ad54 <__lo0bits+0x4e>
 800ad4c:	085b      	lsrs	r3, r3, #1
 800ad4e:	f100 0001 	add.w	r0, r0, #1
 800ad52:	d003      	beq.n	800ad5c <__lo0bits+0x56>
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	4770      	bx	lr
 800ad58:	2000      	movs	r0, #0
 800ad5a:	4770      	bx	lr
 800ad5c:	2020      	movs	r0, #32
 800ad5e:	4770      	bx	lr

0800ad60 <__i2b>:
 800ad60:	b510      	push	{r4, lr}
 800ad62:	460c      	mov	r4, r1
 800ad64:	2101      	movs	r1, #1
 800ad66:	f7ff ff07 	bl	800ab78 <_Balloc>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	b928      	cbnz	r0, 800ad7a <__i2b+0x1a>
 800ad6e:	4b05      	ldr	r3, [pc, #20]	@ (800ad84 <__i2b+0x24>)
 800ad70:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <__i2b+0x28>)
 800ad72:	f240 1145 	movw	r1, #325	@ 0x145
 800ad76:	f000 fb4b 	bl	800b410 <__assert_func>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	6144      	str	r4, [r0, #20]
 800ad7e:	6103      	str	r3, [r0, #16]
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	bf00      	nop
 800ad84:	0800bb48 	.word	0x0800bb48
 800ad88:	0800bb59 	.word	0x0800bb59

0800ad8c <__multiply>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	4614      	mov	r4, r2
 800ad92:	690a      	ldr	r2, [r1, #16]
 800ad94:	6923      	ldr	r3, [r4, #16]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	bfa8      	it	ge
 800ad9a:	4623      	movge	r3, r4
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	bfa4      	itt	ge
 800ada0:	460c      	movge	r4, r1
 800ada2:	461f      	movge	r7, r3
 800ada4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ada8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800adac:	68a3      	ldr	r3, [r4, #8]
 800adae:	6861      	ldr	r1, [r4, #4]
 800adb0:	eb0a 0609 	add.w	r6, sl, r9
 800adb4:	42b3      	cmp	r3, r6
 800adb6:	b085      	sub	sp, #20
 800adb8:	bfb8      	it	lt
 800adba:	3101      	addlt	r1, #1
 800adbc:	f7ff fedc 	bl	800ab78 <_Balloc>
 800adc0:	b930      	cbnz	r0, 800add0 <__multiply+0x44>
 800adc2:	4602      	mov	r2, r0
 800adc4:	4b44      	ldr	r3, [pc, #272]	@ (800aed8 <__multiply+0x14c>)
 800adc6:	4845      	ldr	r0, [pc, #276]	@ (800aedc <__multiply+0x150>)
 800adc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800adcc:	f000 fb20 	bl	800b410 <__assert_func>
 800add0:	f100 0514 	add.w	r5, r0, #20
 800add4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800add8:	462b      	mov	r3, r5
 800adda:	2200      	movs	r2, #0
 800addc:	4543      	cmp	r3, r8
 800adde:	d321      	bcc.n	800ae24 <__multiply+0x98>
 800ade0:	f107 0114 	add.w	r1, r7, #20
 800ade4:	f104 0214 	add.w	r2, r4, #20
 800ade8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800adec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	1b13      	subs	r3, r2, r4
 800adf4:	3b15      	subs	r3, #21
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	3304      	adds	r3, #4
 800adfc:	f104 0715 	add.w	r7, r4, #21
 800ae00:	42ba      	cmp	r2, r7
 800ae02:	bf38      	it	cc
 800ae04:	2304      	movcc	r3, #4
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	9103      	str	r1, [sp, #12]
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	d80c      	bhi.n	800ae2a <__multiply+0x9e>
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	dd03      	ble.n	800ae1c <__multiply+0x90>
 800ae14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d05b      	beq.n	800aed4 <__multiply+0x148>
 800ae1c:	6106      	str	r6, [r0, #16]
 800ae1e:	b005      	add	sp, #20
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	f843 2b04 	str.w	r2, [r3], #4
 800ae28:	e7d8      	b.n	800addc <__multiply+0x50>
 800ae2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae2e:	f1ba 0f00 	cmp.w	sl, #0
 800ae32:	d024      	beq.n	800ae7e <__multiply+0xf2>
 800ae34:	f104 0e14 	add.w	lr, r4, #20
 800ae38:	46a9      	mov	r9, r5
 800ae3a:	f04f 0c00 	mov.w	ip, #0
 800ae3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae42:	f8d9 3000 	ldr.w	r3, [r9]
 800ae46:	fa1f fb87 	uxth.w	fp, r7
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae54:	f8d9 7000 	ldr.w	r7, [r9]
 800ae58:	4463      	add	r3, ip
 800ae5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae6c:	4572      	cmp	r2, lr
 800ae6e:	f849 3b04 	str.w	r3, [r9], #4
 800ae72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae76:	d8e2      	bhi.n	800ae3e <__multiply+0xb2>
 800ae78:	9b01      	ldr	r3, [sp, #4]
 800ae7a:	f845 c003 	str.w	ip, [r5, r3]
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae84:	3104      	adds	r1, #4
 800ae86:	f1b9 0f00 	cmp.w	r9, #0
 800ae8a:	d021      	beq.n	800aed0 <__multiply+0x144>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	f104 0c14 	add.w	ip, r4, #20
 800ae92:	46ae      	mov	lr, r5
 800ae94:	f04f 0a00 	mov.w	sl, #0
 800ae98:	f8bc b000 	ldrh.w	fp, [ip]
 800ae9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aea0:	fb09 770b 	mla	r7, r9, fp, r7
 800aea4:	4457      	add	r7, sl
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aeac:	f84e 3b04 	str.w	r3, [lr], #4
 800aeb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aeb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeb8:	f8be 3000 	ldrh.w	r3, [lr]
 800aebc:	fb09 330a 	mla	r3, r9, sl, r3
 800aec0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aec4:	4562      	cmp	r2, ip
 800aec6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeca:	d8e5      	bhi.n	800ae98 <__multiply+0x10c>
 800aecc:	9f01      	ldr	r7, [sp, #4]
 800aece:	51eb      	str	r3, [r5, r7]
 800aed0:	3504      	adds	r5, #4
 800aed2:	e799      	b.n	800ae08 <__multiply+0x7c>
 800aed4:	3e01      	subs	r6, #1
 800aed6:	e79b      	b.n	800ae10 <__multiply+0x84>
 800aed8:	0800bb48 	.word	0x0800bb48
 800aedc:	0800bb59 	.word	0x0800bb59

0800aee0 <__pow5mult>:
 800aee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee4:	4615      	mov	r5, r2
 800aee6:	f012 0203 	ands.w	r2, r2, #3
 800aeea:	4607      	mov	r7, r0
 800aeec:	460e      	mov	r6, r1
 800aeee:	d007      	beq.n	800af00 <__pow5mult+0x20>
 800aef0:	4c25      	ldr	r4, [pc, #148]	@ (800af88 <__pow5mult+0xa8>)
 800aef2:	3a01      	subs	r2, #1
 800aef4:	2300      	movs	r3, #0
 800aef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aefa:	f7ff fe9f 	bl	800ac3c <__multadd>
 800aefe:	4606      	mov	r6, r0
 800af00:	10ad      	asrs	r5, r5, #2
 800af02:	d03d      	beq.n	800af80 <__pow5mult+0xa0>
 800af04:	69fc      	ldr	r4, [r7, #28]
 800af06:	b97c      	cbnz	r4, 800af28 <__pow5mult+0x48>
 800af08:	2010      	movs	r0, #16
 800af0a:	f7ff fd7f 	bl	800aa0c <malloc>
 800af0e:	4602      	mov	r2, r0
 800af10:	61f8      	str	r0, [r7, #28]
 800af12:	b928      	cbnz	r0, 800af20 <__pow5mult+0x40>
 800af14:	4b1d      	ldr	r3, [pc, #116]	@ (800af8c <__pow5mult+0xac>)
 800af16:	481e      	ldr	r0, [pc, #120]	@ (800af90 <__pow5mult+0xb0>)
 800af18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af1c:	f000 fa78 	bl	800b410 <__assert_func>
 800af20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af24:	6004      	str	r4, [r0, #0]
 800af26:	60c4      	str	r4, [r0, #12]
 800af28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af30:	b94c      	cbnz	r4, 800af46 <__pow5mult+0x66>
 800af32:	f240 2171 	movw	r1, #625	@ 0x271
 800af36:	4638      	mov	r0, r7
 800af38:	f7ff ff12 	bl	800ad60 <__i2b>
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af42:	4604      	mov	r4, r0
 800af44:	6003      	str	r3, [r0, #0]
 800af46:	f04f 0900 	mov.w	r9, #0
 800af4a:	07eb      	lsls	r3, r5, #31
 800af4c:	d50a      	bpl.n	800af64 <__pow5mult+0x84>
 800af4e:	4631      	mov	r1, r6
 800af50:	4622      	mov	r2, r4
 800af52:	4638      	mov	r0, r7
 800af54:	f7ff ff1a 	bl	800ad8c <__multiply>
 800af58:	4631      	mov	r1, r6
 800af5a:	4680      	mov	r8, r0
 800af5c:	4638      	mov	r0, r7
 800af5e:	f7ff fe4b 	bl	800abf8 <_Bfree>
 800af62:	4646      	mov	r6, r8
 800af64:	106d      	asrs	r5, r5, #1
 800af66:	d00b      	beq.n	800af80 <__pow5mult+0xa0>
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	b938      	cbnz	r0, 800af7c <__pow5mult+0x9c>
 800af6c:	4622      	mov	r2, r4
 800af6e:	4621      	mov	r1, r4
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff ff0b 	bl	800ad8c <__multiply>
 800af76:	6020      	str	r0, [r4, #0]
 800af78:	f8c0 9000 	str.w	r9, [r0]
 800af7c:	4604      	mov	r4, r0
 800af7e:	e7e4      	b.n	800af4a <__pow5mult+0x6a>
 800af80:	4630      	mov	r0, r6
 800af82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af86:	bf00      	nop
 800af88:	0800bbb4 	.word	0x0800bbb4
 800af8c:	0800bad9 	.word	0x0800bad9
 800af90:	0800bb59 	.word	0x0800bb59

0800af94 <__lshift>:
 800af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	460c      	mov	r4, r1
 800af9a:	6849      	ldr	r1, [r1, #4]
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	4607      	mov	r7, r0
 800afa6:	4691      	mov	r9, r2
 800afa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afac:	f108 0601 	add.w	r6, r8, #1
 800afb0:	42b3      	cmp	r3, r6
 800afb2:	db0b      	blt.n	800afcc <__lshift+0x38>
 800afb4:	4638      	mov	r0, r7
 800afb6:	f7ff fddf 	bl	800ab78 <_Balloc>
 800afba:	4605      	mov	r5, r0
 800afbc:	b948      	cbnz	r0, 800afd2 <__lshift+0x3e>
 800afbe:	4602      	mov	r2, r0
 800afc0:	4b28      	ldr	r3, [pc, #160]	@ (800b064 <__lshift+0xd0>)
 800afc2:	4829      	ldr	r0, [pc, #164]	@ (800b068 <__lshift+0xd4>)
 800afc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800afc8:	f000 fa22 	bl	800b410 <__assert_func>
 800afcc:	3101      	adds	r1, #1
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	e7ee      	b.n	800afb0 <__lshift+0x1c>
 800afd2:	2300      	movs	r3, #0
 800afd4:	f100 0114 	add.w	r1, r0, #20
 800afd8:	f100 0210 	add.w	r2, r0, #16
 800afdc:	4618      	mov	r0, r3
 800afde:	4553      	cmp	r3, sl
 800afe0:	db33      	blt.n	800b04a <__lshift+0xb6>
 800afe2:	6920      	ldr	r0, [r4, #16]
 800afe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afe8:	f104 0314 	add.w	r3, r4, #20
 800afec:	f019 091f 	ands.w	r9, r9, #31
 800aff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aff8:	d02b      	beq.n	800b052 <__lshift+0xbe>
 800affa:	f1c9 0e20 	rsb	lr, r9, #32
 800affe:	468a      	mov	sl, r1
 800b000:	2200      	movs	r2, #0
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	fa00 f009 	lsl.w	r0, r0, r9
 800b008:	4310      	orrs	r0, r2
 800b00a:	f84a 0b04 	str.w	r0, [sl], #4
 800b00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b012:	459c      	cmp	ip, r3
 800b014:	fa22 f20e 	lsr.w	r2, r2, lr
 800b018:	d8f3      	bhi.n	800b002 <__lshift+0x6e>
 800b01a:	ebac 0304 	sub.w	r3, ip, r4
 800b01e:	3b15      	subs	r3, #21
 800b020:	f023 0303 	bic.w	r3, r3, #3
 800b024:	3304      	adds	r3, #4
 800b026:	f104 0015 	add.w	r0, r4, #21
 800b02a:	4584      	cmp	ip, r0
 800b02c:	bf38      	it	cc
 800b02e:	2304      	movcc	r3, #4
 800b030:	50ca      	str	r2, [r1, r3]
 800b032:	b10a      	cbz	r2, 800b038 <__lshift+0xa4>
 800b034:	f108 0602 	add.w	r6, r8, #2
 800b038:	3e01      	subs	r6, #1
 800b03a:	4638      	mov	r0, r7
 800b03c:	612e      	str	r6, [r5, #16]
 800b03e:	4621      	mov	r1, r4
 800b040:	f7ff fdda 	bl	800abf8 <_Bfree>
 800b044:	4628      	mov	r0, r5
 800b046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b04e:	3301      	adds	r3, #1
 800b050:	e7c5      	b.n	800afde <__lshift+0x4a>
 800b052:	3904      	subs	r1, #4
 800b054:	f853 2b04 	ldr.w	r2, [r3], #4
 800b058:	f841 2f04 	str.w	r2, [r1, #4]!
 800b05c:	459c      	cmp	ip, r3
 800b05e:	d8f9      	bhi.n	800b054 <__lshift+0xc0>
 800b060:	e7ea      	b.n	800b038 <__lshift+0xa4>
 800b062:	bf00      	nop
 800b064:	0800bb48 	.word	0x0800bb48
 800b068:	0800bb59 	.word	0x0800bb59

0800b06c <__mcmp>:
 800b06c:	690a      	ldr	r2, [r1, #16]
 800b06e:	4603      	mov	r3, r0
 800b070:	6900      	ldr	r0, [r0, #16]
 800b072:	1a80      	subs	r0, r0, r2
 800b074:	b530      	push	{r4, r5, lr}
 800b076:	d10e      	bne.n	800b096 <__mcmp+0x2a>
 800b078:	3314      	adds	r3, #20
 800b07a:	3114      	adds	r1, #20
 800b07c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b080:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b08c:	4295      	cmp	r5, r2
 800b08e:	d003      	beq.n	800b098 <__mcmp+0x2c>
 800b090:	d205      	bcs.n	800b09e <__mcmp+0x32>
 800b092:	f04f 30ff 	mov.w	r0, #4294967295
 800b096:	bd30      	pop	{r4, r5, pc}
 800b098:	42a3      	cmp	r3, r4
 800b09a:	d3f3      	bcc.n	800b084 <__mcmp+0x18>
 800b09c:	e7fb      	b.n	800b096 <__mcmp+0x2a>
 800b09e:	2001      	movs	r0, #1
 800b0a0:	e7f9      	b.n	800b096 <__mcmp+0x2a>
	...

0800b0a4 <__mdiff>:
 800b0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4689      	mov	r9, r1
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4648      	mov	r0, r9
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	f7ff ffdb 	bl	800b06c <__mcmp>
 800b0b6:	1e05      	subs	r5, r0, #0
 800b0b8:	d112      	bne.n	800b0e0 <__mdiff+0x3c>
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff fd5b 	bl	800ab78 <_Balloc>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	b928      	cbnz	r0, 800b0d2 <__mdiff+0x2e>
 800b0c6:	4b3f      	ldr	r3, [pc, #252]	@ (800b1c4 <__mdiff+0x120>)
 800b0c8:	f240 2137 	movw	r1, #567	@ 0x237
 800b0cc:	483e      	ldr	r0, [pc, #248]	@ (800b1c8 <__mdiff+0x124>)
 800b0ce:	f000 f99f 	bl	800b410 <__assert_func>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0d8:	4610      	mov	r0, r2
 800b0da:	b003      	add	sp, #12
 800b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e0:	bfbc      	itt	lt
 800b0e2:	464b      	movlt	r3, r9
 800b0e4:	46a1      	movlt	r9, r4
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0ec:	bfba      	itte	lt
 800b0ee:	461c      	movlt	r4, r3
 800b0f0:	2501      	movlt	r5, #1
 800b0f2:	2500      	movge	r5, #0
 800b0f4:	f7ff fd40 	bl	800ab78 <_Balloc>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	b918      	cbnz	r0, 800b104 <__mdiff+0x60>
 800b0fc:	4b31      	ldr	r3, [pc, #196]	@ (800b1c4 <__mdiff+0x120>)
 800b0fe:	f240 2145 	movw	r1, #581	@ 0x245
 800b102:	e7e3      	b.n	800b0cc <__mdiff+0x28>
 800b104:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b108:	6926      	ldr	r6, [r4, #16]
 800b10a:	60c5      	str	r5, [r0, #12]
 800b10c:	f109 0310 	add.w	r3, r9, #16
 800b110:	f109 0514 	add.w	r5, r9, #20
 800b114:	f104 0e14 	add.w	lr, r4, #20
 800b118:	f100 0b14 	add.w	fp, r0, #20
 800b11c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b120:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	46d9      	mov	r9, fp
 800b128:	f04f 0c00 	mov.w	ip, #0
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b132:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	fa1f f38a 	uxth.w	r3, sl
 800b13c:	4619      	mov	r1, r3
 800b13e:	b283      	uxth	r3, r0
 800b140:	1acb      	subs	r3, r1, r3
 800b142:	0c00      	lsrs	r0, r0, #16
 800b144:	4463      	add	r3, ip
 800b146:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b14a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b14e:	b29b      	uxth	r3, r3
 800b150:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b154:	4576      	cmp	r6, lr
 800b156:	f849 3b04 	str.w	r3, [r9], #4
 800b15a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b15e:	d8e5      	bhi.n	800b12c <__mdiff+0x88>
 800b160:	1b33      	subs	r3, r6, r4
 800b162:	3b15      	subs	r3, #21
 800b164:	f023 0303 	bic.w	r3, r3, #3
 800b168:	3415      	adds	r4, #21
 800b16a:	3304      	adds	r3, #4
 800b16c:	42a6      	cmp	r6, r4
 800b16e:	bf38      	it	cc
 800b170:	2304      	movcc	r3, #4
 800b172:	441d      	add	r5, r3
 800b174:	445b      	add	r3, fp
 800b176:	461e      	mov	r6, r3
 800b178:	462c      	mov	r4, r5
 800b17a:	4544      	cmp	r4, r8
 800b17c:	d30e      	bcc.n	800b19c <__mdiff+0xf8>
 800b17e:	f108 0103 	add.w	r1, r8, #3
 800b182:	1b49      	subs	r1, r1, r5
 800b184:	f021 0103 	bic.w	r1, r1, #3
 800b188:	3d03      	subs	r5, #3
 800b18a:	45a8      	cmp	r8, r5
 800b18c:	bf38      	it	cc
 800b18e:	2100      	movcc	r1, #0
 800b190:	440b      	add	r3, r1
 800b192:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b196:	b191      	cbz	r1, 800b1be <__mdiff+0x11a>
 800b198:	6117      	str	r7, [r2, #16]
 800b19a:	e79d      	b.n	800b0d8 <__mdiff+0x34>
 800b19c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b1a0:	46e6      	mov	lr, ip
 800b1a2:	0c08      	lsrs	r0, r1, #16
 800b1a4:	fa1c fc81 	uxtah	ip, ip, r1
 800b1a8:	4471      	add	r1, lr
 800b1aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b1ae:	b289      	uxth	r1, r1
 800b1b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b1b4:	f846 1b04 	str.w	r1, [r6], #4
 800b1b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1bc:	e7dd      	b.n	800b17a <__mdiff+0xd6>
 800b1be:	3f01      	subs	r7, #1
 800b1c0:	e7e7      	b.n	800b192 <__mdiff+0xee>
 800b1c2:	bf00      	nop
 800b1c4:	0800bb48 	.word	0x0800bb48
 800b1c8:	0800bb59 	.word	0x0800bb59

0800b1cc <__d2b>:
 800b1cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	ec59 8b10 	vmov	r8, r9, d0
 800b1d8:	4616      	mov	r6, r2
 800b1da:	f7ff fccd 	bl	800ab78 <_Balloc>
 800b1de:	4604      	mov	r4, r0
 800b1e0:	b930      	cbnz	r0, 800b1f0 <__d2b+0x24>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	4b23      	ldr	r3, [pc, #140]	@ (800b274 <__d2b+0xa8>)
 800b1e6:	4824      	ldr	r0, [pc, #144]	@ (800b278 <__d2b+0xac>)
 800b1e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1ec:	f000 f910 	bl	800b410 <__assert_func>
 800b1f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1f8:	b10d      	cbz	r5, 800b1fe <__d2b+0x32>
 800b1fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	f1b8 0300 	subs.w	r3, r8, #0
 800b204:	d023      	beq.n	800b24e <__d2b+0x82>
 800b206:	4668      	mov	r0, sp
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	f7ff fd7c 	bl	800ad06 <__lo0bits>
 800b20e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b212:	b1d0      	cbz	r0, 800b24a <__d2b+0x7e>
 800b214:	f1c0 0320 	rsb	r3, r0, #32
 800b218:	fa02 f303 	lsl.w	r3, r2, r3
 800b21c:	430b      	orrs	r3, r1
 800b21e:	40c2      	lsrs	r2, r0
 800b220:	6163      	str	r3, [r4, #20]
 800b222:	9201      	str	r2, [sp, #4]
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	61a3      	str	r3, [r4, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bf0c      	ite	eq
 800b22c:	2201      	moveq	r2, #1
 800b22e:	2202      	movne	r2, #2
 800b230:	6122      	str	r2, [r4, #16]
 800b232:	b1a5      	cbz	r5, 800b25e <__d2b+0x92>
 800b234:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b238:	4405      	add	r5, r0
 800b23a:	603d      	str	r5, [r7, #0]
 800b23c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b240:	6030      	str	r0, [r6, #0]
 800b242:	4620      	mov	r0, r4
 800b244:	b003      	add	sp, #12
 800b246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b24a:	6161      	str	r1, [r4, #20]
 800b24c:	e7ea      	b.n	800b224 <__d2b+0x58>
 800b24e:	a801      	add	r0, sp, #4
 800b250:	f7ff fd59 	bl	800ad06 <__lo0bits>
 800b254:	9b01      	ldr	r3, [sp, #4]
 800b256:	6163      	str	r3, [r4, #20]
 800b258:	3020      	adds	r0, #32
 800b25a:	2201      	movs	r2, #1
 800b25c:	e7e8      	b.n	800b230 <__d2b+0x64>
 800b25e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b262:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b266:	6038      	str	r0, [r7, #0]
 800b268:	6918      	ldr	r0, [r3, #16]
 800b26a:	f7ff fd2d 	bl	800acc8 <__hi0bits>
 800b26e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b272:	e7e5      	b.n	800b240 <__d2b+0x74>
 800b274:	0800bb48 	.word	0x0800bb48
 800b278:	0800bb59 	.word	0x0800bb59

0800b27c <__sflush_r>:
 800b27c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	0716      	lsls	r6, r2, #28
 800b286:	4605      	mov	r5, r0
 800b288:	460c      	mov	r4, r1
 800b28a:	d454      	bmi.n	800b336 <__sflush_r+0xba>
 800b28c:	684b      	ldr	r3, [r1, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	dc02      	bgt.n	800b298 <__sflush_r+0x1c>
 800b292:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b294:	2b00      	cmp	r3, #0
 800b296:	dd48      	ble.n	800b32a <__sflush_r+0xae>
 800b298:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	d045      	beq.n	800b32a <__sflush_r+0xae>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2a4:	682f      	ldr	r7, [r5, #0]
 800b2a6:	6a21      	ldr	r1, [r4, #32]
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	d030      	beq.n	800b30e <__sflush_r+0x92>
 800b2ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	0759      	lsls	r1, r3, #29
 800b2b2:	d505      	bpl.n	800b2c0 <__sflush_r+0x44>
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	1ad2      	subs	r2, r2, r3
 800b2b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2ba:	b10b      	cbz	r3, 800b2c0 <__sflush_r+0x44>
 800b2bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2be:	1ad2      	subs	r2, r2, r3
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2c4:	6a21      	ldr	r1, [r4, #32]
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	47b0      	blx	r6
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	d106      	bne.n	800b2de <__sflush_r+0x62>
 800b2d0:	6829      	ldr	r1, [r5, #0]
 800b2d2:	291d      	cmp	r1, #29
 800b2d4:	d82b      	bhi.n	800b32e <__sflush_r+0xb2>
 800b2d6:	4a2a      	ldr	r2, [pc, #168]	@ (800b380 <__sflush_r+0x104>)
 800b2d8:	410a      	asrs	r2, r1
 800b2da:	07d6      	lsls	r6, r2, #31
 800b2dc:	d427      	bmi.n	800b32e <__sflush_r+0xb2>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	6062      	str	r2, [r4, #4]
 800b2e2:	04d9      	lsls	r1, r3, #19
 800b2e4:	6922      	ldr	r2, [r4, #16]
 800b2e6:	6022      	str	r2, [r4, #0]
 800b2e8:	d504      	bpl.n	800b2f4 <__sflush_r+0x78>
 800b2ea:	1c42      	adds	r2, r0, #1
 800b2ec:	d101      	bne.n	800b2f2 <__sflush_r+0x76>
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	b903      	cbnz	r3, 800b2f4 <__sflush_r+0x78>
 800b2f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2f6:	602f      	str	r7, [r5, #0]
 800b2f8:	b1b9      	cbz	r1, 800b32a <__sflush_r+0xae>
 800b2fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2fe:	4299      	cmp	r1, r3
 800b300:	d002      	beq.n	800b308 <__sflush_r+0x8c>
 800b302:	4628      	mov	r0, r5
 800b304:	f7ff fb38 	bl	800a978 <_free_r>
 800b308:	2300      	movs	r3, #0
 800b30a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b30c:	e00d      	b.n	800b32a <__sflush_r+0xae>
 800b30e:	2301      	movs	r3, #1
 800b310:	4628      	mov	r0, r5
 800b312:	47b0      	blx	r6
 800b314:	4602      	mov	r2, r0
 800b316:	1c50      	adds	r0, r2, #1
 800b318:	d1c9      	bne.n	800b2ae <__sflush_r+0x32>
 800b31a:	682b      	ldr	r3, [r5, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0c6      	beq.n	800b2ae <__sflush_r+0x32>
 800b320:	2b1d      	cmp	r3, #29
 800b322:	d001      	beq.n	800b328 <__sflush_r+0xac>
 800b324:	2b16      	cmp	r3, #22
 800b326:	d11e      	bne.n	800b366 <__sflush_r+0xea>
 800b328:	602f      	str	r7, [r5, #0]
 800b32a:	2000      	movs	r0, #0
 800b32c:	e022      	b.n	800b374 <__sflush_r+0xf8>
 800b32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b332:	b21b      	sxth	r3, r3
 800b334:	e01b      	b.n	800b36e <__sflush_r+0xf2>
 800b336:	690f      	ldr	r7, [r1, #16]
 800b338:	2f00      	cmp	r7, #0
 800b33a:	d0f6      	beq.n	800b32a <__sflush_r+0xae>
 800b33c:	0793      	lsls	r3, r2, #30
 800b33e:	680e      	ldr	r6, [r1, #0]
 800b340:	bf08      	it	eq
 800b342:	694b      	ldreq	r3, [r1, #20]
 800b344:	600f      	str	r7, [r1, #0]
 800b346:	bf18      	it	ne
 800b348:	2300      	movne	r3, #0
 800b34a:	eba6 0807 	sub.w	r8, r6, r7
 800b34e:	608b      	str	r3, [r1, #8]
 800b350:	f1b8 0f00 	cmp.w	r8, #0
 800b354:	dde9      	ble.n	800b32a <__sflush_r+0xae>
 800b356:	6a21      	ldr	r1, [r4, #32]
 800b358:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b35a:	4643      	mov	r3, r8
 800b35c:	463a      	mov	r2, r7
 800b35e:	4628      	mov	r0, r5
 800b360:	47b0      	blx	r6
 800b362:	2800      	cmp	r0, #0
 800b364:	dc08      	bgt.n	800b378 <__sflush_r+0xfc>
 800b366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	f04f 30ff 	mov.w	r0, #4294967295
 800b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b378:	4407      	add	r7, r0
 800b37a:	eba8 0800 	sub.w	r8, r8, r0
 800b37e:	e7e7      	b.n	800b350 <__sflush_r+0xd4>
 800b380:	dfbffffe 	.word	0xdfbffffe

0800b384 <_fflush_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	690b      	ldr	r3, [r1, #16]
 800b388:	4605      	mov	r5, r0
 800b38a:	460c      	mov	r4, r1
 800b38c:	b913      	cbnz	r3, 800b394 <_fflush_r+0x10>
 800b38e:	2500      	movs	r5, #0
 800b390:	4628      	mov	r0, r5
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	b118      	cbz	r0, 800b39e <_fflush_r+0x1a>
 800b396:	6a03      	ldr	r3, [r0, #32]
 800b398:	b90b      	cbnz	r3, 800b39e <_fflush_r+0x1a>
 800b39a:	f7fe fba7 	bl	8009aec <__sinit>
 800b39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0f3      	beq.n	800b38e <_fflush_r+0xa>
 800b3a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3a8:	07d0      	lsls	r0, r2, #31
 800b3aa:	d404      	bmi.n	800b3b6 <_fflush_r+0x32>
 800b3ac:	0599      	lsls	r1, r3, #22
 800b3ae:	d402      	bmi.n	800b3b6 <_fflush_r+0x32>
 800b3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3b2:	f7fe fc92 	bl	8009cda <__retarget_lock_acquire_recursive>
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	f7ff ff5f 	bl	800b27c <__sflush_r>
 800b3be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3c0:	07da      	lsls	r2, r3, #31
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	d4e4      	bmi.n	800b390 <_fflush_r+0xc>
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	059b      	lsls	r3, r3, #22
 800b3ca:	d4e1      	bmi.n	800b390 <_fflush_r+0xc>
 800b3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ce:	f7fe fc85 	bl	8009cdc <__retarget_lock_release_recursive>
 800b3d2:	e7dd      	b.n	800b390 <_fflush_r+0xc>

0800b3d4 <_sbrk_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d06      	ldr	r5, [pc, #24]	@ (800b3f0 <_sbrk_r+0x1c>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f6 f934 	bl	800164c <_sbrk>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_sbrk_r+0x1a>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_sbrk_r+0x1a>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20006144 	.word	0x20006144

0800b3f4 <memcpy>:
 800b3f4:	440a      	add	r2, r1
 800b3f6:	4291      	cmp	r1, r2
 800b3f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3fc:	d100      	bne.n	800b400 <memcpy+0xc>
 800b3fe:	4770      	bx	lr
 800b400:	b510      	push	{r4, lr}
 800b402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b40a:	4291      	cmp	r1, r2
 800b40c:	d1f9      	bne.n	800b402 <memcpy+0xe>
 800b40e:	bd10      	pop	{r4, pc}

0800b410 <__assert_func>:
 800b410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b412:	4614      	mov	r4, r2
 800b414:	461a      	mov	r2, r3
 800b416:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <__assert_func+0x2c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4605      	mov	r5, r0
 800b41c:	68d8      	ldr	r0, [r3, #12]
 800b41e:	b954      	cbnz	r4, 800b436 <__assert_func+0x26>
 800b420:	4b07      	ldr	r3, [pc, #28]	@ (800b440 <__assert_func+0x30>)
 800b422:	461c      	mov	r4, r3
 800b424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b428:	9100      	str	r1, [sp, #0]
 800b42a:	462b      	mov	r3, r5
 800b42c:	4905      	ldr	r1, [pc, #20]	@ (800b444 <__assert_func+0x34>)
 800b42e:	f000 f841 	bl	800b4b4 <fiprintf>
 800b432:	f000 f851 	bl	800b4d8 <abort>
 800b436:	4b04      	ldr	r3, [pc, #16]	@ (800b448 <__assert_func+0x38>)
 800b438:	e7f4      	b.n	800b424 <__assert_func+0x14>
 800b43a:	bf00      	nop
 800b43c:	20000108 	.word	0x20000108
 800b440:	0800bcf5 	.word	0x0800bcf5
 800b444:	0800bcc7 	.word	0x0800bcc7
 800b448:	0800bcba 	.word	0x0800bcba

0800b44c <_calloc_r>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	fba1 5402 	umull	r5, r4, r1, r2
 800b452:	b93c      	cbnz	r4, 800b464 <_calloc_r+0x18>
 800b454:	4629      	mov	r1, r5
 800b456:	f7ff fb03 	bl	800aa60 <_malloc_r>
 800b45a:	4606      	mov	r6, r0
 800b45c:	b928      	cbnz	r0, 800b46a <_calloc_r+0x1e>
 800b45e:	2600      	movs	r6, #0
 800b460:	4630      	mov	r0, r6
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	220c      	movs	r2, #12
 800b466:	6002      	str	r2, [r0, #0]
 800b468:	e7f9      	b.n	800b45e <_calloc_r+0x12>
 800b46a:	462a      	mov	r2, r5
 800b46c:	4621      	mov	r1, r4
 800b46e:	f7fe fbb6 	bl	8009bde <memset>
 800b472:	e7f5      	b.n	800b460 <_calloc_r+0x14>

0800b474 <__ascii_mbtowc>:
 800b474:	b082      	sub	sp, #8
 800b476:	b901      	cbnz	r1, 800b47a <__ascii_mbtowc+0x6>
 800b478:	a901      	add	r1, sp, #4
 800b47a:	b142      	cbz	r2, 800b48e <__ascii_mbtowc+0x1a>
 800b47c:	b14b      	cbz	r3, 800b492 <__ascii_mbtowc+0x1e>
 800b47e:	7813      	ldrb	r3, [r2, #0]
 800b480:	600b      	str	r3, [r1, #0]
 800b482:	7812      	ldrb	r2, [r2, #0]
 800b484:	1e10      	subs	r0, r2, #0
 800b486:	bf18      	it	ne
 800b488:	2001      	movne	r0, #1
 800b48a:	b002      	add	sp, #8
 800b48c:	4770      	bx	lr
 800b48e:	4610      	mov	r0, r2
 800b490:	e7fb      	b.n	800b48a <__ascii_mbtowc+0x16>
 800b492:	f06f 0001 	mvn.w	r0, #1
 800b496:	e7f8      	b.n	800b48a <__ascii_mbtowc+0x16>

0800b498 <__ascii_wctomb>:
 800b498:	4603      	mov	r3, r0
 800b49a:	4608      	mov	r0, r1
 800b49c:	b141      	cbz	r1, 800b4b0 <__ascii_wctomb+0x18>
 800b49e:	2aff      	cmp	r2, #255	@ 0xff
 800b4a0:	d904      	bls.n	800b4ac <__ascii_wctomb+0x14>
 800b4a2:	228a      	movs	r2, #138	@ 0x8a
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4aa:	4770      	bx	lr
 800b4ac:	700a      	strb	r2, [r1, #0]
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	4770      	bx	lr
	...

0800b4b4 <fiprintf>:
 800b4b4:	b40e      	push	{r1, r2, r3}
 800b4b6:	b503      	push	{r0, r1, lr}
 800b4b8:	4601      	mov	r1, r0
 800b4ba:	ab03      	add	r3, sp, #12
 800b4bc:	4805      	ldr	r0, [pc, #20]	@ (800b4d4 <fiprintf+0x20>)
 800b4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c2:	6800      	ldr	r0, [r0, #0]
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	f000 f837 	bl	800b538 <_vfiprintf_r>
 800b4ca:	b002      	add	sp, #8
 800b4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4d0:	b003      	add	sp, #12
 800b4d2:	4770      	bx	lr
 800b4d4:	20000108 	.word	0x20000108

0800b4d8 <abort>:
 800b4d8:	b508      	push	{r3, lr}
 800b4da:	2006      	movs	r0, #6
 800b4dc:	f000 fa00 	bl	800b8e0 <raise>
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	f7f6 f83b 	bl	800155c <_exit>

0800b4e6 <__sfputc_r>:
 800b4e6:	6893      	ldr	r3, [r2, #8]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	b410      	push	{r4}
 800b4ee:	6093      	str	r3, [r2, #8]
 800b4f0:	da08      	bge.n	800b504 <__sfputc_r+0x1e>
 800b4f2:	6994      	ldr	r4, [r2, #24]
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	db01      	blt.n	800b4fc <__sfputc_r+0x16>
 800b4f8:	290a      	cmp	r1, #10
 800b4fa:	d103      	bne.n	800b504 <__sfputc_r+0x1e>
 800b4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b500:	f000 b932 	b.w	800b768 <__swbuf_r>
 800b504:	6813      	ldr	r3, [r2, #0]
 800b506:	1c58      	adds	r0, r3, #1
 800b508:	6010      	str	r0, [r2, #0]
 800b50a:	7019      	strb	r1, [r3, #0]
 800b50c:	4608      	mov	r0, r1
 800b50e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <__sfputs_r>:
 800b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	4614      	mov	r4, r2
 800b51c:	18d5      	adds	r5, r2, r3
 800b51e:	42ac      	cmp	r4, r5
 800b520:	d101      	bne.n	800b526 <__sfputs_r+0x12>
 800b522:	2000      	movs	r0, #0
 800b524:	e007      	b.n	800b536 <__sfputs_r+0x22>
 800b526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b52a:	463a      	mov	r2, r7
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7ff ffda 	bl	800b4e6 <__sfputc_r>
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	d1f3      	bne.n	800b51e <__sfputs_r+0xa>
 800b536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b538 <_vfiprintf_r>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	460d      	mov	r5, r1
 800b53e:	b09d      	sub	sp, #116	@ 0x74
 800b540:	4614      	mov	r4, r2
 800b542:	4698      	mov	r8, r3
 800b544:	4606      	mov	r6, r0
 800b546:	b118      	cbz	r0, 800b550 <_vfiprintf_r+0x18>
 800b548:	6a03      	ldr	r3, [r0, #32]
 800b54a:	b90b      	cbnz	r3, 800b550 <_vfiprintf_r+0x18>
 800b54c:	f7fe face 	bl	8009aec <__sinit>
 800b550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b552:	07d9      	lsls	r1, r3, #31
 800b554:	d405      	bmi.n	800b562 <_vfiprintf_r+0x2a>
 800b556:	89ab      	ldrh	r3, [r5, #12]
 800b558:	059a      	lsls	r2, r3, #22
 800b55a:	d402      	bmi.n	800b562 <_vfiprintf_r+0x2a>
 800b55c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b55e:	f7fe fbbc 	bl	8009cda <__retarget_lock_acquire_recursive>
 800b562:	89ab      	ldrh	r3, [r5, #12]
 800b564:	071b      	lsls	r3, r3, #28
 800b566:	d501      	bpl.n	800b56c <_vfiprintf_r+0x34>
 800b568:	692b      	ldr	r3, [r5, #16]
 800b56a:	b99b      	cbnz	r3, 800b594 <_vfiprintf_r+0x5c>
 800b56c:	4629      	mov	r1, r5
 800b56e:	4630      	mov	r0, r6
 800b570:	f000 f938 	bl	800b7e4 <__swsetup_r>
 800b574:	b170      	cbz	r0, 800b594 <_vfiprintf_r+0x5c>
 800b576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b578:	07dc      	lsls	r4, r3, #31
 800b57a:	d504      	bpl.n	800b586 <_vfiprintf_r+0x4e>
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	b01d      	add	sp, #116	@ 0x74
 800b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b586:	89ab      	ldrh	r3, [r5, #12]
 800b588:	0598      	lsls	r0, r3, #22
 800b58a:	d4f7      	bmi.n	800b57c <_vfiprintf_r+0x44>
 800b58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b58e:	f7fe fba5 	bl	8009cdc <__retarget_lock_release_recursive>
 800b592:	e7f3      	b.n	800b57c <_vfiprintf_r+0x44>
 800b594:	2300      	movs	r3, #0
 800b596:	9309      	str	r3, [sp, #36]	@ 0x24
 800b598:	2320      	movs	r3, #32
 800b59a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5a2:	2330      	movs	r3, #48	@ 0x30
 800b5a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b754 <_vfiprintf_r+0x21c>
 800b5a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5ac:	f04f 0901 	mov.w	r9, #1
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	469a      	mov	sl, r3
 800b5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b8:	b10a      	cbz	r2, 800b5be <_vfiprintf_r+0x86>
 800b5ba:	2a25      	cmp	r2, #37	@ 0x25
 800b5bc:	d1f9      	bne.n	800b5b2 <_vfiprintf_r+0x7a>
 800b5be:	ebba 0b04 	subs.w	fp, sl, r4
 800b5c2:	d00b      	beq.n	800b5dc <_vfiprintf_r+0xa4>
 800b5c4:	465b      	mov	r3, fp
 800b5c6:	4622      	mov	r2, r4
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f7ff ffa2 	bl	800b514 <__sfputs_r>
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	f000 80a7 	beq.w	800b724 <_vfiprintf_r+0x1ec>
 800b5d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5d8:	445a      	add	r2, fp
 800b5da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f000 809f 	beq.w	800b724 <_vfiprintf_r+0x1ec>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f0:	f10a 0a01 	add.w	sl, sl, #1
 800b5f4:	9304      	str	r3, [sp, #16]
 800b5f6:	9307      	str	r3, [sp, #28]
 800b5f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5fe:	4654      	mov	r4, sl
 800b600:	2205      	movs	r2, #5
 800b602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b606:	4853      	ldr	r0, [pc, #332]	@ (800b754 <_vfiprintf_r+0x21c>)
 800b608:	f7f4 fde2 	bl	80001d0 <memchr>
 800b60c:	9a04      	ldr	r2, [sp, #16]
 800b60e:	b9d8      	cbnz	r0, 800b648 <_vfiprintf_r+0x110>
 800b610:	06d1      	lsls	r1, r2, #27
 800b612:	bf44      	itt	mi
 800b614:	2320      	movmi	r3, #32
 800b616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b61a:	0713      	lsls	r3, r2, #28
 800b61c:	bf44      	itt	mi
 800b61e:	232b      	movmi	r3, #43	@ 0x2b
 800b620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b624:	f89a 3000 	ldrb.w	r3, [sl]
 800b628:	2b2a      	cmp	r3, #42	@ 0x2a
 800b62a:	d015      	beq.n	800b658 <_vfiprintf_r+0x120>
 800b62c:	9a07      	ldr	r2, [sp, #28]
 800b62e:	4654      	mov	r4, sl
 800b630:	2000      	movs	r0, #0
 800b632:	f04f 0c0a 	mov.w	ip, #10
 800b636:	4621      	mov	r1, r4
 800b638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b63c:	3b30      	subs	r3, #48	@ 0x30
 800b63e:	2b09      	cmp	r3, #9
 800b640:	d94b      	bls.n	800b6da <_vfiprintf_r+0x1a2>
 800b642:	b1b0      	cbz	r0, 800b672 <_vfiprintf_r+0x13a>
 800b644:	9207      	str	r2, [sp, #28]
 800b646:	e014      	b.n	800b672 <_vfiprintf_r+0x13a>
 800b648:	eba0 0308 	sub.w	r3, r0, r8
 800b64c:	fa09 f303 	lsl.w	r3, r9, r3
 800b650:	4313      	orrs	r3, r2
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	46a2      	mov	sl, r4
 800b656:	e7d2      	b.n	800b5fe <_vfiprintf_r+0xc6>
 800b658:	9b03      	ldr	r3, [sp, #12]
 800b65a:	1d19      	adds	r1, r3, #4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	9103      	str	r1, [sp, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	bfbb      	ittet	lt
 800b664:	425b      	neglt	r3, r3
 800b666:	f042 0202 	orrlt.w	r2, r2, #2
 800b66a:	9307      	strge	r3, [sp, #28]
 800b66c:	9307      	strlt	r3, [sp, #28]
 800b66e:	bfb8      	it	lt
 800b670:	9204      	strlt	r2, [sp, #16]
 800b672:	7823      	ldrb	r3, [r4, #0]
 800b674:	2b2e      	cmp	r3, #46	@ 0x2e
 800b676:	d10a      	bne.n	800b68e <_vfiprintf_r+0x156>
 800b678:	7863      	ldrb	r3, [r4, #1]
 800b67a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b67c:	d132      	bne.n	800b6e4 <_vfiprintf_r+0x1ac>
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	1d1a      	adds	r2, r3, #4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	9203      	str	r2, [sp, #12]
 800b686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b68a:	3402      	adds	r4, #2
 800b68c:	9305      	str	r3, [sp, #20]
 800b68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b764 <_vfiprintf_r+0x22c>
 800b692:	7821      	ldrb	r1, [r4, #0]
 800b694:	2203      	movs	r2, #3
 800b696:	4650      	mov	r0, sl
 800b698:	f7f4 fd9a 	bl	80001d0 <memchr>
 800b69c:	b138      	cbz	r0, 800b6ae <_vfiprintf_r+0x176>
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	eba0 000a 	sub.w	r0, r0, sl
 800b6a4:	2240      	movs	r2, #64	@ 0x40
 800b6a6:	4082      	lsls	r2, r0
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	3401      	adds	r4, #1
 800b6ac:	9304      	str	r3, [sp, #16]
 800b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b2:	4829      	ldr	r0, [pc, #164]	@ (800b758 <_vfiprintf_r+0x220>)
 800b6b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6b8:	2206      	movs	r2, #6
 800b6ba:	f7f4 fd89 	bl	80001d0 <memchr>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d03f      	beq.n	800b742 <_vfiprintf_r+0x20a>
 800b6c2:	4b26      	ldr	r3, [pc, #152]	@ (800b75c <_vfiprintf_r+0x224>)
 800b6c4:	bb1b      	cbnz	r3, 800b70e <_vfiprintf_r+0x1d6>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	3307      	adds	r3, #7
 800b6ca:	f023 0307 	bic.w	r3, r3, #7
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	9303      	str	r3, [sp, #12]
 800b6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d4:	443b      	add	r3, r7
 800b6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d8:	e76a      	b.n	800b5b0 <_vfiprintf_r+0x78>
 800b6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6de:	460c      	mov	r4, r1
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	e7a8      	b.n	800b636 <_vfiprintf_r+0xfe>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	3401      	adds	r4, #1
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f6:	3a30      	subs	r2, #48	@ 0x30
 800b6f8:	2a09      	cmp	r2, #9
 800b6fa:	d903      	bls.n	800b704 <_vfiprintf_r+0x1cc>
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0c6      	beq.n	800b68e <_vfiprintf_r+0x156>
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	e7c4      	b.n	800b68e <_vfiprintf_r+0x156>
 800b704:	fb0c 2101 	mla	r1, ip, r1, r2
 800b708:	4604      	mov	r4, r0
 800b70a:	2301      	movs	r3, #1
 800b70c:	e7f0      	b.n	800b6f0 <_vfiprintf_r+0x1b8>
 800b70e:	ab03      	add	r3, sp, #12
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	462a      	mov	r2, r5
 800b714:	4b12      	ldr	r3, [pc, #72]	@ (800b760 <_vfiprintf_r+0x228>)
 800b716:	a904      	add	r1, sp, #16
 800b718:	4630      	mov	r0, r6
 800b71a:	f7fd fda3 	bl	8009264 <_printf_float>
 800b71e:	4607      	mov	r7, r0
 800b720:	1c78      	adds	r0, r7, #1
 800b722:	d1d6      	bne.n	800b6d2 <_vfiprintf_r+0x19a>
 800b724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b726:	07d9      	lsls	r1, r3, #31
 800b728:	d405      	bmi.n	800b736 <_vfiprintf_r+0x1fe>
 800b72a:	89ab      	ldrh	r3, [r5, #12]
 800b72c:	059a      	lsls	r2, r3, #22
 800b72e:	d402      	bmi.n	800b736 <_vfiprintf_r+0x1fe>
 800b730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b732:	f7fe fad3 	bl	8009cdc <__retarget_lock_release_recursive>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	065b      	lsls	r3, r3, #25
 800b73a:	f53f af1f 	bmi.w	800b57c <_vfiprintf_r+0x44>
 800b73e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b740:	e71e      	b.n	800b580 <_vfiprintf_r+0x48>
 800b742:	ab03      	add	r3, sp, #12
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	462a      	mov	r2, r5
 800b748:	4b05      	ldr	r3, [pc, #20]	@ (800b760 <_vfiprintf_r+0x228>)
 800b74a:	a904      	add	r1, sp, #16
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7fe f821 	bl	8009794 <_printf_i>
 800b752:	e7e4      	b.n	800b71e <_vfiprintf_r+0x1e6>
 800b754:	0800bdf7 	.word	0x0800bdf7
 800b758:	0800be01 	.word	0x0800be01
 800b75c:	08009265 	.word	0x08009265
 800b760:	0800b515 	.word	0x0800b515
 800b764:	0800bdfd 	.word	0x0800bdfd

0800b768 <__swbuf_r>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	460e      	mov	r6, r1
 800b76c:	4614      	mov	r4, r2
 800b76e:	4605      	mov	r5, r0
 800b770:	b118      	cbz	r0, 800b77a <__swbuf_r+0x12>
 800b772:	6a03      	ldr	r3, [r0, #32]
 800b774:	b90b      	cbnz	r3, 800b77a <__swbuf_r+0x12>
 800b776:	f7fe f9b9 	bl	8009aec <__sinit>
 800b77a:	69a3      	ldr	r3, [r4, #24]
 800b77c:	60a3      	str	r3, [r4, #8]
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	071a      	lsls	r2, r3, #28
 800b782:	d501      	bpl.n	800b788 <__swbuf_r+0x20>
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	b943      	cbnz	r3, 800b79a <__swbuf_r+0x32>
 800b788:	4621      	mov	r1, r4
 800b78a:	4628      	mov	r0, r5
 800b78c:	f000 f82a 	bl	800b7e4 <__swsetup_r>
 800b790:	b118      	cbz	r0, 800b79a <__swbuf_r+0x32>
 800b792:	f04f 37ff 	mov.w	r7, #4294967295
 800b796:	4638      	mov	r0, r7
 800b798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	6922      	ldr	r2, [r4, #16]
 800b79e:	1a98      	subs	r0, r3, r2
 800b7a0:	6963      	ldr	r3, [r4, #20]
 800b7a2:	b2f6      	uxtb	r6, r6
 800b7a4:	4283      	cmp	r3, r0
 800b7a6:	4637      	mov	r7, r6
 800b7a8:	dc05      	bgt.n	800b7b6 <__swbuf_r+0x4e>
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f7ff fde9 	bl	800b384 <_fflush_r>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d1ed      	bne.n	800b792 <__swbuf_r+0x2a>
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	60a3      	str	r3, [r4, #8]
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	6022      	str	r2, [r4, #0]
 800b7c2:	701e      	strb	r6, [r3, #0]
 800b7c4:	6962      	ldr	r2, [r4, #20]
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d004      	beq.n	800b7d6 <__swbuf_r+0x6e>
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	07db      	lsls	r3, r3, #31
 800b7d0:	d5e1      	bpl.n	800b796 <__swbuf_r+0x2e>
 800b7d2:	2e0a      	cmp	r6, #10
 800b7d4:	d1df      	bne.n	800b796 <__swbuf_r+0x2e>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f7ff fdd3 	bl	800b384 <_fflush_r>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d0d9      	beq.n	800b796 <__swbuf_r+0x2e>
 800b7e2:	e7d6      	b.n	800b792 <__swbuf_r+0x2a>

0800b7e4 <__swsetup_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4b29      	ldr	r3, [pc, #164]	@ (800b88c <__swsetup_r+0xa8>)
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	6818      	ldr	r0, [r3, #0]
 800b7ec:	460c      	mov	r4, r1
 800b7ee:	b118      	cbz	r0, 800b7f8 <__swsetup_r+0x14>
 800b7f0:	6a03      	ldr	r3, [r0, #32]
 800b7f2:	b90b      	cbnz	r3, 800b7f8 <__swsetup_r+0x14>
 800b7f4:	f7fe f97a 	bl	8009aec <__sinit>
 800b7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fc:	0719      	lsls	r1, r3, #28
 800b7fe:	d422      	bmi.n	800b846 <__swsetup_r+0x62>
 800b800:	06da      	lsls	r2, r3, #27
 800b802:	d407      	bmi.n	800b814 <__swsetup_r+0x30>
 800b804:	2209      	movs	r2, #9
 800b806:	602a      	str	r2, [r5, #0]
 800b808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b80c:	81a3      	strh	r3, [r4, #12]
 800b80e:	f04f 30ff 	mov.w	r0, #4294967295
 800b812:	e033      	b.n	800b87c <__swsetup_r+0x98>
 800b814:	0758      	lsls	r0, r3, #29
 800b816:	d512      	bpl.n	800b83e <__swsetup_r+0x5a>
 800b818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b81a:	b141      	cbz	r1, 800b82e <__swsetup_r+0x4a>
 800b81c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b820:	4299      	cmp	r1, r3
 800b822:	d002      	beq.n	800b82a <__swsetup_r+0x46>
 800b824:	4628      	mov	r0, r5
 800b826:	f7ff f8a7 	bl	800a978 <_free_r>
 800b82a:	2300      	movs	r3, #0
 800b82c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b834:	81a3      	strh	r3, [r4, #12]
 800b836:	2300      	movs	r3, #0
 800b838:	6063      	str	r3, [r4, #4]
 800b83a:	6923      	ldr	r3, [r4, #16]
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	f043 0308 	orr.w	r3, r3, #8
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	b94b      	cbnz	r3, 800b85e <__swsetup_r+0x7a>
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b854:	d003      	beq.n	800b85e <__swsetup_r+0x7a>
 800b856:	4621      	mov	r1, r4
 800b858:	4628      	mov	r0, r5
 800b85a:	f000 f883 	bl	800b964 <__smakebuf_r>
 800b85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b862:	f013 0201 	ands.w	r2, r3, #1
 800b866:	d00a      	beq.n	800b87e <__swsetup_r+0x9a>
 800b868:	2200      	movs	r2, #0
 800b86a:	60a2      	str	r2, [r4, #8]
 800b86c:	6962      	ldr	r2, [r4, #20]
 800b86e:	4252      	negs	r2, r2
 800b870:	61a2      	str	r2, [r4, #24]
 800b872:	6922      	ldr	r2, [r4, #16]
 800b874:	b942      	cbnz	r2, 800b888 <__swsetup_r+0xa4>
 800b876:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b87a:	d1c5      	bne.n	800b808 <__swsetup_r+0x24>
 800b87c:	bd38      	pop	{r3, r4, r5, pc}
 800b87e:	0799      	lsls	r1, r3, #30
 800b880:	bf58      	it	pl
 800b882:	6962      	ldrpl	r2, [r4, #20]
 800b884:	60a2      	str	r2, [r4, #8]
 800b886:	e7f4      	b.n	800b872 <__swsetup_r+0x8e>
 800b888:	2000      	movs	r0, #0
 800b88a:	e7f7      	b.n	800b87c <__swsetup_r+0x98>
 800b88c:	20000108 	.word	0x20000108

0800b890 <_raise_r>:
 800b890:	291f      	cmp	r1, #31
 800b892:	b538      	push	{r3, r4, r5, lr}
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	d904      	bls.n	800b8a4 <_raise_r+0x14>
 800b89a:	2316      	movs	r3, #22
 800b89c:	6003      	str	r3, [r0, #0]
 800b89e:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b8a6:	b112      	cbz	r2, 800b8ae <_raise_r+0x1e>
 800b8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8ac:	b94b      	cbnz	r3, 800b8c2 <_raise_r+0x32>
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f000 f830 	bl	800b914 <_getpid_r>
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8be:	f000 b817 	b.w	800b8f0 <_kill_r>
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d00a      	beq.n	800b8dc <_raise_r+0x4c>
 800b8c6:	1c59      	adds	r1, r3, #1
 800b8c8:	d103      	bne.n	800b8d2 <_raise_r+0x42>
 800b8ca:	2316      	movs	r3, #22
 800b8cc:	6003      	str	r3, [r0, #0]
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	e7e7      	b.n	800b8a2 <_raise_r+0x12>
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8d8:	4620      	mov	r0, r4
 800b8da:	4798      	blx	r3
 800b8dc:	2000      	movs	r0, #0
 800b8de:	e7e0      	b.n	800b8a2 <_raise_r+0x12>

0800b8e0 <raise>:
 800b8e0:	4b02      	ldr	r3, [pc, #8]	@ (800b8ec <raise+0xc>)
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	f7ff bfd3 	b.w	800b890 <_raise_r>
 800b8ea:	bf00      	nop
 800b8ec:	20000108 	.word	0x20000108

0800b8f0 <_kill_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d07      	ldr	r5, [pc, #28]	@ (800b910 <_kill_r+0x20>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	602b      	str	r3, [r5, #0]
 800b8fe:	f7f5 fe1d 	bl	800153c <_kill>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d102      	bne.n	800b90c <_kill_r+0x1c>
 800b906:	682b      	ldr	r3, [r5, #0]
 800b908:	b103      	cbz	r3, 800b90c <_kill_r+0x1c>
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	bd38      	pop	{r3, r4, r5, pc}
 800b90e:	bf00      	nop
 800b910:	20006144 	.word	0x20006144

0800b914 <_getpid_r>:
 800b914:	f7f5 be0a 	b.w	800152c <_getpid>

0800b918 <__swhatbuf_r>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	460c      	mov	r4, r1
 800b91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b920:	2900      	cmp	r1, #0
 800b922:	b096      	sub	sp, #88	@ 0x58
 800b924:	4615      	mov	r5, r2
 800b926:	461e      	mov	r6, r3
 800b928:	da0d      	bge.n	800b946 <__swhatbuf_r+0x2e>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b930:	f04f 0100 	mov.w	r1, #0
 800b934:	bf14      	ite	ne
 800b936:	2340      	movne	r3, #64	@ 0x40
 800b938:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b93c:	2000      	movs	r0, #0
 800b93e:	6031      	str	r1, [r6, #0]
 800b940:	602b      	str	r3, [r5, #0]
 800b942:	b016      	add	sp, #88	@ 0x58
 800b944:	bd70      	pop	{r4, r5, r6, pc}
 800b946:	466a      	mov	r2, sp
 800b948:	f000 f848 	bl	800b9dc <_fstat_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	dbec      	blt.n	800b92a <__swhatbuf_r+0x12>
 800b950:	9901      	ldr	r1, [sp, #4]
 800b952:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b956:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b95a:	4259      	negs	r1, r3
 800b95c:	4159      	adcs	r1, r3
 800b95e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b962:	e7eb      	b.n	800b93c <__swhatbuf_r+0x24>

0800b964 <__smakebuf_r>:
 800b964:	898b      	ldrh	r3, [r1, #12]
 800b966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b968:	079d      	lsls	r5, r3, #30
 800b96a:	4606      	mov	r6, r0
 800b96c:	460c      	mov	r4, r1
 800b96e:	d507      	bpl.n	800b980 <__smakebuf_r+0x1c>
 800b970:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	2301      	movs	r3, #1
 800b97a:	6163      	str	r3, [r4, #20]
 800b97c:	b003      	add	sp, #12
 800b97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b980:	ab01      	add	r3, sp, #4
 800b982:	466a      	mov	r2, sp
 800b984:	f7ff ffc8 	bl	800b918 <__swhatbuf_r>
 800b988:	9f00      	ldr	r7, [sp, #0]
 800b98a:	4605      	mov	r5, r0
 800b98c:	4639      	mov	r1, r7
 800b98e:	4630      	mov	r0, r6
 800b990:	f7ff f866 	bl	800aa60 <_malloc_r>
 800b994:	b948      	cbnz	r0, 800b9aa <__smakebuf_r+0x46>
 800b996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b99a:	059a      	lsls	r2, r3, #22
 800b99c:	d4ee      	bmi.n	800b97c <__smakebuf_r+0x18>
 800b99e:	f023 0303 	bic.w	r3, r3, #3
 800b9a2:	f043 0302 	orr.w	r3, r3, #2
 800b9a6:	81a3      	strh	r3, [r4, #12]
 800b9a8:	e7e2      	b.n	800b970 <__smakebuf_r+0xc>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	6020      	str	r0, [r4, #0]
 800b9ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9ba:	b15b      	cbz	r3, 800b9d4 <__smakebuf_r+0x70>
 800b9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f000 f81d 	bl	800ba00 <_isatty_r>
 800b9c6:	b128      	cbz	r0, 800b9d4 <__smakebuf_r+0x70>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f023 0303 	bic.w	r3, r3, #3
 800b9ce:	f043 0301 	orr.w	r3, r3, #1
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	431d      	orrs	r5, r3
 800b9d8:	81a5      	strh	r5, [r4, #12]
 800b9da:	e7cf      	b.n	800b97c <__smakebuf_r+0x18>

0800b9dc <_fstat_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	@ (800b9fc <_fstat_r+0x20>)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	f7f5 fe07 	bl	80015fc <_fstat>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	d102      	bne.n	800b9f8 <_fstat_r+0x1c>
 800b9f2:	682b      	ldr	r3, [r5, #0]
 800b9f4:	b103      	cbz	r3, 800b9f8 <_fstat_r+0x1c>
 800b9f6:	6023      	str	r3, [r4, #0]
 800b9f8:	bd38      	pop	{r3, r4, r5, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20006144 	.word	0x20006144

0800ba00 <_isatty_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d06      	ldr	r5, [pc, #24]	@ (800ba1c <_isatty_r+0x1c>)
 800ba04:	2300      	movs	r3, #0
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	f7f5 fe06 	bl	800161c <_isatty>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_isatty_r+0x1a>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_isatty_r+0x1a>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	20006144 	.word	0x20006144

0800ba20 <_init>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	bf00      	nop
 800ba24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba26:	bc08      	pop	{r3}
 800ba28:	469e      	mov	lr, r3
 800ba2a:	4770      	bx	lr

0800ba2c <_fini>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	bf00      	nop
 800ba30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba32:	bc08      	pop	{r3}
 800ba34:	469e      	mov	lr, r3
 800ba36:	4770      	bx	lr
